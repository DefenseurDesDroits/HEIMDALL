<?xml version="1.0"?>
<doc>
<assembly>
<name>
Ludo
</name>
</assembly>
<members>
<member name="F:Ludo.Styles.Consts.LUDO_STYLES_NO_ANCHOR">
	<summary>
 To disable the anchor style
 </summary>
	<remarks></remarks>
</member><member name="F:Ludo.Styles.Consts.LUDO_STYLES_DEFAULT_ANCHOR">
	<summary>
 Default Anchor
 </summary>
	<remarks></remarks>
</member><member name="F:Ludo.Styles.Consts.LUDO_STYLES_DEFAULT_BACK_COLOR">
	<summary>
 Default Back Color
 </summary>
	<remarks></remarks>
</member><member name="F:Ludo.Styles.Consts.LUDO_STYLES_DEFAULT_BACKGROUNDIMAGE">
	<summary>
 our default background Image
 </summary>
	<remarks></remarks>
</member><member name="F:Ludo.Styles.Consts.LUDO_STYLES_NO_WIDTH">
	<summary>
 Value when we want no width
 </summary>
	<remarks></remarks>
</member><member name="F:Ludo.Styles.Consts.LUDO_STYLES_NO_HEIGHT">
	<summary>
 Value when we want no Height
 </summary>
	<remarks></remarks>
</member><member name="F:Ludo.Styles.Consts.LUDO_STYLES_DEFAULT_COMPAGNYNAME">
	<summary>
 our default Company Name for the control
 </summary>
	<remarks></remarks>
</member><member name="T:Ludo.Styles.Consts">
	<summary>
 Module for the const values
 </summary>
	<remarks></remarks>
</member><member name="F:Ludo.Styles.Ludo_Style_Control.nAnchor">
	<summary>
 Anchor we want apply
 </summary>
	<remarks></remarks>
</member><member name="F:Ludo.Styles.Ludo_Style_Control.bBackColor">
	<summary>
 Is allowed back color ?
 </summary>
	<remarks></remarks>
</member><member name="F:Ludo.Styles.Ludo_Style_Control.oBackColor">
	<summary>
 Back color
 </summary>
	<remarks></remarks>
</member><member name="F:Ludo.Styles.Ludo_Style_Control.sBackgroundImage">
	<summary>
 Our Background image
 </summary>
	<remarks></remarks>
</member><member name="F:Ludo.Styles.Ludo_Style_Control.bEnable">
	<summary>
 member to enable or disable the control
 </summary>
	<remarks></remarks>
</member><member name="F:Ludo.Styles.Ludo_Style_Control.oFont">
	<summary>
 Our font
 </summary>
	<remarks></remarks>
</member><member name="F:Ludo.Styles.Ludo_Style_Control.nWidth">
	<summary>
 Width of the Controls
 </summary>
	<remarks></remarks>
</member><member name="F:Ludo.Styles.Ludo_Style_Control.nHeight">
	<summary>
 Height of the controls
 </summary>
	<remarks></remarks>
</member><member name="F:Ludo.Styles.Ludo_Style_Control.sText">
	<summary>
 Test of the control
 </summary>
	<remarks></remarks>
</member><member name="F:Ludo.Styles.Ludo_Style_Control.bVisible">
	<summary>
 Is the control visible
 </summary>
	<remarks></remarks>
</member><member name="F:Ludo.Styles.Ludo_Style_Control.sCompanyName">
	<summary>
 CompagnyName
 </summary>
	<remarks></remarks>
</member><member name="M:Ludo.Styles.Ludo_Style_Control.setnAnchor(System.Int32)">
	<summary>
 Method to set the anchor
 </summary>
	<param name="nValue">Integer, our new Anchor Value</param>
	<returns>Boolean, True if done !</returns>
	<remarks></remarks>
</member><member name="M:Ludo.Styles.Ludo_Style_Control.setbBackColor(System.Boolean)">
	<summary>
 Method to set the possiblility of setting the back color
 </summary>
	<param name="bValue">Boolean, True enable</param>
	<returns>Boolean, True if done !</returns>
	<remarks></remarks>
</member><member name="M:Ludo.Styles.Ludo_Style_Control.setoBackColor(System.Drawing.Color)">
	<summary>
 Method to set the back color
 </summary>
	<param name="oColor">System.Drawing.Color, our new Back Color</param>
	<returns>Boolean, True if done</returns>
	<remarks></remarks>
</member><member name="M:Ludo.Styles.Ludo_Style_Control.setsBackgroundImage(System.String)">
	<summary>
 Method to change the Background Image
 </summary>
	<param name="sValue">String, our image file name</param>
	<returns>Boolean, True if done !</returns>
	<remarks></remarks>
</member><member name="M:Ludo.Styles.Ludo_Style_Control.setbEnable(System.Boolean)">
	<summary>
 Method to set the enable or not the control
 </summary>
	<param name="bValue">Boolean, True enable</param>
	<returns>Boolean, True if done !</returns>
	<remarks></remarks>
</member><member name="M:Ludo.Styles.Ludo_Style_Control.setoFont(System.Drawing.Font)">
	<summary>
 Method to set the font
 </summary>
	<param name="oValue"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Ludo.Styles.Ludo_Style_Control.setnWidth(System.Int32)">
	<summary>
 Method to set the width
 </summary>
	<param name="nValue">Integer, width value</param>
	<returns>Boolean, True if done</returns>
	<remarks></remarks>
</member><member name="M:Ludo.Styles.Ludo_Style_Control.setnHeight(System.Int32)">
	<summary>
 Method to set the height
 </summary>
	<param name="nValue">Integer, width value</param>
	<returns>Boolean, True if done</returns>
	<remarks></remarks>
</member><member name="M:Ludo.Styles.Ludo_Style_Control.setsText(System.String)">
	<summary>
 Method to set the text
 </summary>
	<param name="sValue">String, our text value</param>
	<returns>Boolean, True if done</returns>
	<remarks></remarks>
</member><member name="M:Ludo.Styles.Ludo_Style_Control.setbVisible(System.Boolean)">
	<summary>
 Method to set visible or not the control
 </summary>
	<param name="bValue">Boolean, visible</param>
	<returns>Boolean, True if done</returns>
	<remarks></remarks>
</member><member name="T:Ludo.Styles.Ludo_Style_Control">
	<summary>
 Class to manage Style on 
 </summary>
	<remarks></remarks>
</member><member name="F:LAY_LUDO_DTB_Table_editor.oTable">
	<summary>
 our table object we edit
 </summary>
	<remarks></remarks>
</member><member name="F:LAY_LUDO_DTB_Table_editor.lst_oLay">
	<summary>
 Our list of layout to manage column
 </summary>
	<remarks></remarks>
</member><member name="E:LAY_LUDO_DTB_Table_editor.eUpdate">
	<summary>
 our event to update the table
 </summary>
	<remarks></remarks>
</member><member name="E:LAY_LUDO_DTB_Table_editor.eQuit">
	<summary>
 Our event to quit the table
 </summary>
	<remarks></remarks>
</member><member name="E:LAY_LUDO_DTB_Table_editor.eDelete">
	<summary>
 Our event to delete the Table
 </summary>
	<remarks></remarks>
</member><member name="M:LAY_LUDO_DTB_Table_editor.init(Ludo.DTB.Ludo_DTB_Table@)">
	<summary>
 Method to initialize the layout
 </summary>
	<param name="oATable">Ludo.DTB.Ludo_DTB_Table, our table we want edit</param>
	<returns>Boolean, true if done</returns>
	<remarks></remarks>
</member><member name="M:LAY_LUDO_DTB_Table_editor.setTable(Ludo.DTB.Ludo_DTB_Table@)">
	<summary>
 Method to set the table
 </summary>
	<param name="oATable">Ludo.DTB.Ludo_DTB_Table, our next table</param>
	<returns>Boolean, true if done</returns>
	<remarks></remarks>
</member><member name="M:LAY_LUDO_DTB_Table_editor.getLudo_DTB_Table">
	<summary>
 Method to get the Table
 </summary>
	<returns>Ludo.DTB.Ludo_DTB_Table, our table or nothing</returns>
	<remarks></remarks>
</member><member name="M:LAY_LUDO_DTB_Table_editor.fillColumns">
	<summary>
 Method to plots all the columns
 </summary>
	<returns>Boolean, true if done</returns>
	<remarks></remarks>
</member><member name="M:LAY_LUDO_DTB_Table_editor.fillFields">
	<summary>
 method to fill the table field
 </summary>
	<returns>Boolean, True if done</returns>
	<remarks></remarks>
</member><member name="M:LAY_LUDO_DTB_Table_editor.objToView(Ludo.DTB.Ludo_DTB_Table@)">
	<summary>
 method to fill the table field
 </summary>
	<param name="oTab">Ludo.DTB.Ludo_DTB_Table, our table to plot</param>
	<returns>Boolean, true if done</returns>
	<remarks></remarks>
</member><member name="M:LAY_LUDO_DTB_Table_editor.viewToObj(Ludo.DTB.Ludo_DTB_Table@)">
	<summary>
 method to fill the table field
 </summary>
	<param name="oTab">Ludo.DTB.Ludo_DTB_Table, Our table to plot</param>
	<returns>Boolean, true if done</returns>
	<remarks></remarks>
</member><member name="M:LAY_LUDO_DTB_Table_editor.deleteColumn(LAY_LUDO_DTB_Column_editor@)">
	<summary>
 Method to delete a column
 </summary>
	<param name="oLay_Column">LAY_LUDO_DTB_Column_editor, our column graphic object</param>
	<returns>Boolean, true if done</returns>
	<remarks></remarks>
</member><member name="M:LAY_LUDO_DTB_Table_editor.addColumn">
	<summary>
 Method to add a column
 </summary>
	<returns>Boolean, true if done</returns>
	<remarks></remarks>
</member><member name="M:LAY_LUDO_DTB_Table_editor.checkValidity">
	<summary>
 Method to check the validity of the table
 </summary>
	<returns>Boolean, true if valide</returns>
	<remarks></remarks>
</member><member name="M:LAY_LUDO_DTB_Table_editor.saveTable">
	<summary>
 Method to save the content of a table
 </summary>
	<returns>Boolean, true if done</returns>
	<remarks></remarks>
</member><member name="M:LAY_LUDO_DTB_Table_editor.raiseeDeleteEvent">
	<summary>
 Method to raise the delete event
 </summary>
	<returns>Boolean, True if done</returns>
	<remarks></remarks>
</member><member name="M:LAY_LUDO_DTB_Table_editor.raiseeQuit">
	<summary>
 Method to raise the quit event
 </summary>
	<returns>Boolean, True if done</returns>
	<remarks></remarks>
</member><member name="M:LAY_LUDO_DTB_Table_editor.raiseeUpdate">
	<summary>
 Method to raise the update event
 </summary>
	<returns>Boolean, True if done</returns>
	<remarks></remarks>
</member><member name="M:LAY_LUDO_DTB_Table_editor.HANDLER_Column_Delete(System.Object,System.EventArgs)">
	<summary>
 Handler to manage the delete event thrown by a column
 </summary>
	<param name="sender">Object, our object who sends the event</param>
	<param name="e">Eventargs, our argument</param>
	<remarks></remarks>
</member><member name="M:LAY_LUDO_DTB_Table_editor.BTN_Save_Click(System.Object,System.EventArgs)">
	<summary>
 Handler to manage the save event
 </summary>
	<param name="sender">Object, our object who sends the event</param>
	<param name="e">Eventargs, our argument</param>
	<remarks></remarks>
</member><member name="M:LAY_LUDO_DTB_Table_editor.BTN_Save_Quit_Click(System.Object,System.EventArgs)">
	<summary>
 Handler to manage the save and quit event
 </summary>
	<param name="sender">Object, our object who sends the event</param>
	<param name="e">Eventargs, our argument</param>
	<remarks></remarks>
</member><member name="M:LAY_LUDO_DTB_Table_editor.BTN_Quit_Click(System.Object,System.EventArgs)">
	<summary>
 Handler to manage the quit event
 </summary>
	<param name="sender">Object, our object who sends the event</param>
	<param name="e">Eventargs, our argument</param>
	<remarks></remarks>
</member><member name="M:LAY_LUDO_DTB_Table_editor.BTN_Add_Column_Click(System.Object,System.EventArgs)">
	<summary>
 Handler to manage the add column event event
 </summary>
	<param name="sender">Object, our object who sends the event</param>
	<param name="e">Eventargs, our argument</param>
	<remarks></remarks>
</member><member name="M:LAY_LUDO_DTB_Table_editor.OPT_Check_Click(System.Object,System.EventArgs)">
	<summary>
 Handler to manage manual check
 </summary>
	<param name="sender">Object, the sender of the event</param>
	<param name="e">EventArg, the argument</param>
	<remarks>This Handler calls the public overridable method checkValidity()</remarks>
</member><member name="M:LAY_LUDO_DTB_Table_editor.OPT_Clone_Click(System.Object,System.EventArgs)">
	<summary>
 Handler to manage the clonage of this column
 </summary>
	<param name="sender">Object, the sender of the event</param>
	<param name="e">EventArg, the argument</param>
	<remarks></remarks>
</member><member name="M:LAY_LUDO_DTB_Table_editor.OPT_Delete_Click(System.Object,System.EventArgs)">
	<summary>
 Handler to manage the delete from the ContextMenu
 </summary>
	<param name="sender">Object, the sender of the event</param>
	<param name="e">EventArg, the argument</param>
	<remarks>This Handler calls the public overridable method raiseeDeleteEvent()</remarks>
</member><member name="M:LAY_LUDO_DTB_Table_editor.#ctor">
	<summary>
 default builder
 </summary>
	<remarks></remarks>
</member><member name="M:LAY_LUDO_DTB_Table_editor.#ctor(Ludo.DTB.Ludo_DTB_Table@)">
	<summary>
 Builder with table object
 </summary>
	<param name="oATable">Ludo.DTB.Ludo_DTB_Table, our table we want edit</param>
	<remarks></remarks>
</member><member name="T:LAY_LUDO_DTB_Table_editor">
	<summary>
 Layout to create or modify a DTB table
 </summary>
	<remarks></remarks>
</member><member name="M:Ludo_Tools.LUDO_VERSION">
	<summary>
 Function to get the Ludo Library Version
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Ludo_Tools.IsSomething(System.Object@)">
	<summary>
 Function to know if an object is not null 
 </summary>
	<param name="oObj">Object, our object</param>
	<returns>Boolean, True if oObject is not nothing</returns>
	<remarks>This function calls IsNothing</remarks>
</member><member name="M:Ludo_Tools.NotDevYet">
	<summary>
 Function to pop up a MsgBox Saying : NOT DEVELOPED YET
 </summary>
	<remarks></remarks>
</member><member name="M:Ludo_Tools.NoSpace(System.String)">
	<summary>
 Function to delete the " " before and after
 </summary>
	<param name="sTarget">String, Text you want to analize</param>
	<returns>String, String without starting and ending blanks</returns>
	<remarks>This function conciders as blank vbCr, vbTab and 0x0A too</remarks>
</member><member name="M:Ludo_Tools.NoSpace(System.Windows.Forms.Control@)">
	<summary>
 Function to delete the " " before and after from a text in a control
 </summary>
	<param name="oControl">System.Windows.Forms.Control, our control</param>
	<returns>String, String without starting and ending blanks</returns>
	<remarks>The function use the "Text" property of System.Windows.Forms.Control to call the function "NoSpace(ByVal sTarget As String)"</remarks>
</member><member name="M:Ludo_Tools.ObtainStrBetweenTagAAndB(System.String,System.String,System.String)">
	<summary>
 Function to obtain a str between tag A And Tag B!
 </summary>
	<param name="sStr">String, the string we want to analize</param>
	<param name="sTagA">String, the Open Tag</param>
	<param name="sTagB">String, the Close Tag</param>
	<returns>String, "" if not found, Tag A + sContent + Tag B either</returns>
	<remarks></remarks>
</member><member name="M:Ludo_Tools.LUDO_Now">
	<summary>
 Method to obtain a string current Date
 </summary>
	<returns>String, </returns>
	<remarks></remarks>
</member><member name="M:Ludo_Tools.LUDO_MD5(System.String)">
	<summary>
 Method to convert a String into a MD5
 </summary>
	<param name="sStr">String, we want convert into MD5</param>
	<returns>String, "" if sStr is Nothing MD5 elsif </returns>
	<remarks></remarks>
</member><member name="M:Ludo_Tools.LUDO_CLOCK">
	<summary>
 Method to get the clock from the Beginning !
 </summary>
	<returns>Double, millisecondes</returns>
	<remarks></remarks>
</member><member name="M:Ludo_Tools.PGZero(System.Windows.Forms.ProgressBar@,System.Int32)">
	<summary>
 Function to set the value of a progress Bar to Zero
 </summary>
	<param name="PG_Progress_Bar">ProgressBar, PG we want to set the value</param>
	<param name="nMax">Integer, Value max</param>
	<returns>Boolean, return true if PG is not nothing</returns>
	<remarks></remarks>
</member><member name="M:Ludo_Tools.PGZero(Ludo.CTRL.Ludo_ProgressBar@,System.Int32)">
	<summary>
 Function to set the value of a progress Bar to Zero
 </summary>
	<param name="PG_Progress_Bar">Ludo.CTRL.Ludo_ProgressBar, PG we want to set the value</param>
	<param name="nMax">Integer, Value max</param>
	<returns>Boolean, return true if PG is not nothing</returns>
	<remarks></remarks>
</member><member name="M:Ludo_Tools.PGZero(System.Windows.Forms.ToolStripProgressBar@,System.Int32)">
	<summary>
 Function to set the value of a progress Bar to Zero, in a tool
 </summary>
	<param name="PG_Progress_Bar">System.Windows.Forms.ToolStripProgressBar, PG we want to set the value</param>
	<param name="nMax">Integer, Value max</param>
	<returns>Boolean, return true if PG is not nothing</returns>
	<remarks></remarks>
</member><member name="M:Ludo_Tools.PGZero(DataGridViewProgressCell@,System.Int32,System.Int32)">
	<summary>
 Function to set the value of a progress Bar to Zero, in a Cell
 </summary>
	<param name="PG_Progress_Bar">DataGridViewProgressCell, PG we want to set the value</param>
	<param name="nMax">Integer, Value max</param>
	<returns>Boolean, return true if PG is not nothing</returns>
	<remarks></remarks>
</member><member name="M:Ludo_Tools.PGPlus(System.Windows.Forms.ProgressBar@,System.Int32)">
	<summary>
 Function to increment the progress Bar
 </summary>
	<param name="PG_Progress_Bar">ProgressBar, PG we want to increase the value</param>
	<param name="nStep">Integer, Step to increase</param>
	<returns>Boolean, return true if PG is not nothing</returns>
	<remarks></remarks>
</member><member name="M:Ludo_Tools.PGPlus(Ludo.CTRL.Ludo_ProgressBar@,System.Int32)">
	<summary>
 Function to increment the progress Bar
 </summary>
	<param name="PG_Progress_Bar">Ludo.CTRL.Ludo_ProgressBar, PG we want to increase the value</param>
	<param name="nStep">Integer, Step to increase</param>
	<returns>Boolean, return true if PG is not nothing</returns>
	<remarks></remarks>
</member><member name="M:Ludo_Tools.PGPlus(System.Windows.Forms.ToolStripProgressBar@,System.Int32)">
	<summary>
 Function to increment the progress Bar, in a tool
 </summary>
	<param name="PG_Progress_Bar">System.Windows.Forms.ToolStripProgressBar, PG we want to increase the value</param>
	<param name="nStep">Integer, Step to increase</param>
	<returns>Boolean, return true if PG is not nothing</returns>
	<remarks></remarks>
</member><member name="M:Ludo_Tools.PGPlus(DataGridViewProgressCell@,System.Int32)">
	<summary>
 Function to increment the progress Bar, in a Cell
 </summary>
	<param name="PG_Progress_Bar">System.Windows.Forms.ToolStripProgressBar, PG we want to increase the value</param>
	<param name="nStep">Integer, Step to increase</param>
	<returns>Boolean, return true if PG is not nothing</returns>
	<remarks></remarks>
</member><member name="M:Ludo_Tools.PGPerformStep(System.Windows.Forms.ProgressBar@)">
	<summary>
 Method to Perform step on Progress Bar
 </summary>
	<param name="PG_">ProgressBar, PG we want to PerformSet</param>
	<returns>Boolean, return true if PG is not null</returns>
	<remarks></remarks>
</member><member name="M:Ludo_Tools.PGPerformStep(Ludo.CTRL.Ludo_ProgressBar@)">
	<summary>
 Method to Perform step on Progress Bar
 </summary>
	<param name="PG_">Ludo.CTRL.ProgressBar, PG we want to PerformSet</param>
	<returns>Boolean, return true if PG is not null</returns>
	<remarks></remarks>
</member><member name="M:Ludo_Tools.PGSet(System.Windows.Forms.ProgressBar@,System.Int32)">
	<summary>
 Function to set with a value the progress Bar
 </summary>
	<param name="PG_Progress_Bar">ProgressBar, PG we want to set the value</param>
	<param name="nStep">Integer, value wanted</param>
	<returns>Boolean, return true if PG is not nothing</returns>
	<remarks></remarks>
</member><member name="M:Ludo_Tools.PGSet(Ludo.CTRL.Ludo_ProgressBar@,System.Int32)">
	<summary>
 Function to set with a value the progress Bar
 </summary>
	<param name="PG_Progress_Bar">ProgressBar, PG we want to set the value</param>
	<param name="nStep">Integer, value wanted</param>
	<returns>Boolean, return true if PG is not null</returns>
	<remarks></remarks>
</member><member name="M:Ludo_Tools.PGSet(System.Windows.Forms.ToolStripProgressBar@,System.Int32)">
	<summary>
 Function to set with a value the progress Bar, in a tool
 </summary>
	<param name="PG_Progress_Bar">System.Windows.Forms.ToolStripProgressBar, PG we want to set the value</param>
	<param name="nStep">Integer, wanted value</param>
	<returns>Boolean, return true if PG is not nothing</returns>
	<remarks></remarks>
</member><member name="M:Ludo_Tools.PGSet(DataGridViewProgressCell@,System.Int32)">
	<summary>
 Function to set with a value the progress Bar, in a cell
 </summary>
	<param name="PG_Progress_Bar">DataGridViewProgressCell, PG we want to set the value</param>
	<param name="nStep">Integer, Step to increase</param>
	<returns>Boolean, return true if PG is not nothing</returns>
	<remarks></remarks>
</member><member name="M:Ludo_Tools.LABMsg(System.Windows.Forms.Label@,System.String)">
	<summary>
 Function to pass a Message in a Label if it exists
 </summary>
	<param name="LAB_Msg">Label, to print our Msg</param>
	<param name="sMsg">String, the Message</param>
	<returns>Boolean, True if plot, false in case of nothing</returns>
	<remarks>Do Update on Label</remarks>
</member><member name="M:Ludo_Tools.LABMsg(System.Windows.Forms.ToolStripStatusLabel@,System.String)">
	<summary>
 Function to pass a Message in a Label if it exists
 </summary>
	<param name="LAB_Msg">, to print our Msg</param>
	<param name="sMsg">String, the Message</param>
	<returns>Boolean, True if plot, false in case of nothing</returns>
	<remarks>Do Update on owner</remarks>
</member><member name="M:Ludo_Tools.LABMsg(Ludo.CTRL.Ludo_ProgressBar@,System.String)">
	<summary>
 Function to pass a Message in a Label if it exists
 </summary>
	<param name="PG_Msg">Ludo.CTRL.Ludo_ProgressBar, to print our Msg</param>
	<param name="sMsg">String, the Message</param>
	<returns>Boolean, True if plot, false in case of nothing</returns>
	<remarks>Do Update on PG</remarks>
</member><member name="M:Ludo_Tools.NewUniqueSecondName(System.String)">
	<summary>
 Function to obtain a unique name with second precision
 </summary>
	<param name="sName">String, String we input</param>
	<returns>String</returns>
	<remarks></remarks>
</member><member name="M:Ludo_Tools.StrToRtf(System.String)">
	<summary>
 Function to Traduct Safely string to RTF
 </summary>
	<param name="sStr">String, Str we want in RTF !</param>
	<returns>String, RTF Formated</returns>
	<remarks>Tested but not sure !</remarks>
</member><member name="M:Ludo_Tools.CompleteDirectory(System.String)">
	<summary>
 Function to have the complete directory
 </summary>
	<param name="sPath">String, Path we want complete</param>
	<returns>String, Complete directory</returns>
	<remarks>Return "" if string is null</remarks>
</member><member name="M:Ludo_Tools.logWriteLine(System.IO.StreamWriter@,System.String)">
	<summary>
 Function to Write a line in a log file
 </summary>
	<param name="oStream">StreamWriter, Stream to write our line</param>
	<param name="sLine">Sting, Our line we want write into the Log</param>
	<returns>Boolean, True if writen, false if Stream or Line is null</returns>
	<remarks></remarks>
</member><member name="M:Ludo_Tools.addSpace3(System.String)">
	<summary>
 Function to add " " in an integer
 </summary>
	<param name="sInteger">String, represent an integer</param>
	<returns>String, our result or ""</returns>
	<remarks></remarks>
</member><member name="M:Ludo_Tools.InsertStrEveryNInInt(System.String,System.String,System.Int32)">
	<summary>
 Function to String a string in an integer
 </summary>
	<param name="sInteger">String, represent an integer</param>
	<param name="sStr">String, str to add</param>
	<param name="nRec">integer, insert every ...</param>
	<returns>String, our result or ""</returns>
	<remarks></remarks>
</member><member name="M:Ludo_Tools.Find(System.String,System.Collections.Generic.List{System.String})">
	<summary>
 Function to find a Name in a List Of String
 </summary>
	<param name="sStr">String, Name we are looking for</param>
	<param name="lst_sStr">List(of String), where we are looking in</param>
	<returns>Integer where is our target</returns>
	<remarks></remarks>
</member><member name="M:Ludo_Tools.Find(System.Int32,System.Collections.Generic.List{System.Int32})">
	<summary>
 Function to find a integer in a List Of Integer
 </summary>
	<param name="nInt">Integer, Value we are looking for</param>
	<param name="lst_nInts">List(of Interger), where we are looking in</param>
	<returns>Integer where is our target</returns>
	<remarks></remarks>
</member><member name="M:Ludo_Tools.Find(System.Int64,System.Collections.Generic.List{System.Int64})">
	<summary>
 Function to find a long in a List Of long
 </summary>
	<param name="lInt">Long, Value we are looking for</param>
	<param name="lst_lInts">List(of Long), where we are looking in</param>
	<returns>Integer where is our target</returns>
	<remarks></remarks>
</member><member name="M:Ludo_Tools.Find(System.String,System.Collections.Generic.List{KeyValue})">
	<summary>
 Function to find a String label in a List Of KeyValue
 </summary>
	<param name="sStr">String, Value we are looking for</param>
	<param name="lst_oKV">List(of KeyValue), where we are looking in</param>
	<returns>Integer where is our target</returns>
	<remarks></remarks>
</member><member name="M:Ludo_Tools.Find(System.Int32,System.Collections.Generic.List{KeyValue})">
	<summary>
 Function to find an Integer value in a List Of KeyValue
 </summary>
	<param name="nInt">Integer, Value we are looking for</param>
	<param name="lst_oKV">List(of KeyValue), where we are looking in</param>
	<returns>Integer where is our target</returns>
	<remarks></remarks>
</member><member name="M:Ludo_Tools.FindLst(System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.String})">
	<summary>
 Function to find a list of value in another list
 </summary>
	<param name="lst_sValue">List, List of our searched values</param>
	<param name="lst_sRef">List, List where we search :)</param>
	<returns>List (Of Long)</returns>
	<remarks>The return type is a list of long because it's could be in a DTB search a day</remarks>
</member><member name="M:Ludo_Tools.FindLst(System.String,System.Collections.Generic.List{System.String})">
	<summary>
 Function to find a list of value in another list
 </summary>
	<param name="sValue">String, Value we are looking for</param>
	<param name="lst_sRef">List, List where we search :)</param>
	<returns>List (Of Long)</returns>
	<remarks>The return type is a list of long because it's could be in a DTB search a day</remarks>
</member><member name="M:Ludo_Tools.FindLst(System.Collections.Generic.List{System.Int64},System.Collections.Generic.List{System.Int64})">
	<summary>
 Function to find a list of value in another list
 </summary>
	<param name="lst_lValue">List, List of our searched values</param>
	<param name="lst_lRef">List, List where we search :)</param>
	<returns>List (Of Long)</returns>
	<remarks>The return type is a list of long because it's could be in a DTB search a day</remarks>
</member><member name="M:Ludo_Tools.FindLst(System.Int64,System.Collections.Generic.List{System.Int64})">
	<summary>
 Function to find a list of value in another list
 </summary>
	<param name="lValue">Long, Value we are looking for</param>
	<param name="lst_lRef">List, List where we search :)</param>
	<returns>List (Of Long)</returns>
	<remarks>The return type is a list of long because it's could be in a DTB search a day</remarks>
</member><member name="M:Ludo_Tools.FindLst(System.Collections.Generic.List{System.Int32},System.Collections.Generic.List{System.Int32})">
	<summary>
 Function to find a list of value in another list
 </summary>
	<param name="lst_nValue">List, List of our searched values</param>
	<param name="lst_nRef">List, List where we search :)</param>
	<returns>List (Of Long)</returns>
	<remarks>The return type is a list of long because it's could be in a DTB search a day</remarks>
</member><member name="M:Ludo_Tools.FindLst(System.Int32,System.Collections.Generic.List{System.Int32})">
	<summary>
 Function to find a list of value in another list
 </summary>
	<param name="nValue">Integer, Value we are looking for</param>
	<param name="lst_nRef">List, List where we search :)</param>
	<returns>List (Of Long)</returns>
	<remarks>The return type is a list of long because it's could be in a DTB search a day</remarks>
</member><member name="M:Ludo_Tools.DontFindLst(System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.String})">
	<summary>
 Function to find a list of value in another list and return element that don't corresponds
 </summary>
	<param name="lst_sValue">List, List of our searched values</param>
	<param name="lst_sRef">List, List where we search :)</param>
	<returns>List (Of Long)</returns>
	<remarks>The return type is a list of long because it's could be in a DTB search a day</remarks>
</member><member name="M:Ludo_Tools.DontFindLst(System.String,System.Collections.Generic.List{System.String})">
	<summary>
 Function to find a list of value in another list and return element that don't corresponds
 </summary>
	<param name="sValue">String, Value we search</param>
	<param name="lst_sRef">List, List where we search :)</param>
	<returns>List (Of Long)</returns>
	<remarks>The return type is a list of long because it's could be in a DTB search a day</remarks>
</member><member name="M:Ludo_Tools.DontFindLst(System.Collections.Generic.List{System.Int64},System.Collections.Generic.List{System.Int64})">
	<summary>
 Function to find a list of value in another list and return element that don't corresponds
 </summary>
	<param name="lst_lValue">List, List of our searched values</param>
	<param name="lst_lRef">List, List where we search :)</param>
	<returns>List (Of Long)</returns>
	<remarks>The return type is a list of long because it's could be in a DTB search a day</remarks>
</member><member name="M:Ludo_Tools.DontFindLst(System.Int64,System.Collections.Generic.List{System.Int64})">
	<summary>
 Function to find a list of value in another list and return element that don't corresponds
 </summary>
	<param name="lValue">Long, Value we search</param>
	<param name="lst_lRef">List, List where we search :)</param>
	<returns>List (Of Long)</returns>
	<remarks>The return type is a list of long because it's could be in a DTB search a day</remarks>
</member><member name="M:Ludo_Tools.DontFindLst(System.Collections.Generic.List{System.Int32},System.Collections.Generic.List{System.Int32})">
	<summary>
 Function to find a list of value in another list and return element that don't corresponds
 </summary>
	<param name="lst_nValue">List, List of our searched values</param>
	<param name="lst_nRef">List, List where we search :)</param>
	<returns>List (Of Long)</returns>
	<remarks>The return type is a list of long because it's could be in a DTB search a day</remarks>
</member><member name="M:Ludo_Tools.DontFindLst(System.Int32,System.Collections.Generic.List{System.Int32})">
	<summary>
 Function to find a list of value in another list and return element that don't corresponds
 </summary>
	<param name="nValue">Integer, Value we search</param>
	<param name="lst_nRef">List, List where we search :)</param>
	<returns>List (Of Long)</returns>
	<remarks>The return type is a list of long because it's could be in a DTB search a day</remarks>
</member><member name="M:Ludo_Tools.addLst(System.Collections.Generic.List{System.Int32}@,System.Collections.Generic.List{System.Int32}@)">
	<summary>
 Function to add a List of integer to another one
 </summary>
	<param name="lst_nTarget">List (of Integer), list we want grow up</param>
	<param name="lst_nValue">List (of Integer), list we want add to the Target List</param>
	<returns>Booleean, if done, false if Null</returns>
	<remarks></remarks>
</member><member name="M:Ludo_Tools.addLst(System.Collections.Generic.List{System.Int64}@,System.Collections.Generic.List{System.Int64}@)">
	<summary>
 Function to add a List of Long to another one
 </summary>
	<param name="lst_lTarget">List (of Long), list we want grow up</param>
	<param name="lst_lValue">List (of Long), list we want add to the Target List</param>
	<returns>Booleean, if done, false if Null</returns>
	<remarks></remarks>
</member><member name="M:Ludo_Tools.addLst(System.Collections.Generic.List{System.Double}@,System.Collections.Generic.List{System.Double}@)">
	<summary>
 Function to add a List of double to another one
 </summary>
	<param name="lst_xTarget">List (of Double), list we want grow up</param>
	<param name="lst_xValue">List (of Double), list we want add to the Target List</param>
	<returns>Booleean, if done, false if Null</returns>
	<remarks></remarks>
</member><member name="M:Ludo_Tools.addLst(System.Collections.Generic.List{System.String}@,System.Collections.Generic.List{System.String}@)">
	<summary>
 Function to add a List of String to another one
 </summary>
	<param name="lst_sTarget">List (of String), list we want grow up</param>
	<param name="lst_sValue">List (of String), list we want add to the Target List</param>
	<returns>Booleean, if done, false if Null</returns>
	<remarks></remarks>
</member><member name="M:Ludo_Tools.addLst(System.Collections.Generic.List{System.Boolean}@,System.Collections.Generic.List{System.Boolean}@)">
	<summary>
 Function to add a List of Boolean to another one
 </summary>
	<param name="lst_bTarget">List (of Boolean), list we want grow up</param>
	<param name="lst_bValue">List (of Boolean), list we want add to the Target List</param>
	<returns>Booleean, if done, false if Null</returns>
	<remarks></remarks>
</member><member name="M:Ludo_Tools.addLst(System.Collections.Generic.List{System.Object}@,System.Collections.Generic.List{System.Object}@)">
	<summary>
 Function to add a List of Object to another one
 </summary>
	<param name="lst_oTarget">List (of Object), list we want grow up</param>
	<param name="lst_oValue">List (of Object), list we want add to the Target List</param>
	<returns>Booleean, if done, false if Null</returns>
	<remarks></remarks>
</member><member name="M:Ludo_Tools.StrToLines(System.String,System.Boolean)">
	<summary>
 Function to obtain Line From String
 </summary>
	<param name="sStr">String, Text we want the Line</param>
	<param name="bWithSpace">Boolean, To Kill Chr(10) too, if true</param>
	<returns>List(Of String), lines we wanted</returns>
	<remarks>List Can be empty if wrong In Parameters :3</remarks>
</member><member name="M:Ludo_Tools.LinesToStr(System.Collections.Generic.List{System.String})">
	<summary>
 Function to transform a list of string into a text
 </summary>
	<param name="lst_s">List(Of String), our lines</param>
	<returns>String, our Text</returns>
	<remarks></remarks>
</member><member name="M:Ludo_Tools.lst_StrToCOMBO(System.Collections.Generic.List{System.String},System.Windows.Forms.ComboBox@)">
	<summary>
 Function to set a COMBO From a List of String
 </summary>
	<param name="lst_sStrs">List (Of String), list of the String to set the combo</param>
	<param name="COMBO_List">Combo_Box, we want set</param>
	<returns>Boolean, True if done, false if null</returns>
	<remarks></remarks>
</member><member name="M:Ludo_Tools.lst_StrToCOMBO(System.Collections.Generic.List{System.String},LUDO_CTRL_COMBO@)">
	<summary>
 Function to set a COMBO From a List of String
 </summary>
	<param name="lst_sStrs">List (Of String), list of the String to set the combo</param>
	<param name="COMBO_List">LUDO_CTRL_COMBO, we want set</param>
	<returns>Boolean, True if done, false if null</returns>
	<remarks></remarks>
</member><member name="M:Ludo_Tools.lst_ObjToLst_KeyValue(System.Collections.Generic.List{System.Object}@)">
	<summary>
 Function to transform a list of object in a list of KeyValue
 </summary>
	<param name="lst_oList">List (Od Object), List to obtain the list of keyValue</param>
	<returns>Boolean, True if done</returns>
	<remarks></remarks>
</member><member name="M:Ludo_Tools.lst_ObjToLst_KeyValue(System.Windows.Forms.ListBox.SelectedObjectCollection@)">
	<summary>
 Function to transform a list of Selected Items in a list of KeyValue
 </summary>
	<param name="lst_oList">System.Windows.Forms.ListBox.SelectedObjectCollection, list of stuff we want transform into key value </param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Ludo_Tools.lst_KeyValueToStr(System.Collections.Generic.List{KeyValue})">
	<summary>
 Function to transform a list of Key value in a String Values
 </summary>
	<param name="lst_oKeyValues">List (Of KeyValue), </param>
	<returns>Boolean, True if job done</returns>
	<remarks></remarks>
</member><member name="M:Ludo_Tools.COMBO_SelectItemFromStr(System.Windows.Forms.ComboBox@,System.String)">
	<summary>
 Function to select an item in a combo from a string name option
 </summary>
	<param name="COMBO_Target">ComboBox, Combo we want Select an element from</param>
	<param name="sStr">String, Str we want select in the Combo</param>
	<returns>Boolean, True if done</returns>
	<remarks></remarks>
</member><member name="M:Ludo_Tools.COMBO_SelectItemFromStr(LUDO_CTRL_COMBO@,System.String)">
	<summary>
 Function to select an item in a combo from a string name option
 </summary>
	<param name="COMBO_Target">LUDO_CTRL_COMBO, Combo we want Select an element from</param>
	<param name="sStr">String, Str we want select in the Combo</param>
	<returns>Boolean, True if done</returns>
	<remarks></remarks>
</member><member name="M:Ludo_Tools.COMBO_SelectItemFromInt(System.Windows.Forms.ComboBox@,System.Int32)">
	<summary>
 Function to select an item in a combo from an integer value option
 </summary>
	<param name="COMBO_Target">ComboBox, Combo where we want select a line</param>
	<param name="nValue">Integer, value of the keyvalue line we want select</param>
	<returns>Boolean, True if done</returns>
	<remarks></remarks>
</member><member name="M:Ludo_Tools.COMBO_SelectItemFromInt(LUDO_CTRL_COMBO@,System.Int32)">
	<summary>
 Function to select an item in a combo from an integer value option
 </summary>
	<param name="COMBO_Target">LUDO_CTRL_COMBO, Combo where we want select a line</param>
	<param name="nValue">Integer, value of the keyvalue line we want select</param>
	<returns>Boolean, True if done</returns>
	<remarks></remarks>
</member><member name="M:Ludo_Tools.LIST_SelectItemFromInt(System.Windows.Forms.ListBox@,System.Int32)">
	<summary>
 Function to select an item in a listBox from an integer value option
 </summary>
	<param name="LIST_Target">ListBox, List box we want set a select</param>
	<param name="nValue">Integer, Value in the Key Value we want</param>
	<returns>Boolean, True if done</returns>
	<remarks></remarks>
</member><member name="M:Ludo_Tools.LIST_SelectItemFromInt(LUDO_CTRL_LIST@,System.Int32)">
	<summary>
 Function to select an item in a listBox from an integer value option
 </summary>
	<param name="LIST_Target">ListBox, List box we want set a select</param>
	<param name="nValue">Integer, Value in the Key Value we want</param>
	<returns>Boolean, True if done</returns>
	<remarks></remarks>
</member><member name="M:Ludo_Tools.obtainFileName(System.String@,System.String,System.String)">
	<summary>
 Function to Obtain and note a Filename in a sFilename
 </summary>
	<param name="sFilename">String, File name we want obtain</param>
	<param name="sTitle">String, Title of the Dialog Box!</param>
	<param name="sExtention">String, Extension of our wanted file (like ".ini"), extension will be add if not present</param>
	<returns>Boolean, True if a name has been choosen, if True, sFilename change of value to save the choosen name of file</returns>
	<remarks></remarks>
</member><member name="M:Ludo_Tools.obtainFileName(System.Windows.Forms.TextBox@,System.String,System.String)">
	<summary>
 Function to Obtain and note a Filename in a SAI Field
 </summary>
	<param name="SAI_Filename">Textbox, Our SAI_Field</param>
	<param name="sTitle">String, Title of the Dialog Box!</param>
	<param name="sExtention">String, Extension of our wanted file (like ".ini"), extension will be add if not present</param>
	<returns>Boolean, True if a name has been choosen, if True, SAI_Filename to take the name of the Filename as Value</returns>
	<remarks>This Function call the other definition of obtainFileName</remarks>
</member><member name="M:Ludo_Tools.obtainFileName(System.Collections.Generic.List{System.String}@,System.String,System.String)">
	<summary>
 Function to Obtain list of file name
 </summary>
	<param name="lst_sFilename">List(Of String), list of Filename we want obtain</param>
	<param name="sTitle">String, Title of the Dialog Box!</param>
	<param name="sExtention">String, Extension of our wanted file (like ".ini"), extension will be add if not present</param>
	<returns>Boolean, True if a name has been choosen, if True, sFilename change of value to save the choosen name of file</returns>
	<remarks></remarks>
</member><member name="M:Ludo_Tools.obtainFolderPath(System.String@,System.String)">
	<summary>
 Function to obtain a folder path in a String
 </summary>
	<param name="sFilename">String, Path Name</param>
	<param name="sTitle">String, Title of the Dialog Box!</param>
	<returns>Boolean, True if a name has been choosen, if True, sFilename change of value to save the choosen name of path</returns>
	<remarks></remarks>
</member><member name="M:Ludo_Tools.obtainFolderPath(System.Windows.Forms.TextBox@,System.String)">
	<summary>
 Function to obtain a folder path in a SAI Field
 </summary>
	<param name="SAI_Filename">Texbox, Our SAI Field</param>
	<param name="sTitle">String, Title of the Dialog Box!</param>
	<returns>Boolean, True if a name has been choosen, if True, SAI_Filename to take the name of the Pathname as Value</returns>
	<remarks>This function call the other definition of obatinFolderPath</remarks>
</member><member name="M:Ludo_Tools.exportXLSFromDGV(System.Windows.Forms.DataGridView@,System.Windows.Forms.TextBox@,System.Boolean,System.Windows.Forms.ProgressBar@)">
	<summary>
 Function to export a datagridview to a XLS, With a Filename from a SAI_
 </summary>
	<param name="DGV_Tab">DGV, Our datagried view we want to export</param>
	<param name="SAI_FileName">SAI_, Text field with the filename</param>
	<param name="bCallExcel">Boolean, should we call excel to open the file after export ?</param>
	<param name="PG_Bar">PG, Progress bar to see the result !</param>
	<returns>Boolean, True if export done</returns>
	<remarks>FUNCTION DEPRECATED !!!</remarks>
</member><member name="M:Ludo_Tools.DGV_exportXLS(System.Windows.Forms.DataGridView@,System.String,System.Boolean,System.Windows.Forms.ProgressBar@)">
	<summary>
 Function to export a datagridview to a XLS, With a Filename from a String
 </summary>
	<param name="DGV_">DGV, Our datagried view we want to export</param>
	<param name="sFileName">String, Our file name</param>
	<param name="bCallExcel">Boolean, should we call excel to open the file after export ?</param>
	<param name="PG_">PG, Progress bar to see the result !</param>
	<returns>Boolean, True if export done</returns>
	<remarks></remarks>
</member><member name="M:Ludo_Tools.DGV_exportXLS(System.Windows.Forms.DataGridView@,System.Windows.Forms.TextBox@,System.Boolean,System.Windows.Forms.ProgressBar@)">
	<summary>
 Function to export a datagridview to a XLS, With a Filename from a SAI_
 </summary>
	<param name="DGV_Tab">DGV, Our datagried view we want to export</param>
	<param name="SAI_FileName">SAI_, Text field with the filename </param>
	<param name="bCallExcel">Boolean, should we call excel to open the file after export ?</param>
	<param name="PG_Bar">PG, Progress bar to see the result !</param>
	<returns>Boolean, True if export done</returns>
	<remarks></remarks>
</member><member name="M:Ludo_Tools.DGV_exportCSV(System.Windows.Forms.DataGridView@,System.String@,System.Boolean,System.Windows.Forms.ProgressBar@)">
	<summary>
 Function to export a datagridview to a CSV, With a Filename
 </summary>
	<param name="DGV_">datagridview, Our datagridview</param>
	<param name="sFileName">String, the filename to export the datagridview As a Csv</param>
	<param name="bCallExcel">[Optional] Boolean, to know if we open Excel after the creation of the CSV, False by default</param>
	<param name="PG_UI">[Optional] ProgressBar, to show the progression</param>
	<returns>Boolean, Return True if job Done</returns>
	<remarks></remarks>
</member><member name="M:Ludo_Tools.DGV_exportCSV(System.Windows.Forms.DataGridView@,System.Windows.Forms.TextBox@,System.Boolean,System.Windows.Forms.ProgressBar@)">
	<summary>
 Function to export a datagridview to a CSV, With a Filename from a SAI_
 </summary>
	<param name="DGV_">datagridview, Our datagridview</param>
	<param name="SAI_FileName">Textbox, our SAI_ Field with the name of the CSv Filename</param>
	<param name="bCallExcel">[Optional] Boolean, to know if we open Excel after the creation of the CSV, False by default</param>
	<param name="PG_UI">[Optional] ProgressBar, to show the progression</param>
	<returns>Boolean, Return True if job Done</returns>
	<remarks>This function call the other DGV_ExportCSV</remarks>
</member><member name="M:Ludo_Tools.DGV_importLudo_Data(System.Windows.Forms.DataGridView@,Ludo_Data@)">
	<summary>
 Function to import the DatagridView data from Ludo_Data
 </summary>
	<param name="DGV_">System.Windows.Forms.DataGridView, our datagridview</param>
	<param name="oData">Ludo_Data, our data to import</param>
	<returns>boolean, true if done</returns>
	<remarks></remarks>
</member><member name="M:Ludo_Tools.DGV_importCSV(System.Windows.Forms.DataGridView,System.String@,System.Windows.Forms.ProgressBar@)">
	<summary>
 Function to fill a datagridview from a CSV filename
 </summary>
	<param name="DGV_">datagridview, Our datagridview</param>
	<param name="sFileName">String, the CSV filename to fill the datagridview</param>
	<param name="PG_UI">[Optional] ProgressBar, to show the progression</param>
	<returns>Boolean, Return True if job Done</returns>
	<remarks></remarks>
</member><member name="M:Ludo_Tools.DGV_importCSV(System.Windows.Forms.DataGridView,System.Windows.Forms.TextBox@,System.Windows.Forms.ProgressBar@)">
	<summary>
 function to fill a datagridview from a SAI_ to a CSV filename
 </summary>
	<param name="DGV_">datagridview, Our datagridview</param>
	<param name="SAI_FileName">Texbox, SAI Field, contains the CSV filename to fill the datagridview</param>
	<param name="PG_UI">[Optional] ProgressBar, to show the progression</param>
	<returns>Boolean, Return True if job Done</returns>
	<remarks>This Function call the other DGV_ImportCSV Function</remarks>
</member><member name="M:Ludo_Tools.DGV_SwitchRows(System.Windows.Forms.DataGridView@,System.Int32,System.Int32)">
	<summary>
 Function to switch to lines
 </summary>
	<param name="DGV_Table">Datagridview, our datagrid we use to switch Rows</param>
	<param name="nIndexA">Integer, Index of line A</param>
	<param name="nIndexB">Integer, Index of line B</param>
	<returns>Boolean, return True if done</returns>
	<remarks></remarks>
</member><member name="M:Ludo_Tools.DGV_GetSelectedIndex(System.Windows.Forms.DataGridView@)">
	<summary>
 Function to obtain a list of the selected Rows As index of a DatagriedView
 </summary>
	<param name="DGV_Table">Datagridview, our datagrid we use to obtain the selected rows As list of Index</param>
	<returns>List(Of Integer), indexes of the selected Rows</returns>
	<remarks></remarks>
</member><member name="M:Ludo_Tools.DGV_SetSelectedIndex(System.Windows.Forms.DataGridView@,System.Collections.Generic.List{System.Int32},System.Boolean)">
	<summary>
 Function to selected or unselect a List of index in a datagridview
 </summary>
	<param name="DGV_Table">Datagridview, our datagrid we use to selected or unselect rows</param>
	<param name="lst_nIndex">List(Of Integer), list of index</param>
	<param name="bSelect">Boolean, Select or not</param>
	<returns>Boolean, True if job done</returns>
	<remarks></remarks>
</member><member name="M:Ludo_Tools.DGV_MoveRowsFromIntList(System.Windows.Forms.DataGridView@,System.Collections.Generic.List{System.Int32},System.Int32)">
	<summary>
 Function to move a List of Row By Index, with a len
 </summary>
	<param name="DGV_Table">Datagridview, our datagrid we use to move rows</param>
	<param name="lst_nIndex">List(Of Integer), list of index</param>
	<param name="nMove">Integer, Step we add to each rows at index</param>
	<returns>Boolean, True If Done</returns>
	<remarks>Call DGV_SwitchRows</remarks>
</member><member name="M:Ludo_Tools.DGV_UpRowsFromIntList(System.Windows.Forms.DataGridView@,System.Collections.Generic.List{System.Int32})">
	<summary>
 Function to up a List of Row By Index
 </summary>
	<param name="DGV_Table">Datagridview, our datagrid we use to move rows up</param>
	<param name="lst_nIndex">List(Of Integer), list of index</param>
	<returns>Boolean, True If Done</returns>
	<remarks>Call DGV_MoveRowsFromIntList</remarks>
</member><member name="M:Ludo_Tools.DGV_DownRowsFromIntList(System.Windows.Forms.DataGridView@,System.Collections.Generic.List{System.Int32})">
	<summary>
 Function to down a List of Row By Index
 </summary>
	<param name="DGV_Table">Datagridview, our datagrid we use to move rows down</param>
	<param name="lst_nIndex">List(Of Integer), list of index</param>
	<returns>Boolean, True If Done</returns>
	<remarks>Call DGV_MoveRowsFromIntList</remarks>
</member><member name="M:Ludo_Tools.DGV_UpSelectedRows(System.Windows.Forms.DataGridView@)">
	<summary>
 Function to move up the selectedRows of a datagriedview
 </summary>
	<param name="DGV_Table">Datagridview, our datagrid we use to move the selected rows up</param>
	<returns>Boolean, True if Done</returns>
	<remarks>Calls functions : DGV_GetSelectedIndex, DGV_UpRowsFromIntList and DGV_SetSelectedIndex</remarks>
</member><member name="M:Ludo_Tools.DGV_DownSelectedRows(System.Windows.Forms.DataGridView@)">
	<summary>
 Function to move down the selectedRows of a datagriedview
 </summary>
	<param name="DGV_Table">Datagridview, our datagrid we use to move the selected rows down</param>
	<returns>Boolean, True if Done</returns>
	<remarks>Calls functions : DGV_GetSelectedIndex, DGV_UpRowsFromIntList and DGV_SetSelectedIndex</remarks>
</member><member name="M:Ludo_Tools.DGV_TopSelectedRows(System.Windows.Forms.DataGridView@)">
	<summary>
 Function to move to the Top the Selection
 </summary>
	<param name="DGV_Table">Datagridview, our datagrid we use to move the selected rows up</param>
	<returns>Boolean, True if Done</returns>
	<remarks>Calls, DGV_UpSelectedRows and DGV_GetSelectedIndex</remarks>
</member><member name="M:Ludo_Tools.DGV_BottomSelectedRows(System.Windows.Forms.DataGridView@)">
	<summary>
 Function to move to the Bottom the Selection
 </summary>
	<param name="DGV_Table">Datagridview, our datagrid we use to move the selected rows Bottom</param>
	<returns>Boolean, True if Done</returns>
	<remarks>Calls, DGV_DownSelectedRows and DGV_GetSelectedIndex</remarks>
</member><member name="M:Ludo_Tools.DGV_NumberOfVisibleColumn(System.Windows.Forms.DataGridView@)">
	<summary>
 Function to obtain the number of visible columns
 </summary>
	<param name="DGV_Table">Datagridview, our datagrid </param>
	<returns>Boolean, True if Done</returns>
	<remarks></remarks>
</member><member name="M:Ludo_Tools.DGV_CreateColumns(System.Windows.Forms.DataGridView@,System.Collections.Generic.List{System.String})">
	<summary>
 function to create columns from list
 </summary>
	<param name="DGV_">Datagridview, our datagrid </param>
	<param name="lst_sCol">List(Of String), List of Column names</param>
	<returns>Return True if done</returns>
	<remarks></remarks>
</member><member name="M:Ludo_Tools.DGV_ChangeColumnValueAIntoB(System.Windows.Forms.DataGridView@,System.Int32,System.String,System.String)">
	<summary>
 Function to change a value into a column, return the number of value changed !
 </summary>
	<param name="DGV_">Datagridview, our datagrid </param>
	<param name="nCol">Integer, to define the number of the column we want change the values</param>
	<param name="sValueA">String, Value we seek</param>
	<param name="sValueB">String, Values to fix if sValueA found</param>
	<returns>Integer, Return the number of visited lines</returns>
	<remarks></remarks>
</member><member name="M:Ludo_Tools.DGV_ChangeColumnValueAIntoB(System.Windows.Forms.DataGridView@,System.Int32,System.Boolean,System.Boolean)">
	<summary>
 Function to change a value into a column, return the number of value changed !
 </summary>
	<param name="DGV_">Datagridview, our datagrid</param>
	<param name="nCol">Intger, Number of the column</param>
	<param name="bValueA">Boolean, Value we seek</param>
	<param name="bValueB">Boolean, Values to fix if bValueA found</param>
	<returns>Integer, Return the number of visited lines</returns>
	<remarks></remarks>
</member><member name="M:Ludo_Tools.DGV_GetCellValueString(System.Windows.Forms.DataGridView@,System.Int32,System.Int32,System.String)">
	<summary>
 Method to get the value of a cell in a DGV
 </summary>
	<param name="DGV_">DataGridView, The Datagriedview with the cell we are intersted in</param>
	<param name="nColumn">Integer, Number of the column of the cell</param>
	<param name="nLine">Integer, Number of the line of the cell</param>
	<param name="sValue">[Optional] String, The returned value in case of Cell with NULL Value or error in parameters</param>
	<returns>Return the toString cast of our cell, or sValue in case of error</returns>
	<remarks>
 The method tests if parameters are Null.
 The error case returns sValue so dont Nullify it GODDESS SAKE PLEASE !!!
 </remarks>
</member><member name="M:Ludo_Tools.DGV_ColorLine(System.Windows.Forms.DataGridView@,System.Int32,System.Drawing.Color)">
	<summary>
 Method to color a line in a datagridview
 </summary>
	<param name="DGV_">DataGridView, our Datagrid</param>
	<param name="nLine">Integer, Line we want underline</param>
	<param name="nColor">System.Drawing.Color, Color of the line</param>
	<returns>Boolean, True if done</returns>
	<remarks></remarks>
</member><member name="M:Ludo_Tools.DGV_FindLineString(System.Windows.Forms.DataGridView@,System.Int32,System.String)">
	<summary>
 Method to find a line by a value in a column
 </summary>
	<param name="DGV_">Datagridview, the one we analyse</param>
	<param name="nColumn">Integer, Column of the search</param>
	<param name="sValue">String, seeking value</param>
	<returns>Integer, greater or equals 0 if good, lesser than zero if error</returns>
	<remarks>
 Error List :)
 -1 : DGV_ is Null
 -2 : nColumn is Null
 -3 : sValue is Null
 -4 : nColumn is out number
 -5 : sValue not found
 </remarks>
</member><member name="M:Ludo_Tools.TREE_getNodeByName(System.Windows.Forms.TreeView,System.String)">
	<summary>
 Function to obtain a TreeNode in a TreeView from a name
 </summary>
	<param name="TREE_">TreeView, Tree where we search the node from the name</param>
	<param name="sName">String, Name of the Node we are lokking for !</param>
	<returns>TreeNode, Return the first node with this name if founded, Null else</returns>
	<remarks>This Function call the function TREE_getNodeByName with Node parameters</remarks>
</member><member name="M:Ludo_Tools.TREE_getNodeByName(System.Windows.Forms.TreeNode,System.String)">
	<summary>
 Function to obtain a TreeNode in a Tree from a name
 </summary>
	<param name="oNode">TreeNode, Tree where we search the node from the name</param>
	<param name="sName">String, Name of the Node we are lokking for !</param>
	<returns>TreeNode, Return the first node with this name if founded, Null else</returns>
	<remarks>This functions calls itself to found the nod : so becarefull with the stack limit !</remarks>
</member><member name="M:Ludo_Tools.TREE_plotsXML(System.Windows.Forms.TreeView@,System.Xml.XmlElement@,System.Int32)">
	<summary>
 Function to plot an xmlElement and his sub xmlElement in a TreeView object
 </summary>
	<param name="TREE_">System.Windows.Forms.TreeView, our tree view object</param>
	<param name="xmlElement">Xml.XmlElement, our element</param>
	<param name="nLimit">Integer, Tree limit</param>
	<returns>Boolean, True if done</returns>
	<remarks>This function calls XML_PlotsIn_TREE</remarks>
</member><member name="M:Ludo_Tools.TREE_plotsXML(System.Windows.Forms.TreeView@,System.Xml.XmlDocument@,System.Int32)">
	<summary>
 Function to plot an xmlDocument and his xmlElements in a TreeView object
 </summary>
	<param name="TREE_">System.Windows.Forms.TreeView, our tree view object</param>
	<param name="xmlDocument">Xml.XmlDocument, our xml document</param>
	<param name="nLimit">Integer, Tree limit</param>
	<returns>Boolean, True if done</returns>
	<remarks>This function calls XML_PlotsIn_TREE</remarks>
</member><member name="M:Ludo_Tools.TREE_plots_LUDO_DTB_Schema(System.Windows.Forms.TreeView@,Ludo.DTB.Ludo_DTB_Schema@)">
	<summary>
 Function to plot a DTB schema in a Tree Node object
 </summary>
	<param name="TREE_">System.Windows.Forms.TreeView, our view</param>
	<param name="oSchema">Ludo.DTB.Ludo_DTB_Schema, our DTB schema</param>
	<returns>True if done</returns>
	<remarks></remarks>
</member><member name="M:Ludo_Tools.FILES_KeepOnlyTheFile(System.Collections.Generic.List{System.String})">
	<summary>
 Public function to keep only the file from a list of file
 </summary>
	<param name="lst_s">List(Of String), list of string, maybe it' contains file or not</param>
	<returns>List(Of String), our list or file, never NULL</returns>
	<remarks></remarks>
</member><member name="M:Ludo_Tools.FILES_KeepOnlyTheFolder(System.Collections.Generic.List{System.String})">
	<summary>
 Public function to keep only the folder from a list of file
 </summary>
	<param name="lst_s">List(Of String), list of string, maybe it' contains file or not</param>
	<returns>List(Of String), our list or folder, never NULL</returns>
	<remarks></remarks>
</member><member name="M:Ludo_Tools.FILES_GetFilesFromDirectory(System.String)">
	<summary>
 Public function to get files from directory
 </summary>
	<param name="sDirectory">String, Directory name</param>
	<returns>List(Of String), list of file, never NULL</returns>
	<remarks></remarks>
</member><member name="M:Ludo_Tools.FILES_GetFilesFromDirectoryAndSub(System.String)">
	<summary>
 Public function to getFile from folder and sub folders
 </summary>
	<param name="sDirectory">String, Directory name</param>
	<returns>List(Of String), list of file, never NULL</returns>
	<remarks></remarks>
</member><member name="M:Ludo_Tools.DIRECTORY_GetDirectories(System.String)">
	<summary>
 Public function to get sub-Directories from directory
 </summary>
	<param name="sDirectory">String, Directory name</param>
	<returns>List(Of String), list of file, never NULL</returns>
	<remarks></remarks>
</member><member name="M:Ludo_Tools.DragDropEventToStringArray(System.Windows.Forms.DragEventArgs)">
	<summary>
 Function to convert a drag and drop event into an array of string with file
 </summary>
	<param name="e">DragEventArgs, event we interprete</param>
	<returns>Array of String</returns>
	<remarks>Deprecated, no exists test</remarks>
</member><member name="M:Ludo_Tools.DragDropEventToStringList(System.Windows.Forms.DragEventArgs)">
	<summary>
 Function to convert a drag and drop event into an List of string
 </summary>
	<param name="e">DragEventArgs, event we interprete</param>
	<returns>List(Of String)</returns>
	<remarks>Deprecated, This Function call DragDropEventToStringArray and arrayToList</remarks>
</member><member name="M:Ludo_Tools.DragDropEventFirstFileToString(System.Windows.Forms.DragEventArgs,System.String@)">
	<summary>
 Function to set the first Drag and drop file in a String
 </summary>
	<param name="e">DragEventArgs, event we interprete</param>
	<param name="sResultString">Dtring, to obtain the first file in a drag drop event over a SAI Field</param>
	<returns>Boolean, True if job done</returns>
	<remarks>Deprecated</remarks>
</member><member name="M:Ludo_Tools.DRAG_GetText(System.Windows.Forms.DragEventArgs)">
	<summary>
 Public function to get the text from a drag and drop
 </summary>
	<param name="e">DragEventargs, the argument of the event !!!</param>
	<returns>String, Empty if no Text in the drag arg</returns>
	<remarks></remarks>
</member><member name="M:Ludo_Tools.DRAG_GetListOfFilenameAndFolders(System.Windows.Forms.DragEventArgs)">
	<summary>
 Public function to get the list of files and Folders from a drag and drop
 </summary>
	<param name="e">DragEventargs, the argument of the event !!!</param>
	<returns>List (Of String), Not empty if there are files</returns>
	<remarks></remarks>
</member><member name="M:Ludo_Tools.arrayToList(System.Boolean[])">
	<summary>
 Function to convert Array Of Boolean into list Of Boolean
 </summary>
	<param name="ary_">Array Of Boolean, Array we want transform in List</param>
	<returns>List Of Boolean</returns>
	<remarks></remarks>
</member><member name="M:Ludo_Tools.arrayToList(System.Char[])">
	<summary>
 Function to convert Array Of Char into list Of Char
 </summary>
	<param name="ary_">Array Of Char, Array we want transform in List</param>
	<returns>List Of Char</returns>
	<remarks></remarks>
</member><member name="M:Ludo_Tools.arrayToList(System.String[])">
	<summary>
 Function to convert Array Of String into list Of String
 </summary>
	<param name="ary_">Array Of String, Array we want transform in List</param>
	<returns>List Of String</returns>
	<remarks></remarks>
</member><member name="M:Ludo_Tools.arrayToList(System.Int16[])">
	<summary>
 Function to convert Array Of Short into list Of Short
 </summary>
	<param name="ary_">Array Of Short, Array we want transform in List</param>
	<returns>List Of Short</returns>
	<remarks></remarks>
</member><member name="M:Ludo_Tools.arrayToList(System.Int32[])">
	<summary>
 Function to convert Array Of Integer into list Of Integer
 </summary>
	<param name="ary_">Array Of Integer, Array we want transform in List</param>
	<returns>List Of Integer</returns>
	<remarks></remarks>
</member><member name="M:Ludo_Tools.arrayToList(System.Int64[])">
	<summary>
 Function to convert Array Of Long into list Of Long
 </summary>
	<param name="ary_">Array Of Long, Array we want transform in List</param>
	<returns>List Of Long</returns>
	<remarks></remarks>
</member><member name="M:Ludo_Tools.arrayToList(System.Double[])">
	<summary>
 Function to convert Array Of Double into list Of Double
 </summary>
	<param name="ary_">Array Of Double, Array we want transform in List</param>
	<returns>List Of Double</returns>
	<remarks></remarks>
</member><member name="M:Ludo_Tools.ZIP_FileExists(System.String,System.String)">
	<summary>
 Function to know if a file exists in a Package
 </summary>
	<param name="sZipFilename">String, name of the package</param>
	<param name="sFileName">String, Name of the file in the package</param>
	<returns>Boolean, True if Package and File inside exists</returns>
	<remarks></remarks>
</member><member name="M:Ludo_Tools.ZIP_PathExists(System.String,System.String)">
	<summary>
 Function to know if a path exists in a Package
 </summary>
	<param name="sZipFilename">String, name of the package</param>
	<param name="sPath">String, name of the path we search</param>
	<returns>Boolean, True if Package and Path inside exists</returns>
	<remarks></remarks>
</member><member name="M:Ludo_Tools.ZIP_Save(System.String,System.String,System.String)">
	<summary>
 Function to save a file in a Package
 </summary>
	<param name="sZipFilename">String, name of the package</param>
	<param name="sFileName">String, Name of the file on the client machine</param>
	<param name="sPackFileName">String, Name of the file in the package</param>
	<returns>Boolean, True if it works</returns>
	<remarks></remarks>
</member><member name="M:Ludo_Tools.ZIP_Load(System.String,System.String,System.String)">
	<summary>
 Function to load a file from a Package
 </summary>
	<param name="sZipFilename">String, name of the package</param>
	<param name="sFileName">String, Name of the file on the client machine</param>
	<param name="sPackFileName">String, Name of the file in the package</param>
	<returns>Boolean, True if it works</returns>
	<remarks></remarks>
</member><member name="M:Ludo_Tools.ZIP_FileList(System.String,System.String)">
	<summary>
 Function to have the list of file in a Package
 </summary>
	<param name="sZipFilename">String, name of the package</param>
	<param name="sURI">String, URI in the Package</param>
	<returns>List Of String, The list of the File Name</returns>
	<remarks></remarks>
</member><member name="M:Ludo_Tools.XML_GetElementsByTagName(System.Xml.XmlElement@,System.String)">
	<summary>
 Function to GetElementsByTagName if they are sun of the node that invoke the method !
 </summary>
	<param name="oElement">Xml.XmlElement, our node</param>
	<param name="sTag">string, our searched tag</param>
	<returns>List(Of Xml.XmlNode), our list of node</returns>
	<remarks></remarks>
</member><member name="M:Ludo_Tools.XML_GetElementsByTagName(System.Xml.XmlDocument@,System.String)">
	<summary>
 Function to GetElementsByTagName if they are son of the node that invoke the method !
 </summary>
	<param name="oDocument">Xml.XmlDocument, our document with tag</param>
	<param name="sTag">string, our searched tag</param>
	<returns>List(Of Xml.XmlNode), our list of node</returns>
	<remarks></remarks>
</member><member name="M:Ludo_Tools.XML_GetElementInline(System.Xml.XmlDocument@,System.Collections.Generic.List{System.String})">
	<summary>
 Function to get an element from inline list of string
 </summary>
	<param name="oXml">System.Xml.XmlDocument, our document</param>
	<param name="lst_sInLineXML">List(Of String), path of the seeked element</param>
	<returns>Xml.XmlElement, our element or nothing</returns>
	<remarks></remarks>
</member><member name="M:Ludo_Tools.XML_GetElementInline(System.Xml.XmlDocument@,System.String)">
	<summary>
 Function to get an element from inline string
 </summary>
	<param name="oXml">System.Xml.XmlDocument, our document</param>
	<param name="sInLineXML">string, our path</param>
	<returns>Xml.XmlElement, our element or nothing</returns>
	<remarks>Sample of path : Root.node.SubNode[4]</remarks>
</member><member name="M:Ludo_Tools.XML_GetAttributs(System.Xml.XmlElement@)">
	<summary>
 Function to get the list of attribut from an element
 </summary>
	<param name="xmlElement">Xml.XmlElement, our list of elements</param>
	<returns>List(Of Xml.XmlAttribute), our list of attributs</returns>
	<remarks></remarks>
</member><member name="M:Ludo_Tools.XML_GetAttributs(System.Xml.XmlDocument@,System.String)">
	<summary>
 Function to get the list of attribut from an inline element in a xmlDocument, calls XML_GetElementInline and XML_GetAttributs
 </summary>
	<param name="oXml">System.Xml.XmlDocument, our document</param>
	<param name="sInLineXML">string, our path</param>
	<returns>List(Of Xml.XmlAttribute), our attributs</returns>
	<remarks></remarks>
</member><member name="M:Ludo_Tools.XML_GetAttributNames(System.Collections.Generic.List{System.Xml.XmlAttribute}@)">
	<summary>
 Function to obtain a list of the attribut's name as a list of string
 </summary>
	<param name="lst_oAttributs">List(Of Xml.XmlAttribute), our list of attributs</param>
	<returns>list(of string), our list of attributs names</returns>
	<remarks></remarks>
</member><member name="M:Ludo_Tools.XML_GetAttributNames(System.Xml.XmlElement@)">
	<summary>
 Function to get all the attributs names of an element
 </summary>
	<param name="xmlElement">Xml.XmlElement, our element</param>
	<returns>List(Of String), our list of attributs names</returns>
	<remarks></remarks>
</member><member name="M:Ludo_Tools.XML_GetAttributNames(System.Xml.XmlDocument@,System.String)">
	<summary>
 Function to get all the attributs names from a document and a path to an element
 </summary>
	<param name="oXml">System.Xml.XmlDocument, our document</param>
	<param name="sInLineXML">string, our path</param>
	<returns>List(Of String), our list of attributs names</returns>
	<remarks></remarks>
</member><member name="M:Ludo_Tools.XML_InLineLst(System.String)">
	<summary>
 Function to get the list of element in a inline commande
 </summary>
	<param name="sInLineXML">srgine, inline element</param>
	<returns>list(of String), our list of node</returns>
	<remarks>split on "."</remarks>
</member><member name="M:Ludo_Tools.XML_Read(System.Xml.XmlDocument@,System.Collections.Generic.List{System.String},System.String)">
	<summary>
 Function to Read Value From a XML Doc with a XML Inline Path
 </summary>
	<param name="oXml">System.Xml.XmlDocument, our document</param>
	<param name="lst_sInLineXML">List(Of String), path of the seeked element</param>
	<param name="sDefaultValue">string, our default value</param>
	<returns>string, our value</returns>
	<remarks></remarks>
</member><member name="M:Ludo_Tools.XML_Read(System.Xml.XmlDocument@,System.String,System.String)">
	<summary>
 Function to Read Value From a XML Doc with a XML Inline Path
 </summary>
	<param name="oXml">System.Xml.XmlDocument, our document</param>
	<param name="sInLineXML">string, our path</param>
	<param name="sDefaultValue">string, our default value</param>
	<returns>string, our value</returns>
	<remarks></remarks>
</member><member name="M:Ludo_Tools.XML_Read_Attribut(System.Xml.XmlDocument@,System.Collections.Generic.List{System.String},System.String,System.String)">
	<summary>
 Function to Read Attribut Value From a XML Doc with a XML Inline Path
 </summary>
	<param name="oXml">System.Xml.XmlDocument, our document</param>
	<param name="lst_sInLineXML">List(Of String), path of the seeked element</param>
	<param name="sAttribut">string, our attribut name</param>
	<param name="sDefaultValue">string, our default value</param>
	<returns>string, our attribut value</returns>
	<remarks></remarks>
</member><member name="M:Ludo_Tools.XML_Read_Attribut(System.Xml.XmlDocument@,System.String,System.String,System.String)">
	<summary>
 Function to Read Attribut Value From a XML Doc with a XML Inline Path
 </summary>
	<param name="oXml">System.Xml.XmlDocument, our document</param>
	<param name="sInLineXML">string, our path</param>
	<param name="sAttribut">string, our attribut name</param>
	<param name="sDefaultValue">string, our default value</param>
	<returns>string, our attribut value</returns>
	<remarks></remarks>
</member><member name="M:Ludo_Tools.XML_StructInText(System.Xml.XmlElement@,System.Int32,System.Int32,System.String)">
	<summary>
 Function to obtain the struct of the XML Element as a text with a line for each element
 </summary>
	<param name="xmlElement">Xml.XmlElement, our xml element</param>
	<param name="nLimit">[OPTIONAL] Integer, our rank limit</param>
	<param name="nRank">[OPTIONAL] Integer, our current rank</param>
	<param name="sChain">[OPTIONAL] String, our past chain</param>
	<returns>String, our result</returns>
	<remarks></remarks>
</member><member name="M:Ludo_Tools.XML_StructInText(System.Xml.XmlDocument@,System.Int32)">
	<summary>
 Function to obtain the struct of the XML Document as a text with a line for each element
 </summary>
	<param name="xmlDocument">Xml.XmlDocument, our xml document</param>
	<param name="nLimit">[OPTIONAL] Integer, our limit</param>
	<returns>String, our Structure in text</returns>
	<remarks></remarks>
</member><member name="M:Ludo_Tools.XML_StructInLines(System.Xml.XmlElement@,System.Int32)">
	<summary>
 Function to obtain the struct of the XML Element as a list of string with a string for each element for each element
 </summary>
	<param name="xmlElement">Xml.XmlElement, Element</param>
	<param name="nLimit">[OPTIONAL] Integer, our limit</param>
	<returns>List(Of String), our list of elements</returns>
	<remarks></remarks>
</member><member name="M:Ludo_Tools.XML_StructInLines(System.Xml.XmlDocument@,System.Int32)">
	<summary>
 Function to obtain the struct of the XML Document as a list of string with a string for each element for each element
 </summary>
	<param name="xmlDocument">Xml.XmlDocument, our document</param>
	<param name="nLimit">[OPTIONAL] Integer, our limit</param>
	<returns>List(Of String), our list of elements</returns>
	<remarks></remarks>
</member><member name="M:Ludo_Tools.XML_CreatePath(System.Xml.XmlDocument@,System.Collections.Generic.List{System.String})">
	<summary>
 Function to create the path in the XML Document
 </summary>
	<param name="oXml">System.Xml.XmlDocument, our document</param>
	<param name="lst_sInLineXML">List(Of String), path of the seeked element</param>
	<returns>Xml.XmlElement, the new element or Nothing</returns>
	<remarks></remarks>
</member><member name="M:Ludo_Tools.XML_CreatePath(System.Xml.XmlDocument@,System.String)">
	<summary>
 Function to create the path in the XML Document
 </summary>
	<param name="oXml">System.Xml.XmlDocument, our document</param>
	<param name="sInLineXML">string, our path</param>
	<returns>Xml.XmlElement, the new element or Nothing</returns>
	<remarks></remarks>
</member><member name="M:Ludo_Tools.XML_Write_Value(System.Xml.XmlDocument@,System.Collections.Generic.List{System.String},System.String)">
	<summary>
 Function to Write Value From a XML Doc to Path
 </summary>
	<param name="oXml">System.Xml.XmlDocument, our document</param>
	<param name="lst_sInLineXML">List(Of String), path of the seeked element</param>
	<param name="sValue">string our new value</param>
	<returns>Boolean, true if done</returns>
	<remarks></remarks>
</member><member name="M:Ludo_Tools.XML_Write_Value(System.Xml.XmlDocument@,System.String,System.String)">
	<summary>
 Function to Write Value From a XML Doc to Path
 </summary>
	<param name="oXml">System.Xml.XmlDocument, our document</param>
	<param name="sInLineXML">string, our path</param>
	<param name="sValue">string our new value</param>
	<returns>Boolean, true if done</returns>
	<remarks></remarks>
</member><member name="M:Ludo_Tools.XML_Write_Attribut(System.Xml.XmlDocument@,System.Collections.Generic.List{System.String},System.String,System.String)">
	<summary>
 Function to Write Attribut Value From a XML Doc to Path
 </summary>
	<param name="oXml">System.Xml.XmlDocument, our document</param>
	<param name="lst_sInLineXML">List(Of String), path of the seeked element</param>
	<param name="sAttribut">string, our attribut name</param>
	<param name="sValue">string our new value</param>
	<returns>Boolean, true if done</returns>
	<remarks></remarks>
</member><member name="M:Ludo_Tools.XML_Write_Attribut(System.Xml.XmlDocument@,System.String,System.String,System.String)">
	<summary>
 Function to Write Attribut Value From a XML Doc to Path
 </summary>
	<param name="oXml">System.Xml.XmlDocument, our document</param>
	<param name="sInLineXML">string, our path</param>
	<param name="sAttribut">string, our attribut name</param>
	<param name="sValue">string our new value</param>
	<returns>Boolean, true if done</returns>
	<remarks></remarks>
</member><member name="M:Ludo_Tools.XML_Remove_Element(System.Xml.XmlDocument@,System.Collections.Generic.List{System.String})">
	<summary>
 Function to remove an element from a path
 </summary>
	<param name="oXml">System.Xml.XmlDocument, our document</param>
	<param name="lst_sInLineXML">List(Of String), path of the seeked element</param>
	<returns>Boolean, true if done</returns>
	<remarks></remarks>
</member><member name="M:Ludo_Tools.XML_Remove_Element(System.Xml.XmlDocument@,System.String)">
	<summary>
 Function to remove an element from a path
 </summary>
	<param name="oXml">System.Xml.XmlDocument, our document</param>
	<param name="sInLineXML">string, our path</param>
	<returns>Boolean, true if done</returns>
	<remarks></remarks>
</member><member name="M:Ludo_Tools.XML_Remove_Attribut(System.Xml.XmlDocument@,System.Collections.Generic.List{System.String},System.String)">
	<summary>
 Function to remove an attribut
 </summary>
	<param name="oXml">System.Xml.XmlDocument, our document</param>
	<param name="lst_sInLineXML">List(Of String), path of the seeked element</param>
	<param name="sAttribut">string, our attribut</param>
	<returns>Boolean, true if done</returns>
	<remarks></remarks>
</member><member name="M:Ludo_Tools.XML_Remove_Attribut(System.Xml.XmlDocument@,System.String,System.String)">
	<summary>
 Function to remove an attribut
 </summary>
	<param name="oXml">System.Xml.XmlDocument, our document</param>
	<param name="sInLineXML">string, our path</param>
	<param name="sAttribut">string, our attribut</param>
	<returns>Boolean, true if done</returns>
	<remarks></remarks>
</member><member name="M:Ludo_Tools.XML_PlotsIn_TREE(System.Xml.XmlElement@,System.Windows.Forms.TreeView@,System.Int32)">
	<summary>
 Function to plot a XML in a System.Windows.Forms.TreeView
 </summary>
	<param name="xmlElement">Xml.XmlElement, our element</param>
	<param name="TREE_">System.Windows.Forms.TreeView, our tree view object</param>
	<param name="nLimit">integer, limit of node level, 0 means limit less</param>
	<returns>Boolean, true if done</returns>
	<remarks></remarks>
</member><member name="M:Ludo_Tools.XML_PlotsIn_TREE(System.Xml.XmlDocument@,System.Windows.Forms.TreeView@,System.Int32)">
	<summary>
 Function to plot a XML in a System.Windows.Forms.TreeView
 </summary>
	<param name="xmlDocument">Xml.XmlDocument, our element</param>
	<param name="TREE_">System.Windows.Forms.TreeView, our tree view object</param>
	<param name="nLimit">integer, limit of node level, 0 means limit less</param>
	<returns>Boolean, true if done</returns>
	<remarks></remarks>
</member><member name="M:Ludo_Tools.RES_GetStringResource(System.Resources.ResourceManager@,System.String)">
	<summary>
 Function to load a string text from a resource
 </summary>
	<param name="oRM">System.Resources.ResourceManager, our ressource manager dude !</param>
	<param name="sName">string, our ressource name</param>
	<returns>string, our text</returns>
	<remarks>this function spar you one line ... wao ... #Amazing #Irony</remarks>
</member><member name="M:Ludo_Tools.RES_GetByteResource(System.Resources.ResourceManager@,System.String)">
	<summary>
 Function to load a Byte array from a resource
 </summary>
	<param name="oRM">System.Resources.ResourceManager, our ressource manager dude !</param>
	<param name="sName">string, our ressource name</param>
	<returns>byte[], our ressource binary</returns>
	<remarks>this function spar you one line ... wao ... #Amazing #Irony</remarks>
</member><member name="M:Ludo_Tools.RES_GetByteResource_AsString(System.Resources.ResourceManager@,System.String)">
	<summary>
 function to get a string text from a Byte array resource
 </summary>
	<param name="oRM">System.Resources.ResourceManager, our ressource manager dude !</param>
	<param name="sName">string, our ressource name</param>
	<returns>string, our text</returns>
	<remarks>this function spar you one line ... wao ... #Amazing #Irony</remarks>
</member><member name="M:Ludo_Tools.RES_GetMemStreamResource(System.Resources.ResourceManager@,System.String)">
	<summary>
 Function to get a MemoryStream from a resource
 </summary>
	<param name="oRM">System.Resources.ResourceManager, our ressource manager dude !</param>
	<param name="sName">string, our ressource name</param>
	<returns>System.IO.MemoryStream, our stream memory</returns>
	<remarks>this function spar you one line ... wao ... #Amazing #Irony</remarks>
</member><member name="T:Ludo_Tools">
	<summary>
 Public module to provide globales functions
 </summary>
	<remarks></remarks>
</member><member name="F:Ludo.EVENTS.LudoListEventArgs.lst_s">
	<summary>
 Our list
 </summary>
	<remarks></remarks>
</member><member name="M:Ludo.EVENTS.LudoListEventArgs.setLst(System.Collections.Generic.List{System.String}@)">
	<summary>
 Method to set the list of strings
 </summary>
	<param name="lst_sNewList">List(Of String), our new list</param>
	<returns>Boolean, True is not NULL</returns>
	<remarks></remarks>
</member><member name="M:Ludo.EVENTS.LudoListEventArgs.getLst">
	<summary>
 Method to get the list in arguments
 </summary>
	<returns>List(Of String), our list</returns>
	<remarks></remarks>
</member><member name="T:Ludo.EVENTS.LudoListEventArgs">
	<summary>
 Event argument to give a list to the parent element
 </summary>
	<remarks></remarks>
</member><member name="T:Ludo.EVENTS.events.LUDO_EVENT_EXIT">
	<summary>
 Event to quit
 </summary>
	<param name="sender">Object, sender of the event</param>
	<param name="e">EventArgs, Argument of our signal</param>
	<remarks></remarks>
</member><member name="T:Ludo.EVENTS.events.LUDO_EVENT_UPDATE">
	<summary>
 Event to update
 </summary>
	<param name="sender">Object, sender of the event</param>
	<param name="e">EventArgs, Argument of our signal</param>
	<remarks></remarks>
</member><member name="T:Ludo.EVENTS.events.LUDO_EVENT_DELETE">
	<summary>
 Event to Delete something
 </summary>
	<param name="sender">Object, sender of the event</param>
	<param name="e">EventArgs, Argument of our signal</param>
	<remarks></remarks>
</member><member name="T:Ludo.EVENTS.events.LUDO_EVENT_LIST">
	<summary>
 Event to give list
 </summary>
	<param name="sender">Object, sender of the event</param>
	<param name="e">LudoListEventArgs, Argument of our signal</param>
	<remarks></remarks>
</member><member name="T:Ludo.EVENTS.events">
	<summary>
 Our modules of events
 </summary>
	<remarks></remarks>
</member><member name="F:Ludo.Reports.Consts.SECTION_S_FOOTER_DEFAULT">
	<summary>
 default value for the Footer
 </summary>
	<remarks></remarks>
</member><member name="F:Ludo.Reports.Consts.SECTION_S_FOOTER_PGNUM_RIGHT">
	<summary>
 Value with page number right
 </summary>
	<remarks></remarks>
</member><member name="T:Ludo.Reports.Element">
	<summary>
 Element in the report
 </summary>
	<remarks></remarks>
</member><member name="T:Ludo.Reports.Style">
	<summary>
 Class to store Our style
 </summary>
	<remarks></remarks>
</member><member name="T:Ludo.Reports.Report">
	<summary>
 class to print a report !!!
 </summary>
	<remarks></remarks>
</member><member name="T:Ludo.Reports.Element_Pr">
	<summary>
 Paragraphe
 </summary>
	<remarks></remarks>
</member><member name="T:Ludo.Reports.Element_Rich">
	<summary>
 Rich Text Element
 </summary>
	<remarks></remarks>
</member><member name="T:Ludo.Reports.Element_Array">
	<summary>
 Array
 </summary>
	<remarks></remarks>
</member><member name="T:Ludo.Reports.Element_Break">
	<summary>
 Page Break Element
 </summary>
	<remarks></remarks>
</member><member name="F:Ludo.Reports.Element_Section_s_end.nType">
	<summary>
 Type of the section
 </summary>
	<remarks></remarks>
</member><member name="M:Ludo.Reports.Element_Section_s_end.getSectionType">
	<summary>
 Method to get the Type of section
 </summary>
	<returns>Integer, our type</returns>
	<remarks></remarks>
</member><member name="M:Ludo.Reports.Element_Section_s_end.setSectionType(System.Int32)">
	<summary>
 Method to set the Type
 </summary>
	<param name="nSectionType">Integer, our new section type</param>
	<returns>Boolean, True if done</returns>
	<remarks></remarks>
</member><member name="M:Ludo.Reports.Element_Section_s_end.#ctor(System.Int32)">
	<summary>
 With Native Type
 </summary>
	<param name="nSectionType">Integer, Type of the end section</param>
	<remarks></remarks>
</member><member name="T:Ludo.Reports.Element_Section_s_end">
	<summary>
 Section Ends : end a section and define its type
 </summary>
	<remarks></remarks>
</member><member name="M:Ludo.Reports.Element_Section_Header_And_Footer.getnTypeFooter">
	<summary>
 Method to get the type of the footer
 </summary>
	<returns>Integer, the type value</returns>
	<remarks></remarks>
</member><member name="M:Ludo.Reports.Element_Section_Header_And_Footer.setnTypeFooter(System.Int32)">
	<summary>
 method to set the footer type
 </summary>
	<param name="nType">Intger, type of the footer</param>
	<returns>Boolean, True if done</returns>
	<remarks></remarks>
</member><member name="M:Ludo.Reports.Element_Section_Header_And_Footer.writeDocx(System.Xml.XmlElement@,System.Xml.XmlDocument@)">
	<summary>
 Function to write the header and footer type
 </summary>
	<param name="oParentNode">XmlElement, parent Node</param>
	<param name="oDoc">XmlDocument, Document</param>
	<returns>Boolean, True if done</returns>
	<remarks></remarks>
</member><member name="M:Ludo.Reports.Element_Section_Header_And_Footer.#ctor">
	<summary>
 default builder
 </summary>
	<remarks></remarks>
</member><member name="M:Ludo.Reports.Element_Section_Header_And_Footer.#ctor(System.Int32)">
	<summary>
 With footer Type
 </summary>
	<param name="nFooterType">Intger, Footer Type</param>
	<remarks></remarks>
</member><member name="T:Ludo.Reports.Element_Section_Header_And_Footer">
	<summary>
 Class to edit header and footers
 </summary>
	<remarks></remarks>
</member><member name="T:Ludo.Reports.Globals">
	<summary>
 Module for our Gobals functions
 </summary>
	<remarks></remarks>
</member><member name="F:DataGridViewProgressCell.bText">
	<summary>
 Must we plot the text ?
 </summary>
	<remarks></remarks>
</member><member name="F:DataGridViewProgressCell.nMin">
	<summary>
 Minimum Value
 </summary>
	<remarks></remarks>
</member><member name="F:DataGridViewProgressCell.nMax">
	<summary>
 Maximun Value
 </summary>
	<remarks></remarks>
</member><member name="F:DataGridViewProgressCell.nColorP">
	<summary>
 Color if value Positive
 </summary>
	<remarks></remarks>
</member><member name="F:DataGridViewProgressCell.nColorN">
	<summary>
 Color if value Negative
 </summary>
	<remarks></remarks>
</member><member name="P:DataGridViewProgressCell.PositiveColor">
	<summary>
 Color in case of positive value
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:DataGridViewProgressCell.NegativeColor">
	<summary>
 Color in case of negative value
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:DataGridViewProgressCell.Minimum">
	<summary>
 Minimum value of the progress cell
 </summary>
	<value>Integer</value>
	<returns>Integer</returns>
	<remarks></remarks>
</member><member name="P:DataGridViewProgressCell.Maximum">
	<summary>
 Maximum value of the progress cell
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:DataGridViewProgressCell.GetFormattedValue(System.Object,System.Int32,System.Windows.Forms.DataGridViewCellStyle@,System.ComponentModel.TypeConverter,System.ComponentModel.TypeConverter,System.Windows.Forms.DataGridViewDataErrorContexts)">
	<summary>
 Method required to make the Progress Cell consistent with the default Image Cell. 
 </summary>
	<param name="value"></param>
	<param name="rowIndex"></param>
	<param name="cellStyle"></param>
	<param name="valueTypeConverter"></param>
	<param name="formattedValueTypeConverter"></param>
	<param name="context"></param>
	<returns></returns>
	<remarks>The default Image Cell assumes an Image as a value, although the value of the Progress Cell is an Integer.</remarks>
</member><member name="M:DataGridViewProgressCell.Paint(System.Drawing.Graphics,System.Drawing.Rectangle,System.Drawing.Rectangle,System.Int32,System.Windows.Forms.DataGridViewElementStates,System.Object,System.Object,System.String,System.Windows.Forms.DataGridViewCellStyle,System.Windows.Forms.DataGridViewAdvancedBorderStyle,System.Windows.Forms.DataGridViewPaintParts)">
	<summary>
 Paint Method
 </summary>
	<param name="g"></param>
	<param name="clipBounds"></param>
	<param name="cellBounds"></param>
	<param name="rowIndex"></param>
	<param name="cellState"></param>
	<param name="value"></param>
	<param name="formattedValue"></param>
	<param name="errorText"></param>
	<param name="cellStyle"></param>
	<param name="advancedBorderStyle"></param>
	<param name="paintParts"></param>
	<remarks></remarks>
</member><member name="T:DataGridViewProgressCell">
	<summary>
 Cell for our Progress bar
 </summary>
	<remarks></remarks>
</member><member name="F:LAY_LUDO_DTB_Query.sFilename">
	<summary>
 Our filename
 </summary>
	<remarks></remarks>
</member><member name="E:LAY_LUDO_DTB_Query.eList">
	<summary>
 Our Event list when, multifile droped
 </summary>
	<remarks></remarks>
</member><member name="E:LAY_LUDO_DTB_Query.eQuit">
	<summary>
 Our quit event
 </summary>
	<remarks></remarks>
</member><member name="M:LAY_LUDO_DTB_Query.init(System.Collections.Generic.List{Ludo.DTB.Ludo_DTB_Connexion}@,Ludo.DTB.Ludo_DTB_Connexion@)">
	<summary>
 Method to initialize the windows
 </summary>
	<param name="lst_oConnection">List(Of Ludo.DTB.Ludo_DTB_Connexion), list we plots</param>
	<returns>Boolean, True if done</returns>
	<remarks></remarks>
</member><member name="M:LAY_LUDO_DTB_Query.isSelect">
	<summary>
 Method to determine if the query is a select method or not !
 </summary>
	<returns>Boolean, true if is</returns>
	<remarks></remarks>
</member><member name="M:LAY_LUDO_DTB_Query.executeQuery">
	<summary>
 Method to execute the query
 </summary>
	<returns>Boolean, True</returns>
	<remarks></remarks>
</member><member name="M:LAY_LUDO_DTB_Query.loadFile(System.String)">
	<summary>
 Method to load the file
 </summary>
	<param name="sName">String, file name</param>
	<returns>Boolean if done</returns>
	<remarks></remarks>
</member><member name="M:LAY_LUDO_DTB_Query.saveFile(System.String)">
	<summary>
 Method to save a file
 </summary>
	<param name="sName">[OPTIONAL] String, our file name</param>
	<returns>Boolean, true if done</returns>
	<remarks>If no file name calls obtainFileName.
 This method calls the method loadFile, to reload after saved
 </remarks>
</member><member name="M:LAY_LUDO_DTB_Query.BTN_Execute_Click(System.Object,System.EventArgs)">
	<summary>
 Handler to execute a new query
 </summary>
	<param name="sender">Object, the sender !!!</param>
	<param name="e">Eventargs, the argument of the event !!!</param>
	<remarks></remarks>
</member><member name="M:LAY_LUDO_DTB_Query.TXT_Query_F5(System.Object,System.Windows.Forms.KeyEventArgs)">
	<summary>
 Handler to execute F5
 </summary>
	<param name="sender">Object, the sender !!!</param>
	<param name="e">KeyEventargs, the argument of the event !!!</param>
	<remarks></remarks>
</member><member name="M:LAY_LUDO_DTB_Query.BTN_Save_Click(System.Object,System.EventArgs)">
	<summary>
 Handler to save the query as file from BTN
 </summary>
	<param name="sender">Object, the sender !!!</param>
	<param name="e">Eventargs, the argument of the event !!!</param>
	<remarks></remarks>
</member><member name="M:LAY_LUDO_DTB_Query.TXT_Query_CTRLS(System.Object,System.Windows.Forms.KeyEventArgs)">
	<summary>
 Handler to save the query as file from TXT
 </summary>
	<param name="sender">Object, the sender !!!</param>
	<param name="e">Eventargs, the argument of the event !!!</param>
	<remarks></remarks>
</member><member name="M:LAY_LUDO_DTB_Query.TXT_Query_DragEnter(System.Object,System.Windows.Forms.DragEventArgs)">
	<summary>
 Handler to set the drag in
 </summary>
	<param name="sender">Object, the sender !!!</param>
	<param name="e">DragEventargs, the argument of the event !!!</param>
	<remarks></remarks>
</member><member name="M:LAY_LUDO_DTB_Query.TXT_Query_DragDrop(System.Object,System.Windows.Forms.DragEventArgs)">
	<summary>
 Handler to manage drag and drop in text
 </summary>
	<param name="sender">Object, the sender !!!</param>
	<param name="e">DragEventargs, the argument of the event !!!</param>
	<remarks></remarks>
</member><member name="M:LAY_LUDO_DTB_Query.BTN_Quit_Click(System.Object,System.EventArgs)">
	<summary>
 Handler to throw a quit event
 </summary>
	<param name="sender">Object, the sender !!!</param>
	<param name="e">Eventargs, the argument of the event !!!</param>
	<remarks></remarks>
</member><member name="M:LAY_LUDO_DTB_Query.#ctor">
	<summary>
 Default builder
 </summary>
	<remarks></remarks>
</member><member name="M:LAY_LUDO_DTB_Query.#ctor(System.Collections.Generic.List{Ludo.DTB.Ludo_DTB_Connexion}@,Ludo.DTB.Ludo_DTB_Connexion@,System.String)">
	<summary>
 Builders with parameters
 </summary>
	<param name="lst_oConnection">List(Of Ludo.DTB.Ludo_DTB_Connexion), list we plots</param>
	<remarks></remarks>
</member><member name="T:LAY_LUDO_DTB_Query">
	<summary>
 Layout to execute query
 </summary>
	<remarks></remarks>
</member><member name="E:LUDO_CTRL.Click">
	<summary>
 our click event
 </summary>
	<remarks></remarks>
</member><member name="E:LUDO_CTRL.keyUp">
	<summary>
 Our Event overwrite KeyUp
 </summary>
	<remarks></remarks>
</member><member name="E:LUDO_CTRL.KeyDown">
	<summary>
 Our Event overwrite KeyDown
 </summary>
	<remarks></remarks>
</member><member name="E:LUDO_CTRL.KeyPress">
	<summary>
 Our Event overwrite KeyPress
 </summary>
	<remarks></remarks>
</member><member name="M:LUDO_CTRL.getSystemWindowsFormsLabel">
	<summary>
 Method to get the original Text object
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:LUDO_CTRL.raiseEvent_Click(System.EventArgs)">
	<summary>
 Method to raise a click event in the class
 </summary>
	<param name="e">EventArgs, our event</param>
	<returns>Boolean, true if done</returns>
	<remarks></remarks>
</member><member name="M:LUDO_CTRL.raiseEvent_KeyUp(System.Windows.Forms.KeyEventArgs)">
	<summary>
 Method to raise a keyUp event in the class
 </summary>
	<param name="e">System.Windows.Forms.KeyEventArgs, our event</param>
	<returns>Boolean, true if done</returns>
	<remarks></remarks>
</member><member name="M:LUDO_CTRL.raiseEvent_KeyDown(System.Windows.Forms.KeyEventArgs)">
	<summary>
 Method to raise a keyDown event in the class
 </summary>
	<param name="e">System.Windows.Forms.KeyEventArgs, our event</param>
	<returns>Boolean, true if done</returns>
	<remarks></remarks>
</member><member name="M:LUDO_CTRL.raiseEvent_KeyPress(System.Windows.Forms.KeyPressEventArgs)">
	<summary>
 Method to raise a keyPress event in the class
 </summary>
	<param name="e">System.Windows.Forms.KeyPressEventArgs, our event</param>
	<returns>Boolean, true if done</returns>
	<remarks></remarks>
</member><member name="P:LUDO_CTRL.LabelText">
	<summary>
 Property to set the label text
 </summary>
	<value>string, our label text</value>
	<returns>string, our label text</returns>
	<remarks></remarks>
</member><member name="P:LUDO_CTRL.Font">
	<summary>
 Property to manage the font of the Textbox
 </summary>
	<value>Font, our new font</value>
	<returns>Font, our font</returns>
	<remarks></remarks>
</member><member name="P:LUDO_CTRL.LabelFont">
	<summary>
 Property to manage the font of the label
 </summary>
	<value>Font, our new font</value>
	<returns>Font, our font</returns>
	<remarks></remarks>
</member><member name="M:LUDO_CTRL.#ctor">
	<summary>
 Builder
 </summary>
	<remarks></remarks>
</member><member name="T:LUDO_CTRL">
	<summary>
 Ludo control, our layout to have a base of field with lab
 </summary>
	<remarks></remarks>
</member><member name="M:LUDO_CTRL_TXT.getSystemWindowsFormsTextBox">
	<summary>
 Method to get the original Text object
 </summary>
	<returns>System.Windows.Forms.TextBox</returns>
	<remarks></remarks>
</member><member name="P:LUDO_CTRL_TXT.Text">
	<summary>
 Property to set the text
 </summary>
	<value>String, our value !</value>
	<returns>String, our text</returns>
	<remarks></remarks>
</member><member name="P:LUDO_CTRL_TXT.Font">
	<summary>
 Property to manage the font of the Textbox
 </summary>
	<value>Font, our new font</value>
	<returns>Font, our font</returns>
	<remarks></remarks>
</member><member name="P:LUDO_CTRL_TXT.Enabled">
	<summary>
 Property to managed the enableness
 </summary>
	<value>boolean, the value</value>
	<returns>Boolean, is enabled or not !!!</returns>
	<remarks></remarks>
</member><member name="P:LUDO_CTRL_TXT.Multiline">
	<summary>
 Property to manage the multiline
 </summary>
	<value>Boolean, multiline</value>
	<returns>Boolean, is multi line</returns>
	<remarks></remarks>
</member><member name="P:LUDO_CTRL_TXT.ReadOnly">
	<summary>
 Property to manage the read only stuff
 </summary>
	<value>Boolean, our new state</value>
	<returns>Boolean, true if read only</returns>
	<remarks></remarks>
</member><member name="P:LUDO_CTRL_TXT.ScrollBar">
	<summary>
 Property to manage the scrollbar in the Text field
 </summary>
	<value>System.Windows.Forms.ScrollBars, our new scroll type</value>
	<returns>System.Windows.Forms.ScrollBars, our scroll used</returns>
	<remarks></remarks>
</member><member name="M:LUDO_CTRL_TXT.HANDLER_Click(System.Object,System.EventArgs)">
	<summary>
 Handler to manage the keyUp
 </summary>
	<param name="sender">Object, the sender of the event</param>
	<param name="e">System.Windows.Forms.KeyEventArgs, our event arg</param>
	<remarks></remarks>
</member><member name="M:LUDO_CTRL_TXT.HANDLER_KeyUp(System.Object,System.Windows.Forms.KeyEventArgs)">
	<summary>
 Handler to manage the keyUp
 </summary>
	<param name="sender">Object, the sender of the event</param>
	<param name="e">System.Windows.Forms.KeyEventArgs, our event arg</param>
	<remarks></remarks>
</member><member name="M:LUDO_CTRL_TXT.HANDLER_KeyDown(System.Object,System.Windows.Forms.KeyEventArgs)">
	<summary>
 Handler to manage the keyDown
 </summary>
	<param name="sender">Object, the sender of the event</param>
	<param name="e">System.Windows.Forms.KeyEventArgs, our event arg</param>
	<remarks></remarks>
</member><member name="M:LUDO_CTRL_TXT.HANDLER_KeyPress(System.Object,System.Windows.Forms.KeyPressEventArgs)">
	<summary>
 Handler to manage the keyPress
 </summary>
	<param name="sender">Object, the sender of the event</param>
	<param name="e">System.Windows.Forms.KeyEventArgs, our event arg</param>
	<remarks></remarks>
</member><member name="M:LUDO_CTRL_TXT.#ctor">
	<summary>
 Builder
 </summary>
	<remarks></remarks>
</member><member name="M:LUDO_CTRL_TXT.#ctor(System.String,System.String)">
	<summary>
 Builder with start value
 </summary>
	<param name="sLabelText">string, text of the label</param>
	<param name="sValue">string, text to begin</param>
	<remarks></remarks>
</member><member name="F:LAY_LUDO_DTB_Module_editor.oModule">
	<summary>
 our module object to édit the modue
 </summary>
	<remarks></remarks>
</member><member name="E:LAY_LUDO_DTB_Module_editor.eUpdate">
	<summary>
 our event to update the module
 </summary>
	<remarks></remarks>
</member><member name="E:LAY_LUDO_DTB_Module_editor.eQuit">
	<summary>
 Our event to quit the module
 </summary>
	<remarks></remarks>
</member><member name="E:LAY_LUDO_DTB_Module_editor.eDelete">
	<summary>
 Our event to delete the module
 </summary>
	<remarks></remarks>
</member><member name="M:LAY_LUDO_DTB_Module_editor.init(Ludo.DTB.Ludo_DTB_Module@)">
	<summary>
 Method to init the 
 </summary>
	<param name="oMod">Ludo.DTB.Ludo_DTB_Module, our module</param>
	<returns>Boolean, true if done</returns>
	<remarks></remarks>
</member><member name="M:LAY_LUDO_DTB_Module_editor.setModule(Ludo.DTB.Ludo_DTB_Module@)">
	<summary>
 Method to assign a module
 </summary>
	<param name="oMod">Ludo.DTB.Ludo_DTB_Module, our module</param>
	<returns>Boolean, true if done</returns>
	<remarks></remarks>
</member><member name="M:LAY_LUDO_DTB_Module_editor.getLudo_DTB_Module">
	<summary>
 Method to obtain the current Module
 </summary>
	<returns> Ludo.DTB.Ludo_DTB_Module, our module</returns>
	<remarks></remarks>
</member><member name="M:LAY_LUDO_DTB_Module_editor.checkValidity">
	<summary>
 Method to check the validity on field
 </summary>
	<returns>Booleen, true if done</returns>
	<remarks></remarks>
</member><member name="M:LAY_LUDO_DTB_Module_editor.objToView(Ludo.DTB.Ludo_DTB_Module@)">
	<summary>
 Method to put obj properties in view
 </summary>
	<param name="oMod">Ludo.DTB.Ludo_DTB_Module</param>
	<returns>Booleam, true if done</returns>
	<remarks></remarks>
</member><member name="M:LAY_LUDO_DTB_Module_editor.viewToObj(Ludo.DTB.Ludo_DTB_Module@)">
	<summary>
 Method to move a view to the object
 </summary>
	<param name="oMod">Ludo.DTB.Ludo_DTB_Module</param>
	<returns>Booleam, true if done</returns>
	<remarks></remarks>
</member><member name="M:LAY_LUDO_DTB_Module_editor.fillFields">
	<summary>
 Method to fill the module field
 </summary>
	<returns>Boolean, true if done</returns>
	<remarks>This metod contain a Library security against thief, overload this function in a herited class to unlock the author field</remarks>
</member><member name="M:LAY_LUDO_DTB_Module_editor.saveModule">
	<summary>
 Method to save the Module
 </summary>
	<returns>Boolean, true if done</returns>
	<remarks></remarks>
</member><member name="M:LAY_LUDO_DTB_Module_editor.raiseeDeleteEvent">
	<summary>
 Method to raise the delete event
 </summary>
	<returns>Boolean, True if done</returns>
	<remarks></remarks>
</member><member name="M:LAY_LUDO_DTB_Module_editor.raiseeQuit">
	<summary>
 Method to raise the quit event
 </summary>
	<returns>Boolean, True if done</returns>
	<remarks></remarks>
</member><member name="M:LAY_LUDO_DTB_Module_editor.raiseeUpdate">
	<summary>
 Method to raise the update event
 </summary>
	<returns>Boolean, True if done</returns>
	<remarks></remarks>
</member><member name="M:LAY_LUDO_DTB_Module_editor.BTN_Save_Click(System.Object,System.EventArgs)">
	<summary>
 Handler to manage the save event
 </summary>
	<param name="sender">Object, our object who sends the event</param>
	<param name="e">Eventargs, our argument</param>
	<remarks></remarks>
</member><member name="M:LAY_LUDO_DTB_Module_editor.BTN_Save_Quit_Click(System.Object,System.EventArgs)">
	<summary>
 Handler to manage the save and quit event
 </summary>
	<param name="sender">Object, our object who sends the event</param>
	<param name="e">Eventargs, our argument</param>
	<remarks></remarks>
</member><member name="M:LAY_LUDO_DTB_Module_editor.BTN_Quit_Click(System.Object,System.EventArgs)">
	<summary>
 Handler to manage the quit event
 </summary>
	<param name="sender">Object, our object who sends the event</param>
	<param name="e">Eventargs, our argument</param>
	<remarks></remarks>
</member><member name="M:LAY_LUDO_DTB_Module_editor.OPT_Check_Click(System.Object,System.EventArgs)">
	<summary>
 Handler to manage manual check
 </summary>
	<param name="sender">Object, the sender of the event</param>
	<param name="e">EventArg, the argument</param>
	<remarks>This Handler calls the public overridable method checkValidity()</remarks>
</member><member name="M:LAY_LUDO_DTB_Module_editor.OPT_Clone_Click(System.Object,System.EventArgs)">
	<summary>
 Handler to manage the clonage of this column
 </summary>
	<param name="sender">Object, the sender of the event</param>
	<param name="e">EventArg, the argument</param>
	<remarks></remarks>
</member><member name="M:LAY_LUDO_DTB_Module_editor.OPT_Delete_Click(System.Object,System.EventArgs)">
	<summary>
 Handler to manage the delete from the ContextMenu
 </summary>
	<param name="sender">Object, the sender of the event</param>
	<param name="e">EventArg, the argument</param>
	<remarks>This Handler calls the public overridable method raiseeDeleteEvent()</remarks>
</member><member name="M:LAY_LUDO_DTB_Module_editor.LAY_LUDO_DTB_Module_editor_Load(System.Object,System.EventArgs)">
	<summary>
 Method to do something on load
 </summary>
	<param name="sender">Object, our object who sends the event</param>
	<param name="e">Eventargs, our argument</param>
	<remarks></remarks>
</member><member name="M:LAY_LUDO_DTB_Module_editor.#ctor">
	<summary>
 Default nuilder
 </summary>
	<remarks></remarks>
</member><member name="M:LAY_LUDO_DTB_Module_editor.#ctor(Ludo.DTB.Ludo_DTB_Module@)">
	<summary>
 Builder with parameter
 </summary>
	<param name="oMod">Ludo.DTB.Ludo_DTB_Module, our module</param>
	<remarks></remarks>
</member><member name="T:LAY_LUDO_DTB_Module_editor">
	<summary>
 Layout to create or modify a DTB module
 </summary>
	<remarks></remarks>
</member><member name="M:LUDO_CTRL_DTP.getSystemWindowsFormsDateTimePicker">
	<summary>
 Method to get the original Text object
 </summary>
	<returns>System.Windows.Forms.DateTimePicker, our date time picker</returns>
	<remarks></remarks>
</member><member name="M:LUDO_CTRL_DTP.toYYYYMMDD">
	<summary>
 Method to get the date as a specific formt : Year on 4 Digit + Month on 2 Digit + Day on 2 Digit
 </summary>
	<returns>String, our formated date !</returns>
	<remarks></remarks>
</member><member name="M:LUDO_CTRL_DTP.fromYYYYMMDD(System.String)">
	<summary>
 Method to load date from a string formated in yyyyMMdd !
 </summary>
	<param name="sDate">string, our date</param>
	<returns>Boolean, true if date loaded, false if not (then LUDO_Now() called !)</returns>
	<remarks></remarks>
</member><member name="P:LUDO_CTRL_DTP.Value">
	<summary>
 Property to manage the value of the DateTimePicker
 </summary>
	<value>Date, our new date</value>
	<returns>Date, the current one</returns>
	<remarks></remarks>
</member><member name="P:LUDO_CTRL_DTP.Text">
	<summary>
 Property to manage the Text property
 </summary>
	<value>String, our text value</value>
	<returns>String, our text value</returns>
	<remarks></remarks>
</member><member name="P:LUDO_CTRL_DTP.Enabled">
	<summary>
 Property to 
 </summary>
	<value>boolean, the value</value>
	<returns>Bollean, is enabled or not !!!</returns>
	<remarks></remarks>
</member><member name="M:LUDO_CTRL_DTP.HANDLER_Click(System.Object,System.EventArgs)">
	<summary>
 Handler to manage the keyUp
 </summary>
	<param name="sender">Object, the sender of the event</param>
	<param name="e">System.Windows.Forms.KeyEventArgs, our event arg</param>
	<remarks></remarks>
</member><member name="M:LUDO_CTRL_DTP.HANDLER_KeyUp(System.Object,System.Windows.Forms.KeyEventArgs)">
	<summary>
 Handler to manage the keyUp
 </summary>
	<param name="sender">Object, the sender of the event</param>
	<param name="e">System.Windows.Forms.KeyEventArgs, our event arg</param>
	<remarks></remarks>
</member><member name="M:LUDO_CTRL_DTP.HANDLER_KeyDown(System.Object,System.Windows.Forms.KeyEventArgs)">
	<summary>
 Handler to manage the keyDown
 </summary>
	<param name="sender">Object, the sender of the event</param>
	<param name="e">System.Windows.Forms.KeyEventArgs, our event arg</param>
	<remarks></remarks>
</member><member name="M:LUDO_CTRL_DTP.HANDLER_KeyPress(System.Object,System.Windows.Forms.KeyPressEventArgs)">
	<summary>
 Handler to manage the keyPress
 </summary>
	<param name="sender">Object, the sender of the event</param>
	<param name="e">System.Windows.Forms.KeyEventArgs, our event arg</param>
	<remarks></remarks>
</member><member name="M:LUDO_CTRL_DTP.InitializeComponent">
	<summary>
 Override of InitializeComponent
 </summary>
	<remarks></remarks>
</member><member name="M:LUDO_CTRL_DTP.#ctor">
	<summary>
 Our default builder
 </summary>
	<remarks></remarks>
</member><member name="M:LUDO_CTRL_DTP.#ctor(System.String,System.DateTime@)">
	<summary>
 Builder with date
 </summary>
	<param name="sLabelText">string, text of the label</param>
	<param name="dtDate">Date, starting date</param>
	<remarks></remarks>
</member><member name="T:LUDO_CTRL_DTP">
	<summary>
 Layout to have a Date Time Picker field with label
 </summary>
	<remarks></remarks>
</member><member name="F:LAY_XML_Analyzer.xmlDocument">
	<summary>
 Our XML Document
 </summary>
	<remarks></remarks>
</member><member name="F:LAY_XML_Analyzer.sXmlFilename">
	<summary>
 Our Xml Document filename
 </summary>
	<remarks></remarks>
</member><member name="F:LAY_XML_Analyzer.oLAY_Struct">
	<summary>
 our structure to analyze and modify XML
 </summary>
	<remarks></remarks>
</member><member name="E:LAY_XML_Analyzer.eQuit">
	<summary>
 Our quit event
 </summary>
	<remarks></remarks>
</member><member name="M:LAY_XML_Analyzer.init(System.String)">
	<summary>
 Method to initialize the Layout
 </summary>
	<param name="sFilename">String, our document name</param>
	<returns>Boolean, True if done</returns>
	<remarks></remarks>
</member><member name="M:LAY_XML_Analyzer.setsFilename(System.String)">
	<summary>
 Method to load the Xml document
 </summary>
	<param name="sFilename">String, our document name</param>
	<returns>Boolean, True when done</returns>
	<remarks></remarks>
</member><member name="M:LAY_XML_Analyzer.getsFilename">
	<summary>
 Method to get the filename
 </summary>
	<returns>STring, the filename</returns>
	<remarks></remarks>
</member><member name="M:LAY_XML_Analyzer.saveXml(System.String)">
	<summary>
 Method to save the XML document
 </summary>
	<param name="sValue">String, </param>
	<returns>Boolean, True if done</returns>
	<remarks></remarks>
</member><member name="M:LAY_XML_Analyzer.BTN_Files_Click(System.Object,System.EventArgs)">
	<summary>
 Handler to tmanage the load of a file
 </summary>
	<param name="sender">Object, the sender !!!</param>
	<param name="e">Eventargs, the argument of the event !!!</param>
	<remarks></remarks>
</member><member name="M:LAY_XML_Analyzer.BTN_SaveAs_Click(System.Object,System.EventArgs)">
	<summary>
 Handler to ma nage the "save as" function
 </summary>
	<param name="sender">Object, the sender !!!</param>
	<param name="e">Eventargs, the argument of the event !!!</param>
	<remarks></remarks>
</member><member name="M:LAY_XML_Analyzer.BTN_Save_Click(System.Object,System.EventArgs)">
	<summary>
 Handler to ma nage the save function
 </summary>
	<param name="sender">Object, the sender !!!</param>
	<param name="e">Eventargs, the argument of the event !!!</param>
	<remarks></remarks>
</member><member name="M:LAY_XML_Analyzer.HANDLER_Save(System.Object,System.Windows.Forms.KeyEventArgs)">
	<summary>
 Handler to manage save shortcut
 </summary>
	<param name="sender">Object, the sender !!!</param>
	<param name="e">System.Windows.Forms.KeyEventArgs, the argument of the event !!!</param>
	<remarks></remarks>
</member><member name="M:LAY_XML_Analyzer.BTN_Quit_Click(System.Object,System.EventArgs)">
	<summary>
 Handler to throw a quit event
 </summary>
	<param name="sender">Object, the sender !!!</param>
	<param name="e">Eventargs, the argument of the event !!!</param>
	<remarks></remarks>
</member><member name="M:LAY_XML_Analyzer.#ctor">
	<summary>
 default builder
 </summary>
	<remarks>Do not use it !</remarks>
</member><member name="M:LAY_XML_Analyzer.#ctor(System.String)">
	<summary>
 Builder with parameter
 </summary>
	<param name="sFilename">[OPTIONAL] String, our document name</param>
	<remarks></remarks>
</member><member name="T:LAY_XML_Analyzer">
	<summary>
 Layout to analyse and modify a XML File
 </summary>
	<remarks></remarks>
</member><member name="F:WIN_LUDO_SEPA_Edition.oSepa">
	<summary>
 Our Sepa Instance !
 </summary>
	<remarks></remarks>
</member><member name="F:WIN_LUDO_SEPA_Edition.sFilename">
	<summary>
 Our Filename
 </summary>
	<remarks></remarks>
</member><member name="M:WIN_LUDO_SEPA_Edition.setFilename(System.String)">
	<summary>
 Method to set the filename
 </summary>
	<param name="sName">String, The name we want for our filename</param>
	<returns>Boolena, True If Done</returns>
	<remarks>Change the Lab_File Too</remarks>
</member><member name="M:WIN_LUDO_SEPA_Edition.getFilename">
	<summary>
 Method to get the filename
 </summary>
	<returns>String, Our Filename</returns>
	<remarks></remarks>
</member><member name="M:WIN_LUDO_SEPA_Edition.LoadXML">
	<summary>
 Method to load the file
 </summary>
	<returns>Boolean, True If Load</returns>
	<remarks></remarks>
</member><member name="M:WIN_LUDO_SEPA_Edition.setSepa(Ludo.SEPA.SEPA@)">
	<summary>
 Method to set the sepa obj
 </summary>
	<param name="oSepaObj">Ludo.SEPA.SEPA, Our new Sepa Obj</param>
	<returns>Boolean, True if done</returns>
	<remarks></remarks>
</member><member name="M:WIN_LUDO_SEPA_Edition.getSepa">
	<summary>
 Method to get the Sepa object
 </summary>
	<returns>Ludo.SEPA.SEPA, our sepa obj</returns>
	<remarks></remarks>
</member><member name="M:WIN_LUDO_SEPA_Edition.fillSAI">
	<summary>
 Method to fill SAI_
 </summary>
	<returns>Boolean, True If Me.oSepa not NULL</returns>
	<remarks></remarks>
</member><member name="M:WIN_LUDO_SEPA_Edition.fillDGV">
	<summary>
 Method to fill the Datagridview
 </summary>
	<returns>Boolean, True If Me.oSepa not NULL</returns>
	<remarks></remarks>
</member><member name="M:WIN_LUDO_SEPA_Edition.Init">
	<summary>
 Method to init the Windows Form
 </summary>
	<returns>Boolean, return True</returns>
	<remarks></remarks>
</member><member name="M:WIN_LUDO_SEPA_Edition.reRank">
	<summary>
 Method to re-order the list of Creditor
 </summary>
	<returns>Boolean, True if Done !</returns>
	<remarks></remarks>
</member><member name="M:WIN_LUDO_SEPA_Edition.addCdtr">
	<summary>
 Method to add a Creditor
 </summary>
	<returns>Boolean, True if Me.oSepa not false</returns>
	<remarks></remarks>
</member><member name="M:WIN_LUDO_SEPA_Edition.editCdtr(System.Int32)">
	<summary>
 Method to edit a creditor
 </summary>
	<param name="nLine">Integer, Line we want to edit</param>
	<returns>Boolean, True if Edition done</returns>
	<remarks></remarks>
</member><member name="M:WIN_LUDO_SEPA_Edition.delCdtr">
	<summary>
 Method to delete the Creditor
 </summary>
	<returns>Boolean, True if Me.oSepa not Null and selected rows existed</returns>
	<remarks></remarks>
</member><member name="M:WIN_LUDO_SEPA_Edition.SaveXML">
	<summary>
 Method to save
 </summary>
	<returns>Boolean, True if Me.oSepa not Null </returns>
	<remarks></remarks>
</member><member name="M:WIN_LUDO_SEPA_Edition.SaveXMLAs">
	<summary>
 Method to Save As
 </summary>
	<returns>Boolean, True if Me.oSepa not Null </returns>
	<remarks></remarks>
</member><member name="M:WIN_LUDO_SEPA_Edition.save">
	<summary>
 Method to save
 </summary>
	<returns>Boolean, True if done</returns>
	<remarks></remarks>
</member><member name="M:WIN_LUDO_SEPA_Edition.#ctor">
	<summary>
 Default Builders
 </summary>
	<remarks></remarks>
</member><member name="M:WIN_LUDO_SEPA_Edition.#ctor(Ludo.SEPA.SEPA@)">
	<summary>
 Builder With Pre-load Object
 </summary>
	<param name="oSepaObj">Ludo.SEPA.SEPA, Object with all stuff</param>
	<remarks>Don't put a Null object for your Own safety</remarks>
</member><member name="M:WIN_LUDO_SEPA_Edition.#ctor(System.String)">
	<summary>
 Builder With Filename
 </summary>
	<param name="sFile">String, Sepa File to load !</param>
	<remarks>Don't put a Null object for your Own safety</remarks>
</member><member name="T:WIN_LUDO_SEPA_Edition">
	<summary>
 Windows Form to edit a Sepa Class from file or Obj !
 </summary>
	<remarks></remarks>
</member><member name="F:WIN_LUDO_SEPA_Edition_Dbtr.oDbtr">
	<summary>
 Our Debitor Reference
 </summary>
	<remarks></remarks>
</member><member name="M:WIN_LUDO_SEPA_Edition_Dbtr.fillSAI">
	<summary>
 Method to fill the SAI from our reference
 </summary>
	<returns>Boolean, True If Done</returns>
	<remarks></remarks>
</member><member name="M:WIN_LUDO_SEPA_Edition_Dbtr.init">
	<summary>
 Method to init
 </summary>
	<returns>Boolean, True if done</returns>
	<remarks></remarks>
</member><member name="M:WIN_LUDO_SEPA_Edition_Dbtr.saveAndQuit">
	<summary>
 Method to Save and quit the windows
 </summary>
	<returns>Boolean, Retur True if it's done</returns>
	<remarks></remarks>
</member><member name="M:WIN_LUDO_SEPA_Edition_Dbtr.#ctor">
	<summary>
 Default and private builder
 </summary>
	<remarks></remarks>
</member><member name="M:WIN_LUDO_SEPA_Edition_Dbtr.#ctor(Ludo.SEPA.SEPA_Dbt@)">
	<summary>
 Builders with Parameters
 </summary>
	<param name="oRef"></param>
	<remarks></remarks>
</member><member name="T:WIN_LUDO_SEPA_Edition_Dbtr">
	<summary>
 Windows form to edit Debitor
 </summary>
	<remarks></remarks>
</member><member name="F:LAY_LUDO_DTB_Schema_Editor.oSchema">
	<summary>
 Our member schema
 </summary>
	<remarks></remarks>
</member><member name="M:LAY_LUDO_DTB_Schema_Editor.plotsSchema">
	<summary>
 Method t ot plot the schema into
 </summary>
	<returns>Boolean, true if done</returns>
	<remarks></remarks>
</member><member name="M:LAY_LUDO_DTB_Schema_Editor.loadSchema(Ludo.DTB.Ludo_DTB_Schema@)">
	<summary>
 Method to load a schema from 
 </summary>
	<param name="oSchem">Ludo.DTB.Ludo_DTB_Schema, our new schema</param>
	<returns>Boolean, True if done</returns>
	<remarks></remarks>
</member><member name="M:LAY_LUDO_DTB_Schema_Editor.init(Ludo.DTB.Ludo_DTB_Schema@)">
	<summary>
 Method to init the layout
 </summary>
	<param name="oSchem">Ludo.DTB.Ludo_DTB_Schema, our new schema</param>
	<returns>Boolean true if done</returns>
	<remarks>This method calls the method loadSchema</remarks>
</member><member name="M:LAY_LUDO_DTB_Schema_Editor.nodeManager">
	<summary>
 Method to manage the plot of editable when the node change
 </summary>
	<returns>Boolean, true if done</returns>
	<remarks></remarks>
</member><member name="M:LAY_LUDO_DTB_Schema_Editor.updateTable(System.Windows.Forms.TreeNode@,LAY_LUDO_DTB_Table_editor@)">
	<summary>
 Method to update the table name
 </summary>
	<param name="oNode">System.Windows.Forms.TreeNode, the node we have to fix</param>
	<param name="oLay">LAY_LUDO_DTB_Table_editor, our layout table editor</param>
	<returns>Boolean, true if done</returns>
	<remarks></remarks>
</member><member name="M:LAY_LUDO_DTB_Schema_Editor.updateModule(System.Windows.Forms.TreeNode@,LAY_LUDO_DTB_Module_editor@)">
	<summary>
 Method to update the module name
 </summary>
	<param name="oNode">System.Windows.Forms.TreeNode, the node we have to fix</param>
	<param name="oLay">LAY_LUDO_DTB_Table_editor, our layout table editor</param>
	<returns>Boolean, true if done</returns>
	<remarks></remarks>
</member><member name="M:LAY_LUDO_DTB_Schema_Editor.resetInterface">
	<summary>
 Method to clear the PNL and unselect the Tree node !
 </summary>
	<returns>Boolean, True if done</returns>
	<remarks></remarks>
</member><member name="M:LAY_LUDO_DTB_Schema_Editor.closeTableLayout(LAY_LUDO_DTB_Table_editor@)">
	<summary>
 Method to clear the PNL after close a Layout to edit table
 </summary>
	<param name="oLay">LAY_LUDO_DTB_Table_editor, our layout</param>
	<returns>Boolean, True if done</returns>
	<remarks>this method call resetInterface()</remarks>
</member><member name="M:LAY_LUDO_DTB_Schema_Editor.closeModuleLayout(LAY_LUDO_DTB_Module_editor@)">
	<summary>
 Method to clear the PNL after close a Layout to edit table
 </summary>
	<param name="oLay">LAY_LUDO_DTB_Module_editor, our layout</param>
	<returns>Boolean, True if done</returns>
	<remarks>this method call resetInterface()</remarks>
</member><member name="M:LAY_LUDO_DTB_Schema_Editor.addTable">
	<summary>
 Method to add a table
 </summary>
	<returns>Boolean, true if done</returns>
	<remarks></remarks>
</member><member name="M:LAY_LUDO_DTB_Schema_Editor.addModule">
	<summary>
 Method to add a Table
 </summary>
	<returns>Boolean, true if done</returns>
	<remarks></remarks>
</member><member name="M:LAY_LUDO_DTB_Schema_Editor.delTable">
	<summary>
 Method to delete a table
 </summary>
	<returns>Boolean, true if done</returns>
	<remarks></remarks>
</member><member name="M:LAY_LUDO_DTB_Schema_Editor.delModule">
	<summary>
 Method to delete a Module
 </summary>
	<returns>boolean, true if done</returns>
	<remarks></remarks>
</member><member name="M:LAY_LUDO_DTB_Schema_Editor.deleteBlind">
	<summary>
 Method to delete an element
 </summary>
	<returns>Boolean, true if done</returns>
	<remarks></remarks>
</member><member name="M:LAY_LUDO_DTB_Schema_Editor.TREE_Module_Table_Selected(System.Object,System.EventArgs)">
	<summary>
 Handler to manage the change of selected node
 </summary>
	<param name="sender">Object, our object than throw the event</param>
	<param name="e">EventArgs, our argument for the event</param>
	<remarks></remarks>
</member><member name="M:LAY_LUDO_DTB_Schema_Editor.BTN_Add_Module_Click(System.Object,System.EventArgs)">
	<summary>
 Handler to add a module
 </summary>
	<param name="sender">Object, our object than throw the event</param>
	<param name="e">EventArgs, our argument for the event</param>
	<remarks></remarks>
</member><member name="M:LAY_LUDO_DTB_Schema_Editor.BTN_Del_Module_Click(System.Object,System.EventArgs)">
	<summary>
 Handler to delete a Module 
 </summary>
	<param name="sender">Object, our object than throw the event</param>
	<param name="e">EventArgs, our argument for the event</param>
	<remarks></remarks>
</member><member name="M:LAY_LUDO_DTB_Schema_Editor.BTN_Add_Table_Click(System.Object,System.EventArgs)">
	<summary>
 Handler to add a tablmlme
 </summary>
	<param name="sender">Object, our object than throw the event</param>
	<param name="e">EventArgs, our argument for the event</param>
	<remarks></remarks>
</member><member name="M:LAY_LUDO_DTB_Schema_Editor.BTN_Del_Table_Click(System.Object,System.EventArgs)">
	<summary>
 Handler to delete a table
 </summary>
	<param name="sender">Object, our object than throw the event</param>
	<param name="e">EventArgs, our argument for the event</param>
	<remarks></remarks>
</member><member name="M:LAY_LUDO_DTB_Schema_Editor.OPT_Refresh_Click(System.Object,System.EventArgs)">
	<summary>
 Handler to manage the refresh the tree
 </summary>
	<param name="sender">Object, our object than throw the event</param>
	<param name="e">EventArgs, our argument for the event</param>
	<remarks></remarks>
</member><member name="M:LAY_LUDO_DTB_Schema_Editor.OPT_Clone_Click(System.Object,System.EventArgs)">
	<summary>
 Handler to manage the clone click
 <param name="sender">Object, our object than throw the event</param>
		<param name="e">EventArgs, our argument for the event</param>
	</summary>
	<remarks></remarks>
</member><member name="M:LAY_LUDO_DTB_Schema_Editor.OPT_Delete_Click(System.Object,System.EventArgs)">
	<summary>
 Handler to manage the delete event
 </summary>
	<param name="sender">Object, our object than throw the event</param>
	<param name="e">EventArgs, our argument for the event</param>
	<remarks></remarks>
</member><member name="M:LAY_LUDO_DTB_Schema_Editor.HANDLER_Update_Table(System.Object,System.EventArgs)">
	<summary>
 Handler to update the table
 </summary>
	<param name="sender">Object, our object than throw the event</param>
	<param name="e">EventArgs, our argument for the event</param>
	<remarks></remarks>
</member><member name="M:LAY_LUDO_DTB_Schema_Editor.HANDLER_Update_Module(System.Object,System.EventArgs)">
	<summary>
 Handler to update table
 </summary>
	<param name="sender">Object, our object than throw the event</param>
	<param name="e">EventArgs, our argument for the event</param>
	<remarks></remarks>
</member><member name="M:LAY_LUDO_DTB_Schema_Editor.HANDLER_Quit_Table(System.Object,System.EventArgs)">
	<summary>
 Handler to manage the quit event from table
 </summary>
	<param name="sender">Object, our object than throw the event</param>
	<param name="e">EventArgs, our argument for the event</param>
	<remarks></remarks>
</member><member name="M:LAY_LUDO_DTB_Schema_Editor.HANDLER_Quit_Module(System.Object,System.EventArgs)">
	<summary>
 Handler to manage the quit event from module
 </summary>
	<param name="sender">Object, our object than throw the event</param>
	<param name="e">EventArgs, our argument for the event</param>
	<remarks></remarks>
</member><member name="M:LAY_LUDO_DTB_Schema_Editor.#ctor">
	<summary>
 Our default builder
 </summary>
	<remarks></remarks>
</member><member name="M:LAY_LUDO_DTB_Schema_Editor.#ctor(Ludo.DTB.Ludo_DTB_Schema@)">
	<summary>
 Our builder with parameters
 </summary>
	<param name="oSchem">Ludo.DTB.Ludo_DTB_Schema, our new schema</param>
	<remarks></remarks>
</member><member name="T:LAY_LUDO_DTB_Schema_Editor">
	<summary>
 Layout to create or modify a DTB schema by module
 </summary>
	<remarks></remarks>
</member><member name="M:LAY_LUDO_MSG.setTitle(System.String)">
	<summary>
 Method to set Title
 </summary>
	<param name="sText">String, Title of our Message</param>
	<returns>Boolean, True if not nothing</returns>
	<remarks>Method test Nothing Case</remarks>
</member><member name="M:LAY_LUDO_MSG.setMsg(System.String)">
	<summary>
 Method to set Msg
 </summary>
	<param name="sText">String, Text of the Message</param>
	<returns>Boolean, True if not sText Null</returns>
	<remarks></remarks>
</member><member name="M:LAY_LUDO_MSG.setImg(System.String)">
	<summary>
 Method to set picture
 </summary>
	<param name="sText">String, Path to the image</param>
	<returns>Boolean, True if the picture is load, false either</returns>
	<remarks>False cases : sText Is Null, or file does not exists</remarks>
</member><member name="M:LAY_LUDO_MSG.setBKGD(System.String)">
	<summary>
 Method to set BackGround picture
 </summary>
	<param name="sImg">String, Path to the image File</param>
	<returns>Boolean, True if loaded, false Either</returns>
	<remarks>If the sImag Is Null or equals "", the false value is returned</remarks>
</member><member name="M:LAY_LUDO_MSG.getTitle">
	<summary>
 Method to get the title
 </summary>
	<returns>String, return the Title of the message</returns>
	<remarks></remarks>
</member><member name="M:LAY_LUDO_MSG.getMsg">
	<summary>
 Method to get the message's text
 </summary>
	<returns>String, Message's text</returns>
	<remarks></remarks>
</member><member name="M:LAY_LUDO_MSG.init(System.String,System.String,System.String)">
	<summary>
 Method to initialize the layout
 </summary>
	<param name="sTitle">String, Title of the message</param>
	<param name="sMsg">String, Text of The Message</param>
	<param name="sImg">String, Image of the message</param>
	<returns>Boolean, return True if one of the 3 parameters have been initialized</returns>
	<remarks></remarks>
</member><member name="M:LAY_LUDO_MSG.init(Ludo.MSG.Ludo_Msg,System.String)">
	<summary>
 Method to initialize the layout, if you've got a Ludo.MSG.Ludo_Msg object and a lang
 </summary>
	<param name="oMsg">Ludo.MSG.Ludo_Msg, Message object</param>
	<param name="sLang">String, Language Like "en" for English</param>
	<returns>Boolean, True if initialized</returns>
	<remarks>If oMsg Is Null, rise exception</remarks>
</member><member name="M:LAY_LUDO_MSG.#ctor">
	<summary>
 Builder by default
 </summary>
	<remarks></remarks>
</member><member name="M:LAY_LUDO_MSG.#ctor(System.String,System.String,System.String)">
	<summary>
 Builder with detailed paramters
 </summary>
	<param name="sTitle">String, Title of the message</param>
	<param name="sMsg">String, Text of The Message</param>
	<param name="sImg">String, Image of the message</param>
	<remarks>This builder call init(ByVal sTitle As String, ByVal sMsg As String, ByVal sImg As String) Method !</remarks>
</member><member name="M:LAY_LUDO_MSG.#ctor(Ludo.MSG.Ludo_Msg,System.String)">
	<summary>
 Builders, if you've got a Ludo.MSG.Ludo_Msg object and a lang
 </summary>
	<param name="oMsg">Ludo.MSG.Ludo_Msg, Message object</param>
	<param name="sLang">String, Language Like "en" for English</param>
	<remarks>This builder call init(ByVal oMsg As Ludo.MSG.Ludo_Msg, ByVal sLang As String) Method, so could rise exceptions</remarks>
</member><member name="T:LAY_LUDO_MSG">
	<summary>
 Layout to see Msg
 </summary>
	<remarks></remarks>
</member><member name="F:WIN_LUDO_XML_Analyzer.oLAY_XML_Analyser">
	<summary>
 Our layout to analyze the xml trader
 </summary>
	<remarks></remarks>
</member><member name="M:WIN_LUDO_XML_Analyzer.init(System.String)">
	<summary>
 Method to init the windows
 </summary>
	<param name="sFilename">String, our filename</param>
	<returns>Boolean, True if done</returns>
	<remarks></remarks>
</member><member name="M:WIN_LUDO_XML_Analyzer.HANDLER_Quit(System.Object,System.EventArgs)">
	<summary>
 Handler to manage the quit event
 </summary>
	<param name="sender">Object, sender</param>
	<param name="e">Eventargs, arguments</param>
	<remarks></remarks>
</member><member name="M:WIN_LUDO_XML_Analyzer.#ctor">
	<summary>
 Private builder
 </summary>
	<remarks></remarks>
</member><member name="M:WIN_LUDO_XML_Analyzer.#ctor(System.String)">
	<summary>
 builder
 </summary>
	<param name="sFilename">[OPTIONAL] String, our file name</param>
	<remarks></remarks>
</member><member name="T:WIN_LUDO_XML_Analyzer">
	<summary>
 Windows to manage a xml File
 </summary>
	<remarks></remarks>
</member><member name="T:Ludo.INI.Consts">
	<summary>
 Module to manage the ini const
 </summary>
	<remarks></remarks>
</member><member name="M:Ludo.INI.Fcts.IsStrIniGood(System.String)">
	<summary>
 Function to see if str is good for ini
 </summary>
	<param name="sStr">String, our string to check</param>
	<returns>Boolean, true if done</returns>
	<remarks></remarks>
</member><member name="M:Ludo.INI.Fcts.WriteIniComment(System.IO.StreamWriter@,System.String)">
	<summary>
 Function to Write Comment :)
 </summary>
	<param name="oWriter">System.IO.StreamWriter, the stream to write</param>
	<param name="sComment">String, the comment</param>
	<returns>Boolean, true if done</returns>
	<remarks></remarks>
</member><member name="M:Ludo.INI.Fcts.IniRead(System.String,System.String,System.String,System.String)">
	<summary>
 Function to read in a ini file without use the class
 </summary>
	<param name="sFileName">String, the file name</param>
	<param name="sSection">String, the section</param>
	<param name="sKey">String, the Key</param>
	<param name="sDefaultValue">String, the default value</param>
	<returns>String, the seeked value</returns>
	<remarks>This function creates a Ludo_Ini and calls the method iniRead</remarks>
</member><member name="M:Ludo.INI.Fcts.IniRead_Integer(System.String,System.String,System.String,System.Int32)">
	<summary>
 Function to read in a ini file as integer without use the class
 </summary>
	<param name="sFileName">String, the file name</param>
	<param name="sSection">String, the section</param>
	<param name="sKey">String, the Key</param>
	<param name="nDefaultValue">Integer, the default value</param>
	<returns>Integer, the seeked value</returns>
	<remarks>this function calls IniRead and Integer.TryParse</remarks>
</member><member name="M:Ludo.INI.Fcts.IniWrite(System.String,System.String,System.String,System.String,System.Windows.Forms.ProgressBar@)">
	<summary>
 Function to read in a ini file without use the class
 </summary>
	<param name="sFileName">String, the file name</param>
	<param name="sSection">String, the section</param>
	<param name="sKey">String, the Key</param>
	<param name="sValue">string, the value</param>
	<param name="PG_Ini">[OPTIONAL] ProgressBar, show the save ... useless</param>
	<returns>Boolean, true if done</returns>
	<remarks></remarks>
</member><member name="T:Ludo.INI.Fcts">
	<summary>
 Module to manage the easy function of INIT
 </summary>
	<remarks></remarks>
</member><member name="F:Ludo.INI.Ludo_Ini.lst_oSections">
	<summary>
 List of the section :o
 </summary>
	<remarks></remarks>
</member><member name="F:Ludo.INI.Ludo_Ini.sComment">
	<summary>
 our comment :p
 </summary>
	<remarks></remarks>
</member><member name="M:Ludo.INI.Ludo_Ini.setComment(System.String)">
	<summary>
 Method to set the comment
 </summary>
	<param name="sStr">string, our comment</param>
	<returns>Boolean, true if done</returns>
	<remarks></remarks>
</member><member name="M:Ludo.INI.Ludo_Ini.setValue(System.String,System.String,System.String)">
	<summary>
 Method to set a Value in a key, in a section
 </summary>
	<param name="sSection">String, the section</param>
	<param name="sKey">String, the Key</param>
	<param name="sValue">string, the value</param>
	<returns>Boolean, true if done</returns>
	<remarks></remarks>
</member><member name="M:Ludo.INI.Ludo_Ini.getComment">
	<summary>
 Method to get the comment
 </summary>
	<returns>String, our comment</returns>
	<remarks></remarks>
</member><member name="M:Ludo.INI.Ludo_Ini.getNumberOfSections">
	<summary>
 Method to obtain the number of section
 </summary>
	<returns>integer, our number of sections</returns>
	<remarks></remarks>
</member><member name="M:Ludo.INI.Ludo_Ini.getNumberOfKeys">
	<summary>
 Method to obtain the number of Keys
 </summary>
	<returns>integer, number of keys</returns>
	<remarks></remarks>
</member><member name="M:Ludo.INI.Ludo_Ini.getSections">
	<summary>
 Method to get the list of section Name :p
 </summary>
	<returns>List (Of string), our section names</returns>
	<remarks></remarks>
</member><member name="M:Ludo.INI.Ludo_Ini.hasSection(System.String)">
	<summary>
 Method to know if the Ini has a section with this Name :p
 </summary>
	<param name="sStr">string, section name</param>
	<returns>Boolean, true if done</returns>
	<remarks></remarks>
</member><member name="M:Ludo.INI.Ludo_Ini.getValue(System.String,System.String)">
	<summary>
 Method to get a Value in a key, in a section
 </summary>
	<param name="sSection">String, the section</param>
	<param name="sKey">String, the Key</param>
	<returns>STring, the value</returns>
	<remarks></remarks>
</member><member name="M:Ludo.INI.Ludo_Ini.Load(System.String)">
	<summary>
 Method to load an Ini file
 </summary>
	<param name="sFileName">String, the filename</param>
	<returns>Boolean, true if done</returns>
	<remarks></remarks>
</member><member name="M:Ludo.INI.Ludo_Ini.Save(System.String,System.Windows.Forms.ProgressBar@)">
	<summary>
 Method to Save our Ini File
 </summary>
	<param name="sFileName">String, the file name</param>
	<param name="PG_Progress">[OPTIONAL] ProgressBar, show the progrss ?</param>
	<returns>Boolean, true if done</returns>
	<remarks></remarks>
</member><member name="M:Ludo.INI.Ludo_Ini.Add(Ludo.INI.Ludo_Section@)">
	<summary>
 Method to add a section
 </summary>
	<param name="oSection">Ludo.INI.Ludo_Section, our section</param>
	<returns>boolean, True if done</returns>
	<remarks></remarks>
</member><member name="M:Ludo.INI.Ludo_Ini.Add(System.String@)">
	<summary>
 Method to add a section with its name :p
 </summary>
	<param name="sStr">String, section name</param>
	<returns>Boolean, true if done</returns>
	<remarks>this method calls add with Ludo.INI.Ludo_Section parameters</remarks>
</member><member name="M:Ludo.INI.Ludo_Ini.delete(System.String)">
	<summary>
 Method to delete a section from its name
 </summary>
	<param name="sSection">String, our section name</param>
	<returns>Boolean, true if done</returns>
	<remarks></remarks>
</member><member name="M:Ludo.INI.Ludo_Ini.AddKey(System.String,Ludo.INI.Ludo_Ini_Key_Value@)">
	<summary>
 Method to add into a section a Keys from object to a section
 </summary>
	<param name="sSection">String, our section name</param>
	<param name="oKV">Ludo.INI.Ludo_Ini_Key_Value, key-value to add</param>
	<returns>Boolean, True if done</returns>
	<remarks></remarks>
</member><member name="M:Ludo.INI.Ludo_Ini.AddKey(System.String,System.String,System.String)">
	<summary>
 Method to add to a section a Keys from Strings
 </summary>
	<param name="sSection">String, our section</param>
	<param name="sKey">String, the Key</param>
	<param name="sValue">String, the Value</param>
	<returns>Boolean, true if done</returns>
	<remarks>This method calls the method AddKey with Ludo.INI.Ludo_INI_Key_Value</remarks>
</member><member name="M:Ludo.INI.Ludo_Ini.deleteKey(System.String,System.String)">
	<summary>
 Method to delete a Key From aSection
 </summary>
	<param name="sSection">String, our section</param>
	<param name="sKey">String, our key</param>
	<returns>Boolean, true if done</returns>
	<remarks></remarks>
</member><member name="M:Ludo.INI.Ludo_Ini.iniWrite(System.String,System.String,System.String)">
	<summary>
 Method to set a Value in a key, in a section
 if Section don't exists, create it
 if Key don't exits, create it
 if Value equals empty string, delete Keys, and if Section become empty, section too
 </summary>
	<param name="sSection">String, the section</param>
	<param name="sKey">String, the Key</param>
	<param name="sValue">String, the Value</param>
	<returns>Boolean, true if done</returns>
	<remarks></remarks>
</member><member name="M:Ludo.INI.Ludo_Ini.iniRead(System.String,System.String,System.String)">
	<summary>
 Method to get a Value in a key, in a section
 if Section don't exists, return default value
 if Key don't exits, return default value
 if Value equals empty string, return default value
 </summary>
	<param name="sSection">String, our section</param>
	<param name="sKey">String, the Key</param>
	<param name="sValue">String, the Value</param>
	<returns>String, the value</returns>
	<remarks></remarks>
</member><member name="M:Ludo.INI.Ludo_Ini.#ctor">
	<summary>
 Default builder
 </summary>
	<remarks></remarks>
</member><member name="M:Ludo.INI.Ludo_Ini.#ctor(System.String)">
	<summary>
 Builder with load function
 </summary>
	<param name="sFileName">String, our Filename</param>
	<remarks>This builder calls the method load</remarks>
</member><member name="T:Ludo.INI.Ludo_Ini">
	<summary>
 Class to manage INI Files
 </summary>
	<remarks>Windows init files</remarks>
</member><member name="F:Ludo.DTB.Ludo_DTB_CODE_MAKER.sPrefixe">
	<summary>
 Prefixe for generation
 </summary>
	<remarks></remarks>
</member><member name="F:Ludo.DTB.Ludo_DTB_CODE_MAKER.oSch">
	<summary>
 Our Schem
 </summary>
	<remarks></remarks>
</member><member name="M:Ludo.DTB.Ludo_DTB_CODE_MAKER.getPrefixe">
	<summary>
 Method to get the prefixe
 </summary>
	<returns>string, our prefixe</returns>
	<remarks></remarks>
</member><member name="M:Ludo.DTB.Ludo_DTB_CODE_MAKER.getDescription">
	<summary>
 Method to get the Description of the Codemaker Class
 </summary>
	<returns>string, our description</returns>
	<remarks></remarks>
</member><member name="M:Ludo.DTB.Ludo_DTB_CODE_MAKER.getSchema">
	<summary>
 Method to get our Schema
 </summary>
	<returns>Ludo.DTB.Ludo_DTB_Schema, our schema</returns>
	<remarks></remarks>
</member><member name="M:Ludo.DTB.Ludo_DTB_CODE_MAKER.setPrefixe(System.String)">
	<summary>
 Method to set the prefixe
 </summary>
	<param name="sStr">string, our new prefixe</param>
	<returns>boolean, true if done</returns>
	<remarks></remarks>
</member><member name="M:Ludo.DTB.Ludo_DTB_CODE_MAKER.setSchema(Ludo.DTB.Ludo_DTB_Schema@)">
	<summary>
 Method to set our schema
 </summary>
	<param name="oSchema">Ludo.DTB.Ludo_DTB_Schema, our schema</param>
	<returns>boolean, true if done</returns>
	<remarks></remarks>
</member><member name="M:Ludo.DTB.Ludo_DTB_CODE_MAKER.generate(System.String,System.Windows.Forms.ProgressBar@,System.Windows.Forms.Label@,System.Windows.Forms.ProgressBar@)">
	<summary>
 Method to generate the code from Schem
 </summary>
	<param name="sPath">string, our path</param>
	<param name="PG_Modules">[OPTIONAL] System.Windows.Forms.ProgressBar, progress bar for module indication</param>
	<param name="LAB_Modules">[OPTIONAL] System.Windows.Forms.Label, Lab to named current module generated</param>
	<param name="PG_Table">[OPTIONAL] System.Windows.Forms.ProgressBar, progress bar for table indication in a module</param>
	<returns>Boolean, true if done</returns>
	<remarks></remarks>
</member><member name="M:Ludo.DTB.Ludo_DTB_CODE_MAKER.retro(System.Collections.Generic.List{System.String},System.Windows.Forms.ProgressBar@,System.Windows.Forms.Label@)">
	<summary>
 Method to generate schem from code
 </summary>
	<param name="lst_sFile">List(Of string), our file name for retro</param>
	<param name="PG_Modules">[OPTIONAL] System.Windows.Forms.ProgressBar, progress bar for module indication</param>
	<param name="LAB_Modules">[OPTIONAL] System.Windows.Forms.Label, Lab to named current module generated</param>
	<returns>Boolean, true if done</returns>
	<remarks></remarks>
</member><member name="M:Ludo.DTB.Ludo_DTB_CODE_MAKER.ToString">
	<summary>
 To String overrides
 </summary>
	<returns>string, comment on the class generator</returns>
	<remarks></remarks>
</member><member name="T:Ludo.DTB.Ludo_DTB_CODE_MAKER">
	<summary>
 Class you must use to create your own code maker
 </summary>
	<remarks></remarks>
</member><member name="F:Ludo.DTB.Ludo_DTB_CODE_MAKER_SQL.sFilename">
	<summary>
 Our filename to print the creation
 </summary>
	<remarks></remarks>
</member><member name="M:Ludo.DTB.Ludo_DTB_CODE_MAKER_SQL.getDescription">
	<summary>
 Method to get the description
 </summary>
	<returns>String, Description</returns>
	<remarks></remarks>
</member><member name="M:Ludo.DTB.Ludo_DTB_CODE_MAKER_SQL.getsFilename">
	<summary>
 Method to get the name of the filename generated by class
 </summary>
	<returns>String, filename</returns>
	<remarks></remarks>
</member><member name="M:Ludo.DTB.Ludo_DTB_CODE_MAKER_SQL.setsFilename(System.String)">
	<summary>
 Method to set the filename we want to generate
 </summary>
	<param name="sName">String, our name</param>
	<returns>Boolean, True if done </returns>
	<remarks></remarks>
</member><member name="M:Ludo.DTB.Ludo_DTB_CODE_MAKER_SQL.GenerateColumn(Ludo.DTB.Ludo_DTB_Column@,System.IO.StreamWriter@,System.Boolean)">
	<summary>
 Method to generate a Column
 </summary>
	<param name="oColumn">Ludo.DTB.Ludo_DTB_Column, our column</param>
	<param name="oStream">System.IO.StreamWriter, our file to write</param>
	<param name="bNext">boolean, add the boolean flag or not</param>
	<returns>Boolean, true if done</returns>
	<remarks>Overridable</remarks>
</member><member name="M:Ludo.DTB.Ludo_DTB_CODE_MAKER_SQL.GenerateTable(Ludo.DTB.Ludo_DTB_Table@,System.IO.StreamWriter@)">
	<summary>
 Method to generate the table
 </summary>
	<param name="oTable">Ludo.DTB.Ludo_DTB_Table, our table</param>
	<param name="oStream">System.IO.StreamWriter, our stream to write</param>
	<returns>Boolean, true if done</returns>
	<remarks></remarks>
</member><member name="M:Ludo.DTB.Ludo_DTB_CODE_MAKER_SQL.GenerateModule(Ludo.DTB.Ludo_DTB_Module@,System.IO.StreamWriter@,System.Windows.Forms.Label@,System.Windows.Forms.ProgressBar@)">
	<summary>
 Method to generate a module
 </summary>
	<param name="oModule">Ludo.DTB.Ludo_DTB_Module, our module</param>
	<param name="oStream">System.IO.StreamWriter, stream to write</param>
	<param name="LAB_Modules">[OPTIONAL] System.Windows.Forms.Label, Lab to named current module generated</param>
	<param name="PG_Table">[OPTIONAL] System.Windows.Forms.ProgressBar, progress bar for table indication in a module</param>
	<returns>boolean, true if done</returns>
	<remarks></remarks>
</member><member name="M:Ludo.DTB.Ludo_DTB_CODE_MAKER_SQL.generate(System.String,System.Windows.Forms.ProgressBar@,System.Windows.Forms.Label@,System.Windows.Forms.ProgressBar@)">
	<summary>
 Method to generate the code from Schem
 </summary>
	<param name="sPath">string, our path</param>
	<param name="PG_Modules">[OPTIONAL] System.Windows.Forms.ProgressBar, progress bar for module indication</param>
	<param name="LAB_Modules">[OPTIONAL] System.Windows.Forms.Label, Lab to named current module generated</param>
	<param name="PG_Table">[OPTIONAL] System.Windows.Forms.ProgressBar, progress bar for table indication in a module</param>
	<returns>Boolean, true if done</returns>
	<remarks>It's an override !!!</remarks>
</member><member name="M:Ludo.DTB.Ludo_DTB_CODE_MAKER_SQL.ToString">
	<summary>
 To String override
 </summary>
	<returns>string, our tostring info</returns>
	<remarks></remarks>
</member><member name="T:Ludo.DTB.Ludo_DTB_CODE_MAKER_SQL">
	<summary>
 Class to create your SQL Code
 </summary>
	<remarks></remarks>
</member><member name="M:Ludo.DTB.Ludo_DTB_CODE_MAKER_SQL_MySql.getDescription">
	<summary>
 Method to get the description
 </summary>
	<returns>string, our description</returns>
	<remarks></remarks>
</member><member name="M:Ludo.DTB.Ludo_DTB_CODE_MAKER_SQL_MySql.GenerateColumn(Ludo.DTB.Ludo_DTB_Column@,System.IO.StreamWriter@,System.Boolean)">
	<summary>
 Method to generate a Column
 </summary>
	<param name="oColumn">Ludo.DTB.Ludo_DTB_Column, our column</param>
	<param name="oStream">System.IO.StreamWriter, our file to write</param>
	<param name="bNext">boolean, add the boolean flag or not</param>
	<returns>Boolean, true if done</returns>
	<remarks>it's an override</remarks>
</member><member name="M:Ludo.DTB.Ludo_DTB_CODE_MAKER_SQL_MySql.GenerateTable(Ludo.DTB.Ludo_DTB_Table@,System.IO.StreamWriter@)">
	<summary>
 Method to generate the table
 </summary>
	<param name="oTable">Ludo.DTB.Ludo_DTB_Table, our table</param>
	<param name="oStream">System.IO.StreamWriter, our stream to write</param>
	<returns>Boolean, true if done</returns>
	<remarks>It's an override</remarks>
</member><member name="M:Ludo.DTB.Ludo_DTB_CODE_MAKER_SQL_MySql.ToString">
	<summary>
 To String override
 </summary>
	<returns>string, our tostring info</returns>
	<remarks></remarks>
</member><member name="T:Ludo.DTB.Ludo_DTB_CODE_MAKER_SQL_MySql">
	<summary>
 Class to create your SQL Code for MySql
 </summary>
	<remarks></remarks>
</member><member name="M:Ludo.DTB.Ludo_DTB_CODE_MAKER_SQL_SqlServer.getDescription">
	<summary>
 Method to get the description
 </summary>
	<returns>String, Description</returns>
	<remarks></remarks>
</member><member name="M:Ludo.DTB.Ludo_DTB_CODE_MAKER_SQL_SqlServer.GenerateColumn(Ludo.DTB.Ludo_DTB_Column@,System.IO.StreamWriter@,System.Boolean)">
	<summary>
 Method to generate a Column
 </summary>
	<param name="oColumn">Ludo.DTB.Ludo_DTB_Column, our column</param>
	<param name="oStream">System.IO.StreamWriter, our file to write</param>
	<param name="bNext">boolean, add the boolean flag or not</param>
	<returns>Boolean, true if done</returns>
	<remarks>It's an override</remarks>
</member><member name="M:Ludo.DTB.Ludo_DTB_CODE_MAKER_SQL_SqlServer.ToString">
	<summary>
 To String override
 </summary>
	<returns>string, our tostring info</returns>
	<remarks></remarks>
</member><member name="T:Ludo.DTB.Ludo_DTB_CODE_MAKER_SQL_SqlServer">
	<summary>
 Class to create your SQL Code for SqlServer
 </summary>
	<remarks></remarks>
</member><member name="M:Ludo.DTB.Ludo_DTB_CODE_MAKER_SQL_SqlServerCE.getDescription">
	<summary>
 Method to get the description
 </summary>
	<returns>String, Description</returns>
	<remarks>It's an override</remarks>
</member><member name="M:Ludo.DTB.Ludo_DTB_CODE_MAKER_SQL_SqlServerCE.GenerateColumn(Ludo.DTB.Ludo_DTB_Column@,System.IO.StreamWriter@,System.Boolean)">
	<summary>
 Method to generate a Column
 </summary>
	<param name="oColumn">Ludo.DTB.Ludo_DTB_Column, our column</param>
	<param name="oStream">System.IO.StreamWriter, our file to write</param>
	<param name="bNext">boolean, add the boolean flag or not</param>
	<returns>Boolean, true if done</returns>
	<remarks>It's an override</remarks>
</member><member name="M:Ludo.DTB.Ludo_DTB_CODE_MAKER_SQL_SqlServerCE.ToString">
	<summary>
 To String override
 </summary>
	<returns>string, our tostring info</returns>
	<remarks></remarks>
</member><member name="T:Ludo.DTB.Ludo_DTB_CODE_MAKER_SQL_SqlServerCE">
	<summary>
 Class to create your SQL Code for SqlServerCE
 </summary>
	<remarks></remarks>
</member><member name="M:Ludo.DTB.Ludo_DTB_CODE_MAKER_SQL_POSTGRE.getDescription">
	<summary>
 Method to get the description
 </summary>
	<returns>string, the description</returns>
	<remarks>It's an override</remarks>
</member><member name="M:Ludo.DTB.Ludo_DTB_CODE_MAKER_SQL_POSTGRE.GenerateColumn(Ludo.DTB.Ludo_DTB_Column@,System.IO.StreamWriter@,System.Boolean)">
	<summary>
 Method to generate a Column
 </summary>
	<param name="oColumn">Ludo.DTB.Ludo_DTB_Column, our column</param>
	<param name="oStream">System.IO.StreamWriter, our file to write</param>
	<param name="bNext">boolean, add the boolean flag or not</param>
	<returns>Boolean, true if done</returns>
	<remarks>It's an override</remarks>
</member><member name="M:Ludo.DTB.Ludo_DTB_CODE_MAKER_SQL_POSTGRE.GenerateCommentOnColumn(Ludo.DTB.Ludo_DTB_Table@,Ludo.DTB.Ludo_DTB_Column@)">
	<summary>
 Method to create a comment on column
 </summary>
	<param name="oTable">Ludo.DTB.Ludo_DTB_Table, our table</param>
	<param name="oColumn">Ludo.DTB.Ludo_DTB_Column, our column</param>
	<returns>String, our comment</returns>
	<remarks>Overridable</remarks>
</member><member name="M:Ludo.DTB.Ludo_DTB_CODE_MAKER_SQL_POSTGRE.GenerateCommentOnTable(Ludo.DTB.Ludo_DTB_Table@)">
	<summary>
 Method to create a comment on table
 </summary>
	<param name="oTable">Ludo.DTB.Ludo_DTB_Table, our table</param>
	<returns>String, our comment</returns>
	<remarks>Overridable</remarks>
</member><member name="M:Ludo.DTB.Ludo_DTB_CODE_MAKER_SQL_POSTGRE.GenerateTable(Ludo.DTB.Ludo_DTB_Table@,System.IO.StreamWriter@)">
	<summary>
 Method to generate the table
 </summary>
	<param name="oTable">Ludo.DTB.Ludo_DTB_Table, our table</param>
	<param name="oStream">System.IO.StreamWriter, our stream to write</param>
	<returns>Boolean, true if done</returns>
	<remarks>It's an override</remarks>
</member><member name="M:Ludo.DTB.Ludo_DTB_CODE_MAKER_SQL_POSTGRE.ToString">
	<summary>
 To String override
 </summary>
	<returns>string, our tostring info</returns>
	<remarks></remarks>
</member><member name="T:Ludo.DTB.Ludo_DTB_CODE_MAKER_SQL_POSTGRE">
	<summary>
 Class to create your SQL Code for PostGreSQL
 </summary>
	<remarks></remarks>
</member><member name="M:Ludo.DTB.Ludo_DTB_CODE_MAKER_VB_NET_LUDO.getDescription">
	<summary>
 Method to get the Description of the Codemaker Class
 </summary>
	<returns>String, the description</returns>
	<remarks></remarks>
</member><member name="M:Ludo.DTB.Ludo_DTB_CODE_MAKER_VB_NET_LUDO.writeMember(Ludo.DTB.Ludo_DTB_Column@,System.IO.StreamWriter@,System.Int32,System.String)">
	<summary>
 Method to write Members declaration
 </summary>
	<param name="oColumn">Ludo.DTB.Ludo_DTB_Column, our column for the member</param>
	<param name="oStream">System.IO.StreamWriter, our stream to write</param>
	<param name="nLanguage">[OPTIONAL] integer, the language</param>
	<param name="sInherit">[OPTIONAL] string, inherit path</param>
	<returns>Boolean, true if done</returns>
	<remarks></remarks>
</member><member name="M:Ludo.DTB.Ludo_DTB_CODE_MAKER_VB_NET_LUDO.createGet(Ludo.DTB.Ludo_DTB_Column@,System.Int32,System.String)">
	<summary>
 Method to generate Method get
 </summary>
	<param name="oColumn">Ludo.DTB.Ludo_DTB_Column, our column for the member</param>
	<param name="nLanguage">[OPTIONAL] integer, the language</param>
	<param name="sInherit">[OPTIONAL] string, inherit path</param>
	<returns>string, The code</returns>
	<remarks></remarks>
</member><member name="M:Ludo.DTB.Ludo_DTB_CODE_MAKER_VB_NET_LUDO.createSet(Ludo.DTB.Ludo_DTB_Column@,System.Int32,System.String)">
	<summary>
 Method to generate Method set
 </summary>
	<param name="oColumn">Ludo.DTB.Ludo_DTB_Column, our column for the member</param>
	<param name="nLanguage">[OPTIONAL] integer, the language</param>
	<param name="sInherit">[OPTIONAL] string, inherit path</param>
	<returns>string, The code</returns>
	<remarks></remarks>
</member><member name="M:Ludo.DTB.Ludo_DTB_CODE_MAKER_VB_NET_LUDO.write_Shared_ImportsCSV(Ludo.DTB.Ludo_DTB_Table@,System.Collections.Generic.List{System.String},System.Boolean)">
	<summary>
 Method to generate the public imports From CSV Shared Method
 </summary>
	<param name="oTable">Ludo.DTB.Ludo_DTB_Table, our table</param>
	<param name="lst_s">lst_s As List(Of String)</param>
	<param name="bOrigin">[OPTIONAL] boolean, mark the origin</param>
	<returns>string, our code</returns>
	<remarks></remarks>
</member><member name="M:Ludo.DTB.Ludo_DTB_CODE_MAKER_VB_NET_LUDO.writeInsertSql(Ludo.DTB.Ludo_DTB_Table@,System.Collections.Generic.List{System.String},System.Boolean)">
	<summary>
 Method to generate amazing Insert sql
 </summary>
	<param name="oTable">Ludo.DTB.Ludo_DTB_Table, our table</param>
	<param name="lst_s">lst_s As List(Of String)</param>
	<param name="bOrigin">[OPTIONAL]boolean, Overridable or Overrides ?</param>
	<returns>string, our code</returns>
	<remarks></remarks>
</member><member name="M:Ludo.DTB.Ludo_DTB_CODE_MAKER_VB_NET_LUDO.writeInsert(System.Boolean)">
	<summary>
 Method to generate amazing Insert
 </summary>
	<param name="bOrigin">[OPTIONAL]boolean, Overridable or Overrides ?</param>
	<returns>string, the code</returns>
	<remarks></remarks>
</member><member name="M:Ludo.DTB.Ludo_DTB_CODE_MAKER_VB_NET_LUDO.writeUpdateSql(Ludo.DTB.Ludo_DTB_Table@,System.Collections.Generic.List{System.String},System.Boolean)">
	<summary>
 Method to generate amazing Update sql
 </summary>
	<param name="oTable">Ludo.DTB.Ludo_DTB_Table, our table</param>
	<param name="lst_s">lst_s As List(Of String)</param>
	<param name="bOrigin">[OPTIONAL]boolean, Overridable or Overrides ?</param>
	<returns>string, our code</returns>
	<remarks></remarks>
</member><member name="M:Ludo.DTB.Ludo_DTB_CODE_MAKER_VB_NET_LUDO.writeUpdate(System.Boolean)">
	<summary>
 Method to generate amazing Update
 </summary>
	<param name="bOrigin">[OPTIONAL]boolean, Overridable or Overrides ?</param>
	<returns>string, the code</returns>
	<remarks></remarks>
</member><member name="M:Ludo.DTB.Ludo_DTB_CODE_MAKER_VB_NET_LUDO.writeSelectSQL_Part_SELECT(Ludo.DTB.Ludo_DTB_Table@,System.Collections.Generic.List{System.String},System.Boolean)">
	<summary>
 Method to generate method to create The Select part of the Select Query
 </summary>
	<param name="oTable">Ludo.DTB.Ludo_DTB_Table, our table</param>
	<param name="lst_s">lst_s As List(Of String)</param>
	<param name="bOrigin">[OPTIONAL]boolean, Overridable or Overrides ?</param>
	<returns>string, our code</returns>
	<remarks></remarks>
</member><member name="M:Ludo.DTB.Ludo_DTB_CODE_MAKER_VB_NET_LUDO.writeSelectSQL_Part_FROM(Ludo.DTB.Ludo_DTB_Table@,System.Boolean)">
	<summary>
 Method to generate method to create The From part of the Select Query
 </summary>
	<param name="oTable">Ludo.DTB.Ludo_DTB_Table, our table</param>
	<param name="bOrigin">[OPTIONAL]boolean, Overridable or Overrides ?</param>
	<returns>string, our code</returns>
	<remarks></remarks>
</member><member name="M:Ludo.DTB.Ludo_DTB_CODE_MAKER_VB_NET_LUDO.writeSelectSQL(System.Boolean)">
	<summary>
 Method to generate amazing Select sql
 </summary>
	<param name="bOrigin">[OPTIONAL]boolean, Overridable or Overrides ?</param>
	<returns>string, our code</returns>
	<remarks></remarks>
</member><member name="M:Ludo.DTB.Ludo_DTB_CODE_MAKER_VB_NET_LUDO.writeLoad(Ludo.DTB.Ludo_DTB_Table@,System.Collections.Generic.List{System.String},System.Boolean)">
	<summary>
 Method to generate amazing Load
 </summary>
	<param name="oTable">Ludo.DTB.Ludo_DTB_Table, our table</param>
	<param name="lst_s">lst_s As List(Of String)</param>
	<param name="bOrigin">[OPTIONAL]boolean, Overridable or Overrides ?</param>
	<returns>string, our code</returns>
	<remarks></remarks>
</member><member name="M:Ludo.DTB.Ludo_DTB_CODE_MAKER_VB_NET_LUDO.writeSelect(System.Boolean)">
	<summary>
 Method to generate amazing Select
 </summary>
	<param name="bOrigin">[OPTIONAL]boolean, Overridable or Overrides ?</param>
	<returns>string, the code</returns>
	<remarks></remarks>
</member><member name="M:Ludo.DTB.Ludo_DTB_CODE_MAKER_VB_NET_LUDO.writeSave(System.Boolean)">
	<summary>
 Method to generate amazing save
 </summary>
	<param name="bOrigin">[OPTIONAL]boolean, Overridable or Overrides ?</param>
	<returns>string, the code</returns>
	<remarks></remarks>
</member><member name="M:Ludo.DTB.Ludo_DTB_CODE_MAKER_VB_NET_LUDO.writeAmazing(Ludo.DTB.Ludo_DTB_Table@,System.Collections.Generic.List{System.String},System.Boolean)">
	<summary>
 Method to generate amazing's method
 </summary>
	<param name="oTable">Ludo.DTB.Ludo_DTB_Table, our table</param>
	<param name="lst_s">lst_s As List(Of String)</param>
	<param name="bOrigin">[OPTIONAL]boolean, Overridable or Overrides ?</param>
	<returns>string, our code</returns>
	<remarks></remarks>
</member><member name="M:Ludo.DTB.Ludo_DTB_CODE_MAKER_VB_NET_LUDO.writeClassDeclaration(Ludo.DTB.Ludo_DTB_Table@,System.IO.StreamWriter@,System.Int32,System.String)">
	<summary>
 Method to write class Declaration
 </summary>
	<param name="oTable">Ludo.DTB.Ludo_DTB_Table, our table</param>
	<param name="oStream">System.IO.StreamWriter, our stream to write</param>
	<param name="nLanguage">[OPTIONAL] integer, the language</param>
	<param name="sInherit">[OPTIONAL] string, inherit path</param>
	<returns>Boolean, true if done</returns>
	<remarks></remarks>
</member><member name="M:Ludo.DTB.Ludo_DTB_CODE_MAKER_VB_NET_LUDO.writeIncludes(Ludo.DTB.Ludo_DTB_Table@,System.IO.StreamWriter@,System.Int32)">
	<summary>
 Method to write includes
 </summary>
	<param name="oTable">Ludo.DTB.Ludo_DTB_Table, our table</param>
	<param name="oStream">System.IO.StreamWriter, our stream to write</param>
	<param name="nLanguage">[OPTIONAL] integer, the language</param>
	<returns>Boolean, true if done</returns>
	<remarks></remarks>
</member><member name="M:Ludo.DTB.Ludo_DTB_CODE_MAKER_VB_NET_LUDO.writeCodeIntroduction(Ludo.DTB.Ludo_DTB_Table@,System.IO.StreamWriter@,System.Int32,System.String)">
	<summary>
 Method to write file code Introduction
 </summary>
	<param name="oTable">Ludo.DTB.Ludo_DTB_Table, our table</param>
	<param name="oStream">System.IO.StreamWriter, our stream to write</param>
	<param name="nLanguage">[OPTIONAL] integer, the language</param>
	<param name="sFilename"></param>
	<returns>Boolean, true if done</returns>
	<remarks></remarks>
</member><member name="M:Ludo.DTB.Ludo_DTB_CODE_MAKER_VB_NET_LUDO.writeLogHeader(System.IO.StreamWriter@,System.Int32)">
	<summary>
 Method to write the log header in a file
 </summary>
	<param name="oStream">System.IO.StreamWriter, our stream to write</param>
	<param name="nLanguage">[OPTIONAL] integer, the language</param>
	<returns>Boolean, true if done</returns>
	<remarks></remarks>
</member><member name="M:Ludo.DTB.Ludo_DTB_CODE_MAKER_VB_NET_LUDO.generateTable(System.String,Ludo.DTB.Ludo_DTB_Table@,System.IO.StreamWriter@)">
	<summary>
 Method to generate the Table
 </summary>
	<param name="sPath">string, the path file</param>
	<param name="oTable">Ludo.DTB.Ludo_DTB_Table, our table</param>
	<param name="oLog">[OPTIONAL] System.IO.StreamWriter, log file</param>
	<returns>Boolean, true if done</returns>
	<remarks></remarks>
</member><member name="M:Ludo.DTB.Ludo_DTB_CODE_MAKER_VB_NET_LUDO.generateModule(System.String,Ludo.DTB.Ludo_DTB_Module@,System.IO.StreamWriter@,System.Windows.Forms.Label@,System.Windows.Forms.ProgressBar@)">
	<summary>
 Method to generate the Module
 </summary>
	<param name="sPath">string, the path file</param>
	<param name="oModule">Ludo.DTB.Ludo_DTB_Modul, our module to write</param>
	<param name="oLog">[OPTIONAL] System.IO.StreamWriter, log file</param>
	<param name="LAB_Modules">[OPTIONAL] System.Windows.Forms.Label, Lab to named current module generated</param>
	<param name="PG_Table">[OPTIONAL] System.Windows.Forms.ProgressBar, progress bar for table indication in a module</param>
	<returns>boolean, true if done</returns>
	<remarks></remarks>
</member><member name="M:Ludo.DTB.Ludo_DTB_CODE_MAKER_VB_NET_LUDO.generate(System.String,System.Windows.Forms.ProgressBar@,System.Windows.Forms.Label@,System.Windows.Forms.ProgressBar@)">
	<summary>
 Method to generate the code from Schem
 </summary>
	<param name="sPath">string, our path</param>
	<param name="PG_Modules">[OPTIONAL] System.Windows.Forms.ProgressBar, progress bar for module indication</param>
	<param name="LAB_Modules">[OPTIONAL] System.Windows.Forms.Label, Lab to named current module generated</param>
	<param name="PG_Table">[OPTIONAL] System.Windows.Forms.ProgressBar, progress bar for table indication in a module</param>
	<returns>Boolean, true if done</returns>
	<remarks>It's an override !!!</remarks>
</member><member name="M:Ludo.DTB.Ludo_DTB_CODE_MAKER_VB_NET_LUDO.retro(System.Collections.Generic.List{System.String},System.Windows.Forms.ProgressBar@,System.Windows.Forms.Label@)">
	<summary>
 Method to generate schem from code
 </summary>
	<param name="lst_sFile">List(Of string), our file name for retro</param>
	<param name="PG_Modules">[OPTIONAL] System.Windows.Forms.ProgressBar, progress bar for module indication</param>
	<param name="LAB_Modules">[OPTIONAL] System.Windows.Forms.Label, Lab to named current module generated</param>
	<returns>Boolean, true if done</returns>
	<remarks>It's an override !!! And .. it's useless</remarks>
</member><member name="M:Ludo.DTB.Ludo_DTB_CODE_MAKER_VB_NET_LUDO.ToString">
	<summary>
 To String override
 </summary>
	<returns>string, our tostring info</returns>
	<remarks></remarks>
</member><member name="T:Ludo.DTB.Ludo_DTB_CODE_MAKER_VB_NET_LUDO">
	<summary>
 Class to generate your code in VB NET for Our Ludo Library
 </summary>
	<remarks></remarks>
</member><member name="T:Ludo.DTB.Ludo_DTB_CODE_MAKER_DOCX">
	<summary>
 Class to generate your doc in docx to better understood !
 </summary>
	<remarks></remarks>
</member><member name="F:Ludo.DTB.GUI.Consts.LUDO_DTB_GUI_CONTROL_SAI">
	<summary>
 Const for one line text field
 </summary>
	<remarks></remarks>
</member><member name="F:Ludo.DTB.GUI.Consts.LUDO_DTB_GUI_CONTROL_LAB">
	<summary>
 Const for label
 </summary>
	<remarks></remarks>
</member><member name="F:Ludo.DTB.GUI.Consts.LUDO_DTB_GUI_CONTROL_TXT">
	<summary>
 Const for multiline text field
 </summary>
	<remarks></remarks>
</member><member name="F:Ludo.DTB.GUI.Consts.LUDO_DTB_GUI_CONTROL_COMBO">
	<summary>
 Const for combo box
 </summary>
	<remarks></remarks>
</member><member name="F:Ludo.DTB.GUI.Consts.LUDO_DTB_GUI_CONTROL_LIST">
	<summary>
 Const for list box
 </summary>
	<remarks></remarks>
</member><member name="F:Ludo.DTB.GUI.Consts.LUDO_DTB_GUI_CONTROL_CHK">
	<summary>
 Const for chk box
 </summary>
	<remarks></remarks>
</member><member name="F:Ludo.DTB.GUI.Consts.LUDO_DTB_GUI_CONTROL_DTP">
	<summary>
 Const for date time picker
 </summary>
	<remarks></remarks>
</member><member name="F:Ludo.DTB.GUI.Consts.LUDO_DTB_GUI_CONTROL_PG">
	<summary>
 Const for Progress bar
 </summary>
	<remarks></remarks>
</member><member name="F:Ludo.DTB.GUI.Consts.LUDO_DTB_GUI_CONTROL_DGV">
	<summary>
 Const for Datagrid view
 </summary>
	<remarks></remarks>
</member><member name="F:Ludo.DTB.GUI.Consts.LUDO_DTB_GUI_CONTROL_PNL">
	<summary>
 Const for panel (to contains Layout)
 </summary>
	<remarks></remarks>
</member><member name="F:Ludo.DTB.GUI.Consts.LUDO_DTB_GUI_CONTROL_TLP">
	<summary>
 Const for table panel layout
 </summary>
	<remarks></remarks>
</member><member name="F:Ludo.DTB.GUI.Consts.LUDO_DTB_GUI_CONTROL_LAY">
	<summary>
 Const for layout
 </summary>
	<remarks></remarks>
</member><member name="F:Ludo.DTB.GUI.Consts.LUDO_DTB_GUI_CONTROL_SPLIT">
	<summary>
 Const for spliter
 </summary>
	<remarks></remarks>
</member><member name="F:Ludo.DTB.GUI.Consts.LUDO_DTB_GUI_CONTROL_SAI_DEFAULT_W">
	<summary>
 Const from the default SAI_ width in pixel
 </summary>
	<remarks></remarks>
</member><member name="F:Ludo.DTB.GUI.Consts.LUDO_DTB_GUI_CONTROL_SAI_DEFAULT_H">
	<summary>
 Const from the default SAI_ height in pixel
 </summary>
	<remarks></remarks>
</member><member name="F:Ludo.DTB.GUI.Consts.LUDO_DTB_GUI_CONTROL_LAB_DEFAULT_W">
	<summary>
 Const from the default LAB_ width in pixel
 </summary>
	<remarks></remarks>
</member><member name="F:Ludo.DTB.GUI.Consts.LUDO_DTB_GUI_CONTROL_LAB_DEFAULT_H">
	<summary>
 Const from the default LAB_ height in pixel
 </summary>
	<remarks></remarks>
</member><member name="F:Ludo.DTB.GUI.Consts.LUDO_DTB_GUI_CONTROL_TXT_DEFAULT_W">
	<summary>
 Const from the default TXT_ width in pixel
 </summary>
	<remarks></remarks>
</member><member name="F:Ludo.DTB.GUI.Consts.LUDO_DTB_GUI_CONTROL_TXT_DEFAULT_H">
	<summary>
 Const from the default TXT_ height in pixel
 </summary>
	<remarks></remarks>
</member><member name="F:Ludo.DTB.GUI.Consts.LUDO_DTB_GUI_CONTROL_COMBO_DEFAULT_W">
	<summary>
 Const from the default COMBO_ width in pixel
 </summary>
	<remarks></remarks>
</member><member name="F:Ludo.DTB.GUI.Consts.LUDO_DTB_GUI_CONTROL_COMBO_DEFAULT_H">
	<summary>
 Const from the default COMBO_ height in pixel
 </summary>
	<remarks></remarks>
</member><member name="F:Ludo.DTB.GUI.Consts.LUDO_DTB_GUI_CONTROL_LIST_DEFAULT_W">
	<summary>
 Const from the default LIST_ width in pixel
 </summary>
	<remarks></remarks>
</member><member name="F:Ludo.DTB.GUI.Consts.LUDO_DTB_GUI_CONTROL_LIST_DEFAULT_H">
	<summary>
 Const from the default LIST_ height in pixel
 </summary>
	<remarks></remarks>
</member><member name="F:Ludo.DTB.GUI.Consts.LUDO_DTB_GUI_CONTROL_CHK_DEFAULT_W">
	<summary>
 Const from the default CHK_ width in pixel
 </summary>
	<remarks></remarks>
</member><member name="F:Ludo.DTB.GUI.Consts.LUDO_DTB_GUI_CONTROL_CHK_DEFAULT_H">
	<summary>
 Const from the default CHK_ height in pixel
 </summary>
	<remarks></remarks>
</member><member name="F:Ludo.DTB.GUI.Consts.LUDO_DTB_GUI_CONTROL_DTP_DEFAULT_W">
	<summary>
 Const from the default DTP_ width in pixel
 </summary>
	<remarks></remarks>
</member><member name="F:Ludo.DTB.GUI.Consts.LUDO_DTB_GUI_CONTROL_DTP_DEFAULT_H">
	<summary>
 Const from the default DTP_ height in pixel
 </summary>
	<remarks></remarks>
</member><member name="F:Ludo.DTB.GUI.Consts.LUDO_DTB_GUI_CONTROL_PG_DEFAULT_W">
	<summary>
 Const from the default PG_ width in pixel
 </summary>
	<remarks></remarks>
</member><member name="F:Ludo.DTB.GUI.Consts.LUDO_DTB_GUI_CONTROL_PG_DEFAULT_H">
	<summary>
 Const from the default PG_ height in pixel
 </summary>
	<remarks></remarks>
</member><member name="F:Ludo.DTB.GUI.Consts.LUDO_DTB_GUI_CONTROL_DGV_DEFAULT_W">
	<summary>
 Const from the default DGV_ width in pixel
 </summary>
	<remarks></remarks>
</member><member name="F:Ludo.DTB.GUI.Consts.LUDO_DTB_GUI_CONTROL_DGV_DEFAULT_H">
	<summary>
 Const from the default DGV_ height in pixel
 </summary>
	<remarks></remarks>
</member><member name="F:Ludo.DTB.GUI.Consts.LUDO_DTB_GUI_CONTROL_PNL_DEFAULT_W">
	<summary>
 Const from the default PNL_ width in pixel
 </summary>
	<remarks></remarks>
</member><member name="F:Ludo.DTB.GUI.Consts.LUDO_DTB_GUI_CONTROL_PNL_DEFAULT_H">
	<summary>
 Const from the default PNL_ height in pixel
 </summary>
	<remarks></remarks>
</member><member name="F:Ludo.DTB.GUI.Consts.LUDO_DTB_GUI_CONTROL_TLP_DEFAULT_W">
	<summary>
 Const from the default TLP_ width in pixel
 </summary>
	<remarks></remarks>
</member><member name="F:Ludo.DTB.GUI.Consts.LUDO_DTB_GUI_CONTROL_TLP_DEFAULT_H">
	<summary>
 Const from the default TLP_ height in pixel
 </summary>
	<remarks></remarks>
</member><member name="F:Ludo.DTB.GUI.Consts.LUDO_DTB_GUI_CONTROL_LAY_DEFAULT_W">
	<summary>
 Const from the default LAY_ width in pixel
 </summary>
	<remarks></remarks>
</member><member name="F:Ludo.DTB.GUI.Consts.LUDO_DTB_GUI_CONTROL_LAY_DEFAULT_H">
	<summary>
 Const from the default LAY_ height in pixel
 </summary>
	<remarks></remarks>
</member><member name="F:Ludo.DTB.GUI.Consts.LUDO_DTB_GUI_CONTROL_SPLIT_DEFAULT_W">
	<summary>
 Const from the default SPLIT_ width in pixel
 </summary>
	<remarks></remarks>
</member><member name="F:Ludo.DTB.GUI.Consts.LUDO_DTB_GUI_CONTROL_SPLIT_DEFAULT_H">
	<summary>
 Const from the default SPLIT_ height in pixel
 </summary>
	<remarks></remarks>
</member><member name="F:Ludo.DTB.GUI.Consts.LUDO_DTB_GUI_CONTROL_SAI_DESCRIPTION">
	<summary>
 Const to describe SAI_
 </summary>
	<remarks></remarks>
</member><member name="F:Ludo.DTB.GUI.Consts.LUDO_DTB_GUI_CONTROL_LAB_DESCRIPTION">
	<summary>
 Const to describe LAB_
 </summary>
	<remarks></remarks>
</member><member name="F:Ludo.DTB.GUI.Consts.LUDO_DTB_GUI_CONTROL_TXT_DESCRIPTION">
	<summary>
 Const to describe TXT_
 </summary>
	<remarks></remarks>
</member><member name="F:Ludo.DTB.GUI.Consts.LUDO_DTB_GUI_CONTROL_COMBO_DESCRIPTION">
	<summary>
 Const to describe Combo box
 </summary>
	<remarks></remarks>
</member><member name="F:Ludo.DTB.GUI.Consts.LUDO_DTB_GUI_CONTROL_LIST_DESCRIPTION">
	<summary>
 Const to describe LIST_
 </summary>
	<remarks></remarks>
</member><member name="F:Ludo.DTB.GUI.Consts.LUDO_DTB_GUI_CONTROL_CHK_DESCRIPTION">
	<summary>
 Const to describe CHK_
 </summary>
	<remarks></remarks>
</member><member name="F:Ludo.DTB.GUI.Consts.LUDO_DTB_GUI_CONTROL_DTP_DESCRIPTION">
	<summary>
 Const to describe DTP_
 </summary>
	<remarks></remarks>
</member><member name="F:Ludo.DTB.GUI.Consts.LUDO_DTB_GUI_CONTROL_PG_DESCRIPTION">
	<summary>
 Const to describ PG_
 </summary>
	<remarks></remarks>
</member><member name="F:Ludo.DTB.GUI.Consts.LUDO_DTB_GUI_CONTROL_DGV_DESCRIPTION">
	<summary>
 const to decribe DGV_
 </summary>
	<remarks></remarks>
</member><member name="F:Ludo.DTB.GUI.Consts.LUDO_DTB_GUI_CONTROL_PNL_DESCRIPTION">
	<summary>
 Const to describe PNL_
 </summary>
	<remarks></remarks>
</member><member name="F:Ludo.DTB.GUI.Consts.LUDO_DTB_GUI_CONTROL_TLP_DESCRIPTION">
	<summary>
 Const to describe TLP_
 </summary>
	<remarks></remarks>
</member><member name="F:Ludo.DTB.GUI.Consts.LUDO_DTB_GUI_CONTROL_LAY_DESCRIPTION">
	<summary>
 Const to describe LAY_
 </summary>
	<remarks></remarks>
</member><member name="F:Ludo.DTB.GUI.Consts.LUDO_DTB_GUI_CONTROL_SPLIT_DESCRIPTION">
	<summary>
 Const to describe SPLIT_
 </summary>
	<remarks></remarks>
</member><member name="F:Ludo.DTB.GUI.Consts.LUDO_DTB_GUI_CONTROL_RATIO_W">
	<summary>
 Const to obtain the height of a text line, from a font size
 </summary>
	<remarks></remarks>
</member><member name="F:Ludo.DTB.GUI.Consts.LUDO_DTB_GUI_RULES_DEFAULT_COLUMN_NUMBER">
	<summary>
 Default number of column
 </summary>
	<remarks></remarks>
</member><member name="F:Ludo.DTB.GUI.Consts.LUDO_DTB_GUI_RULES_DEFAULT_PADDING_X">
	<summary>
 Default padding x
 </summary>
	<remarks></remarks>
</member><member name="F:Ludo.DTB.GUI.Consts.LUDO_DTB_GUI_RULES_DEFAULT_PADDING_Y">
	<summary>
 Default padding y
 </summary>
	<remarks></remarks>
</member><member name="F:Ludo.DTB.GUI.Consts.LUDO_DTB_GUI_RULES_DEFAULT_POLICE">
	<summary>
 Default police
 </summary>
	<remarks></remarks>
</member><member name="F:Ludo.DTB.GUI.Consts.LUDO_DTB_GUI_RULES_DEFAULT_POLICE_SIZE">
	<summary>
 Default police size in pixel
 </summary>
	<remarks></remarks>
</member><member name="T:Ludo.DTB.GUI.Consts">
	<summary>
 our module for const
 </summary>
	<remarks></remarks>
</member><member name="M:Ludo.DTB.GUI.Ludo_GUI.findIn(System.String,System.Collections.Generic.List{Ludo.DTB.GUI.Ludo_DTB_GUI_Control_type}@)">
	<summary>
 Function to find from its name a control type in a control type list
 </summary>
	<param name="sName">string, our control name</param>
	<param name="lst_o">List(Of Ludo.DTB.GUI.Ludo_DTB_GUI_Control_type), our list of controls</param>
	<returns>integer, the position or lesser than zero if not found</returns>
	<remarks></remarks>
</member><member name="M:Ludo.DTB.GUI.Ludo_GUI.findIn(Ludo.DTB.GUI.Ludo_DTB_GUI_Control_type@,System.Collections.Generic.List{Ludo.DTB.GUI.Ludo_DTB_GUI_Control_type}@)">
	<summary>
 Function to find a control type in a list of control type
 </summary>
	<param name="oCtrl">Ludo.DTB.GUI.Ludo_DTB_GUI_Control_type, our control</param>
	<param name="lst_o">List(Of Ludo.DTB.GUI.Ludo_DTB_GUI_Control_type), our list of control</param>
	<returns>integer, the position or lesser than zero if not found</returns>
	<remarks>This function calls the function findIn with string sName parameter</remarks>
</member><member name="M:Ludo.DTB.GUI.Ludo_GUI.addIn(Ludo.DTB.GUI.Ludo_DTB_GUI_Control_type@,System.Collections.Generic.List{Ludo.DTB.GUI.Ludo_DTB_GUI_Control_type}@)">
	<summary>
 Function to add a control type in a list if the control type name is not already taken
 </summary>
	<param name="oCtrl">Ludo.DTB.GUI.Ludo_DTB_GUI_Control_type, our control</param>
	<param name="lst_o">List(Of Ludo.DTB.GUI.Ludo_DTB_GUI_Control_type), our list of control type</param>
	<returns>Boolean, true if done</returns>
	<remarks></remarks>
</member><member name="M:Ludo.DTB.GUI.Ludo_GUI.addLstIn(System.Collections.Generic.List{Ludo.DTB.GUI.Ludo_DTB_GUI_Control_type}@,System.Collections.Generic.List{Ludo.DTB.GUI.Ludo_DTB_GUI_Control_type}@)">
	<summary>
 Function to add the controls type from a value list to atarget list of control type
 </summary>
	<param name="lst_oValues">List(Of Ludo.DTB.GUI.Ludo_DTB_GUI_Control_type), our values we want add</param>
	<param name="lst_oTarget">List(Of Ludo.DTB.GUI.Ludo_DTB_GUI_Control_type), where we want add or repalce new control type</param>
	<returns>
 integer, the number of value added.
 The function don't replace already existing control in lst_oTarget
 </returns>
	<remarks>This function calls the function addIn for each item of lst_oValues</remarks>
</member><member name="M:Ludo.DTB.GUI.Ludo_GUI.mergeIn(Ludo.DTB.GUI.Ludo_DTB_GUI_Control_type@,System.Collections.Generic.List{Ludo.DTB.GUI.Ludo_DTB_GUI_Control_type}@)">
	<summary>
 Function to add or replace a control type in a control type list
 </summary>
	<param name="oCtrl">Ludo.DTB.GUI.Ludo_DTB_GUI_Control_type, the control type we want add or replace</param>
	<param name="lst_o">List(Of Ludo.DTB.GUI.Ludo_DTB_GUI_Control_type), our list of control type</param>
	<returns>Boolean, true if done</returns>
	<remarks></remarks>
</member><member name="M:Ludo.DTB.GUI.Ludo_GUI.mergeLst(System.Collections.Generic.List{Ludo.DTB.GUI.Ludo_DTB_GUI_Control_type}@,System.Collections.Generic.List{Ludo.DTB.GUI.Ludo_DTB_GUI_Control_type}@)">
	<summary>
 Function to merge the lists
 </summary>
	<param name="lst_oValues">List(Of Ludo.DTB.GUI.Ludo_DTB_GUI_Control_type), our values we want add or replace</param>
	<param name="lst_oTarget">List(Of Ludo.DTB.GUI.Ludo_DTB_GUI_Control_type), where we want add or replace new control type</param>
	<returns>boolean, true if done</returns>
	<remarks>This function calls the function mergeIn for each elements of lst_oTarget</remarks>
</member><member name="M:Ludo.DTB.GUI.Ludo_GUI.delIn(System.String,System.Collections.Generic.List{Ludo.DTB.GUI.Ludo_DTB_GUI_Control_type}@)">
	<summary>
 Function to delete a control type from its name in a control type list
 </summary>
	<param name="sName">string, our control name</param>
	<param name="lst_o">List(Of Ludo.DTB.GUI.Ludo_DTB_GUI_Control_type), our list of controls</param>
	<returns>Boolean, true if done</returns>
	<remarks>This function calls the function findIn</remarks>
</member><member name="M:Ludo.DTB.GUI.Ludo_GUI.createSize(System.Int32,System.Int32)">
	<summary>
 Function to create Size
 </summary>
	<param name="nWidth">integer, width</param>
	<param name="nHeight">integer, height</param>
	<returns>Ludo.DTB.GUI.Ludo_DTB_GUI_Size, our size</returns>
	<remarks></remarks>
</member><member name="M:Ludo.DTB.GUI.Ludo_GUI.createPosition(System.Int32,System.Int32)">
	<summary>
 Function to create Size
 </summary>
	<param name="nX">integer, position x</param>
	<param name="nY">integer, position y</param>
	<returns>Ludo.DTB.GUI.Ludo_DTB_GUI_Position, our size</returns>
	<remarks></remarks>
</member><member name="M:Ludo.DTB.GUI.Ludo_GUI.createDefaultRule">
	<summary>
 Function to obtain the default rules
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="T:Ludo.DTB.GUI.Ludo_GUI">
	<summary>
 Our class for global Ludo.DTB.GUI functions
 </summary>
	<remarks></remarks>
</member><member name="F:Ludo.DTB.GUI.Ludo_DTB_GUI_Size.nWidth">
	<summary>
 width
 </summary>
	<remarks></remarks>
</member><member name="F:Ludo.DTB.GUI.Ludo_DTB_GUI_Size.nHeight">
	<summary>
 height
 </summary>
	<remarks></remarks>
</member><member name="T:Ludo.DTB.GUI.Ludo_DTB_GUI_Size">
	<summary>
 structure to store width and height in integer as pixel
 </summary>
	<remarks></remarks>
</member><member name="F:Ludo.DTB.GUI.Ludo_DTB_GUI_Position.nX">
	<summary>
 position x
 </summary>
	<remarks></remarks>
</member><member name="F:Ludo.DTB.GUI.Ludo_DTB_GUI_Position.nY">
	<summary>
 Position Y
 </summary>
	<remarks></remarks>
</member><member name="T:Ludo.DTB.GUI.Ludo_DTB_GUI_Position">
	<summary>
 structure to store x and y in integer as pixel
 </summary>
	<remarks></remarks>
</member><member name="F:Ludo.DTB.GUI.Ludo_DTB_GUI_Control_type.sName">
	<summary>
 Name of the Control
 </summary>
	<remarks></remarks>
</member><member name="F:Ludo.DTB.GUI.Ludo_DTB_GUI_Control_type.stSize">
	<summary>
 The width and the height of the control
 </summary>
	<remarks></remarks>
</member><member name="F:Ludo.DTB.GUI.Ludo_DTB_GUI_Control_type.sDescription">
	<summary>
 Description of the control type
 </summary>
	<remarks></remarks>
</member><member name="F:Ludo.DTB.GUI.Ludo_DTB_GUI_Control_type.sBuilder">
	<summary>
 Builder of the conrtol without any parameter or ()
 </summary>
	<remarks></remarks>
</member><member name="T:Ludo.DTB.GUI.Ludo_DTB_GUI_Control_type">
	<summary>
 Structure of control size to calulate the size of rhe 
 </summary>
	<remarks></remarks>
</member><member name="F:Ludo.DTB.GUI.Ludo_DTB_GUI_Generation_Rule.nColumnNumber">
	<summary>
 number of coulmn
 </summary>
	<remarks></remarks>
</member><member name="F:Ludo.DTB.GUI.Ludo_DTB_GUI_Generation_Rule.nPaddingX">
	<summary>
 Padding x for column element
 </summary>
	<remarks></remarks>
</member><member name="F:Ludo.DTB.GUI.Ludo_DTB_GUI_Generation_Rule.nPaddingY">
	<summary>
 Padding x for column element
 </summary>
	<remarks></remarks>
</member><member name="F:Ludo.DTB.GUI.Ludo_DTB_GUI_Generation_Rule.sPolice">
	<summary>
 Police of the text
 </summary>
	<remarks></remarks>
</member><member name="F:Ludo.DTB.GUI.Ludo_DTB_GUI_Generation_Rule.nSize">
	<summary>
 The police size
 </summary>
	<remarks></remarks>
</member><member name="T:Ludo.DTB.GUI.Ludo_DTB_GUI_Generation_Rule">
	<summary>
 Structure tha contains the generation rules
 </summary>
	<remarks></remarks>
</member><member name="F:Ludo.DTB.GUI.Ludo_DTB_GUI_CODE_MAKER.stRules">
	<summary>
 Our controls generation ruler
 </summary>
	<remarks></remarks>
</member><member name="F:Ludo.DTB.GUI.Ludo_DTB_GUI_CODE_MAKER.lst_oControlTypes">
	<summary>
 Our list of aviable controls
 </summary>
	<remarks></remarks>
</member><member name="M:Ludo.DTB.GUI.Ludo_DTB_GUI_CODE_MAKER.getColumnTypeEdition(Ludo.DTB.Ludo_DTB_Column@)">
	<summary>
 Static Method to get the type of a column as edition
 </summary>
	<param name="oColumn">Ludo.DTB.Ludo_DTB_Column, our column</param>
	<returns>Tring, empty or the Type</returns>
	<remarks></remarks>
</member><member name="M:Ludo.DTB.GUI.Ludo_DTB_GUI_CODE_MAKER.getColumnTypeSelection(Ludo.DTB.Ludo_DTB_Column@)">
	<summary>
 Static Method to get the type of a column as selection
 </summary>
	<param name="oColumn">Ludo.DTB.Ludo_DTB_Column, our </param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Ludo.DTB.GUI.Ludo_DTB_GUI_CODE_MAKER.getDescription">
	<summary>
 Method to get the description of the class
 </summary>
	<returns>string, our description</returns>
	<remarks></remarks>
</member><member name="M:Ludo.DTB.GUI.Ludo_DTB_GUI_CODE_MAKER.getRules">
	<summary>
 Method to get the rule to generated the interface
 </summary>
	<returns>Ludo.DTB.GUI.Ludo_DTB_GUI_Generation_Rule, our ruler</returns>
	<remarks></remarks>
</member><member name="M:Ludo.DTB.GUI.Ludo_DTB_GUI_CODE_MAKER.getListOfAviableControls">
	<summary>
 Method to get the avoiable list of controls
 </summary>
	<returns>List(Of Ludo.DTB.GUI.Ludo_DTB_GUI_Control_type)</returns>
	<remarks></remarks>
</member><member name="M:Ludo.DTB.GUI.Ludo_DTB_GUI_CODE_MAKER.getControlType(System.String)">
	<summary>
 Method to a control type from its name
 </summary>
	<param name="sName">String, the name of the seeked control</param>
	<returns>Ludo.DTB.GUI.Ludo_DTB_GUI_Control_type, the corresponding control type or null</returns>
	<remarks></remarks>
</member><member name="M:Ludo.DTB.GUI.Ludo_DTB_GUI_CODE_MAKER.setRules(Ludo.DTB.GUI.Ludo_DTB_GUI_Generation_Rule@)">
	<summary>
 Method to set the new rules
 </summary>
	<param name="stRuler">Ludo.DTB.GUI.Ludo_DTB_GUI_Generation_Rule</param>
	<returns>Boolean, true if done</returns>
	<remarks></remarks>
</member><member name="M:Ludo.DTB.GUI.Ludo_DTB_GUI_CODE_MAKER.setListOfAviableControls(System.Collections.Generic.List{Ludo.DTB.GUI.Ludo_DTB_GUI_Control_type}@)">
	<summary>
 Method to set the list of aviable controls
 </summary>
	<param name="lst_o">List(Of Ludo.DTB.GUI.Ludo_DTB_GUI_Control_type), our list of controls</param>
	<returns>Boolean, true if done</returns>
	<remarks></remarks>
</member><member name="M:Ludo.DTB.GUI.Ludo_DTB_GUI_CODE_MAKER.addControltype(Ludo.DTB.GUI.Ludo_DTB_GUI_Control_type@)">
	<summary>
 Method to add a control type
 </summary>
	<param name="oCtrl">Ludo.DTB.GUI.Ludo_DTB_GUI_Control_type, our new control type</param>
	<returns>Boolean, true if done</returns>
	<remarks>this method calls the function addIn</remarks>
</member><member name="M:Ludo.DTB.GUI.Ludo_DTB_GUI_CODE_MAKER.addControltypeList(System.Collections.Generic.List{Ludo.DTB.GUI.Ludo_DTB_GUI_Control_type}@)">
	<summary>
 Method to add a list of control type
 </summary>
	<param name="lst_oCtrl">List(Of Ludo.DTB.GUI.Ludo_DTB_GUI_Control_type), our list</param>
	<returns>integer, our number of control type added</returns>
	<remarks>This method calls the function addLstIn</remarks>
</member><member name="M:Ludo.DTB.GUI.Ludo_DTB_GUI_CODE_MAKER.addOrReplaceControlType(Ludo.DTB.GUI.Ludo_DTB_GUI_Control_type@)">
	<summary>
 Method to add (or replace if already exists) a control type
 </summary>
	<param name="oCtrl">Ludo.DTB.GUI.Ludo_DTB_GUI_Control_type, our control type</param>
	<returns>boolean, true if done</returns>
	<remarks>Thie method calls the mergeIn function</remarks>
</member><member name="M:Ludo.DTB.GUI.Ludo_DTB_GUI_CODE_MAKER.mergeControlTypeList(System.Collections.Generic.List{Ludo.DTB.GUI.Ludo_DTB_GUI_Control_type}@)">
	<summary>
 Method to merge a list of control type to our
 </summary>
	<param name="lst_oCtrl">ist(Of Ludo.DTB.GUI.Ludo_DTB_GUI_Control_type), our list of control type</param>
	<returns>boolean, true if done</returns>
	<remarks>this Method calls the mergeLst function</remarks>
</member><member name="M:Ludo.DTB.GUI.Ludo_DTB_GUI_CODE_MAKER.delControlType(System.String)">
	<summary>
 Method to delete a contro, Type from name
 </summary>
	<param name="sName">string, the control name</param>
	<returns>boolean, true if done</returns>
	<remarks>this method calls the function delIn</remarks>
</member><member name="M:Ludo.DTB.GUI.Ludo_DTB_GUI_CODE_MAKER.clearControlTypeList">
	<summary>
 Function to clear the control clear list
 </summary>
	<returns>Boolean, true when done</returns>
	<remarks></remarks>
</member><member name="M:Ludo.DTB.GUI.Ludo_DTB_GUI_CODE_MAKER.getControlSize(System.String)">
	<summary>
 Get size control
 </summary>
	<param name="sName">string, the control name</param>
	<returns>Ludo.DTB.GUI.Ludo_DTB_GUI_Size, our size or nothing</returns>
	<remarks></remarks>
</member><member name="M:Ludo.DTB.GUI.Ludo_DTB_GUI_CODE_MAKER.calculateLaySize(System.Collections.Generic.List{System.String}@)">
	<summary>
 Method to Calculate size
 </summary>
	<param name="lst_sCtrl">List(Of String), our list of </param>
	<returns>Ludo.DTB.GUI.Ludo_DTB_GUI_Size, our size anyway</returns>
	<remarks></remarks>
</member><member name="M:Ludo.DTB.GUI.Ludo_DTB_GUI_CODE_MAKER.writeColumnEditionCode(Ludo.DTB.Ludo_DTB_Column@,Ludo.DTB.GUI.Ludo_DTB_GUI_Position,System.String)">
	<summary>
 Method to write column Edition Code
 </summary>
	<param name="oColumn">Ludo.DTB.Ludo_DTB_Column, our column</param>
	<param name="stPosition">[OPTIONAL]Ludo.DTB.GUI.Ludo_DTB_GUI_Position, default position without padding, could be used to return the next position without padding</param>
	<param name="sTabulation">[OPTIONAL]String, our code tabulation</param>
	<returns>string, the code</returns>
	<remarks>Not implemented, override it !!!</remarks>
</member><member name="M:Ludo.DTB.GUI.Ludo_DTB_GUI_CODE_MAKER.writeColumnEditionDesign(Ludo.DTB.Ludo_DTB_Column@,Ludo.DTB.GUI.Ludo_DTB_GUI_Position,System.String)">
	<summary>
 Method to write column Edition Design
 </summary>
	<param name="oColumn">Ludo.DTB.Ludo_DTB_Column, our column</param>
	<param name="stPosition">[OPTIONAL]Ludo.DTB.GUI.Ludo_DTB_GUI_Position, default position without padding, could be used to return the next position without padding</param>
	<param name="sTabulation">[OPTIONAL]String, our code tabulation</param>
	<returns>string, the code</returns>
	<remarks>Not implemented, override it !!!</remarks>
</member><member name="M:Ludo.DTB.GUI.Ludo_DTB_GUI_CODE_MAKER.writeLayEditionCode(Ludo.DTB.Ludo_DTB_Table@)">
	<summary>
 write lay Edition Code
 </summary>
	<param name="oTable">Ludo.DTB.Ludo_DTB_Table, our table</param>
	<returns>string, the code</returns>
	<remarks>Not implemented, override it !!!</remarks>
</member><member name="M:Ludo.DTB.GUI.Ludo_DTB_GUI_CODE_MAKER.writeLayEditionDesign(Ludo.DTB.Ludo_DTB_Table@)">
	<summary>
 Method write lay Edition Design
 </summary>
	<param name="oTable">Ludo.DTB.Ludo_DTB_Table, our table</param>
	<returns>string, the code</returns>
	<remarks>Not implemented, override it !!!</remarks>
</member><member name="M:Ludo.DTB.GUI.Ludo_DTB_GUI_CODE_MAKER.writeLayWinEditionCode(Ludo.DTB.Ludo_DTB_Table@)">
	<summary>
 Method write lay_win Edition Code
 </summary>
	<param name="oTable">Ludo.DTB.Ludo_DTB_Table, our table</param>
	<returns>string, the code</returns>
	<remarks>Not implemented, override it !!!</remarks>
</member><member name="M:Ludo.DTB.GUI.Ludo_DTB_GUI_CODE_MAKER.writeLayWinEditionDesign(Ludo.DTB.Ludo_DTB_Table@)">
	<summary>
 Method write lay_win Edition Design
 </summary>
	<param name="oTable">Ludo.DTB.Ludo_DTB_Table, our table</param>
	<returns>string, the code</returns>
	<remarks>Not implemented, override it !!!</remarks>
</member><member name="M:Ludo.DTB.GUI.Ludo_DTB_GUI_CODE_MAKER.writeWinEditionCode(Ludo.DTB.Ludo_DTB_Table@)">
	<summary>
 Method write win Edition Code
 </summary>
	<param name="oTable">Ludo.DTB.Ludo_DTB_Table, our table</param>
	<returns>string, the code</returns>
	<remarks>Not implemented, override it !!!</remarks>
</member><member name="M:Ludo.DTB.GUI.Ludo_DTB_GUI_CODE_MAKER.writeWinEditionDesign(Ludo.DTB.Ludo_DTB_Table@)">
	<summary>
 Method write win Edition Design
 </summary>
	<param name="oTable">Ludo.DTB.Ludo_DTB_Table, our table</param>
	<returns>string, the code</returns>
	<remarks>Not implemented, override it !!!</remarks>
</member><member name="M:Ludo.DTB.GUI.Ludo_DTB_GUI_CODE_MAKER.writeColumnSelectionCode(Ludo.DTB.Ludo_DTB_Column@,Ludo.DTB.GUI.Ludo_DTB_GUI_Position)">
	<summary>
 Method to write column Selection Code
 </summary>
	<param name="oColumn">Ludo.DTB.Ludo_DTB_Column, our column</param>
	<param name="stPosition">[OPTIONAL]Ludo.DTB.GUI.Ludo_DTB_GUI_Position, default position without padding, could be used to return the next position without padding</param>
	<returns>string, the code</returns>
	<remarks>Not implemented, override it !!!</remarks>
</member><member name="M:Ludo.DTB.GUI.Ludo_DTB_GUI_CODE_MAKER.writeColumnSelectionDesign(Ludo.DTB.Ludo_DTB_Column@,Ludo.DTB.GUI.Ludo_DTB_GUI_Position)">
	<summary>
 Method to write column Selection Design
 </summary>
	<param name="oColumn">Ludo.DTB.Ludo_DTB_Column, our column</param>
	<param name="stPosition">[OPTIONAL]Ludo.DTB.GUI.Ludo_DTB_GUI_Position, default position without padding, could be used to return the next position without padding</param>
	<returns>string, the code</returns>
	<remarks>Not implemented, override it !!!</remarks>
</member><member name="M:Ludo.DTB.GUI.Ludo_DTB_GUI_CODE_MAKER.writeLaySelectionCode(Ludo.DTB.Ludo_DTB_Table@)">
	<summary>
 write lay Selection Code
 </summary>
	<param name="oTable">Ludo.DTB.Ludo_DTB_Table, our table</param>
	<returns>string, the code</returns>
	<remarks>Not implemented, override it !!!</remarks>
</member><member name="M:Ludo.DTB.GUI.Ludo_DTB_GUI_CODE_MAKER.writeLaySelectionDesign(Ludo.DTB.Ludo_DTB_Table@)">
	<summary>
 Method write lay Selection Design
 </summary>
	<param name="oTable">Ludo.DTB.Ludo_DTB_Table, our table</param>
	<returns>string, the code</returns>
	<remarks>Not implemented, override it !!!</remarks>
</member><member name="M:Ludo.DTB.GUI.Ludo_DTB_GUI_CODE_MAKER.writeLayWinSelectionCode(Ludo.DTB.Ludo_DTB_Table@)">
	<summary>
 Method write lay_win Selection Code
 </summary>
	<param name="oTable">Ludo.DTB.Ludo_DTB_Table, our table</param>
	<returns>string, the code</returns>
	<remarks>Not implemented, override it !!!</remarks>
</member><member name="M:Ludo.DTB.GUI.Ludo_DTB_GUI_CODE_MAKER.writeLayWinSelectionDesign(Ludo.DTB.Ludo_DTB_Table@)">
	<summary>
 Method write lay_win Selection Design
 </summary>
	<param name="oTable">Ludo.DTB.Ludo_DTB_Table, our table</param>
	<returns>string, the code</returns>
	<remarks>Not implemented, override it !!!</remarks>
</member><member name="M:Ludo.DTB.GUI.Ludo_DTB_GUI_CODE_MAKER.writeWinSelectionCode(Ludo.DTB.Ludo_DTB_Table@)">
	<summary>
 Method write win Selection Code
 </summary>
	<param name="oTable">Ludo.DTB.Ludo_DTB_Table, our table</param>
	<returns>string, the code</returns>
	<remarks>Not implemented, override it !!!</remarks>
</member><member name="M:Ludo.DTB.GUI.Ludo_DTB_GUI_CODE_MAKER.writeWinSelectionDesign(Ludo.DTB.Ludo_DTB_Table@)">
	<summary>
 Method write win Selection Design
 </summary>
	<param name="oTable">Ludo.DTB.Ludo_DTB_Table, our table</param>
	<returns>string, the code</returns>
	<remarks>Not implemented, override it !!!</remarks>
</member><member name="M:Ludo.DTB.GUI.Ludo_DTB_GUI_CODE_MAKER.writeClass(Ludo.DTB.Ludo_DTB_Table@,System.String,System.Collections.Generic.List{System.String}@)">
	<summary>
 Method to write all element from a class
 </summary>
	<param name="oTable">Ludo.DTB.Ludo_DTB_Table, our table</param>
	<param name="sPath">string, our path</param>
	<param name="lst_sFiles">list(of string), list of generated files</param>
	<returns>boolean, true if done</returns>
	<remarks>It's empty, override it :p</remarks>
</member><member name="M:Ludo.DTB.GUI.Ludo_DTB_GUI_CODE_MAKER.writeClasses(Ludo.DTB.Ludo_DTB_Module@,System.Windows.Forms.ProgressBar@,System.String,System.Collections.Generic.List{System.String}@)">
	<summary>
 Method to write the classes files
 </summary>
	<param name="oModule">Ludo.DTB.Ludo_DTB_Module, our module</param>
	<param name="PG_Table">System.Windows.Forms.ProgressBar, our progress bar</param>
	<param name="sPath">string, our path</param>
	<param name="lst_sFiles">list(of string), list of generated files</param>
	<returns>boolean, true if done</returns>
	<remarks>It's empty, override it :p</remarks>
</member><member name="M:Ludo.DTB.GUI.Ludo_DTB_GUI_CODE_MAKER.generate(System.String,System.Windows.Forms.ProgressBar@,System.Windows.Forms.Label@,System.Windows.Forms.ProgressBar@)">
	<summary>
 Method to generate the JS code in a directory
 </summary>
	<param name="sPath">string, our directory</param>
	<param name="PG_Modules">System.Windows.Forms.ProgressBar, our progress bar for the modules</param>
	<param name="LAB_Modules">System.Windows.Forms.Label, our label</param>
	<param name="PG_Table">System.Windows.Forms.ProgressBar, our progress bar for the tables</param>
	<returns>boolean, true if done</returns>
	<remarks>It's empty, override it :p</remarks>
</member><member name="M:Ludo.DTB.GUI.Ludo_DTB_GUI_CODE_MAKER.ToString">
	<summary>
 Override of the toString method
 </summary>
	<returns>string, something fro nothing</returns>
</member><member name="M:Ludo.DTB.GUI.Ludo_DTB_GUI_CODE_MAKER.#ctor">
	<summary>
 The default builder
 </summary>
	<remarks></remarks>
</member><member name="T:Ludo.DTB.GUI.Ludo_DTB_GUI_CODE_MAKER">
	<summary>
 Standard class to create GUI
 </summary>
	<remarks></remarks>
</member><member name="F:LAY_XML_Analyzer_Struct.xmlDocument">
	<summary>
 Our XML Document
 </summary>
	<remarks></remarks>
</member><member name="F:LAY_XML_Analyzer_Struct.lst_sAttributs">
	<summary>
 Our list of attribut name
 </summary>
	<remarks></remarks>
</member><member name="M:LAY_XML_Analyzer_Struct.init(System.Xml.XmlDocument@)">
	<summary>
 Method to initialyze the layout
 </summary>
	<param name="xmlDoc">System.Xml.XmlDocument, document</param>
	<returns>Boolean, True if done</returns>
	<remarks></remarks>
</member><member name="M:LAY_XML_Analyzer_Struct.plots">
	<summary>
 Method to plots the XML Form
 </summary>
	<returns>Boolean, True if done</returns>
	<remarks></remarks>
</member><member name="M:LAY_XML_Analyzer_Struct.nodeAttributs(System.Windows.Forms.TreeNode@)">
	<summary>
 Method to plots the attribut
 </summary>
	<param name="oNode">TreeNode, </param>
	<returns>Boolean, True if done</returns>
	<remarks></remarks>
</member><member name="M:LAY_XML_Analyzer_Struct.detailNode">
	<summary>
 Method to plots the Txt value and the attributs
 </summary>
	<returns>Boolean, True if done</returns>
	<remarks></remarks>
</member><member name="M:LAY_XML_Analyzer_Struct.deleteAttribut(LAY_XML_Analyzer_Attribut@)">
	<summary>
 Method to delete an attribut
 </summary>
	<param name="oLAY_">LAY_XML_Analyzer_Attribut, our layout to set the attribut</param>
	<returns>Boolean, True if done</returns>
	<remarks></remarks>
</member><member name="M:LAY_XML_Analyzer_Struct.saveNode">
	<summary>
 Method to save a node
 </summary>
	<returns>Boolean, True if done</returns>
	<remarks></remarks>
</member><member name="M:LAY_XML_Analyzer_Struct.addAttribut">
	<summary>
 Method to add an attribut
 </summary>
	<returns>Boolean true if done</returns>
	<remarks></remarks>
</member><member name="M:LAY_XML_Analyzer_Struct.deleteNode">
	<summary>
 Method to delete a node
 </summary>
	<returns>Boolean, true if done</returns>
	<remarks></remarks>
</member><member name="M:LAY_XML_Analyzer_Struct.addNode">
	<summary>
 Method to add a node
 </summary>
	<returns>Boolean, True if done</returns>
	<remarks></remarks>
</member><member name="M:LAY_XML_Analyzer_Struct.HANDLER_DeleteAttribut(System.Object,System.EventArgs)">
	<summary>
 Handler to delete an attribut
 </summary>
	<param name="sender">Object, our sender</param>
	<param name="e">EventArgs, the argument</param>
	<remarks></remarks>
</member><member name="M:LAY_XML_Analyzer_Struct.TREE_XmlNodes_Select(System.Object,System.EventArgs)">
	<summary>
 Handler to manage the selection of a new node
 </summary>
	<param name="sender">Object, our sender</param>
	<param name="e">EventArgs, the argument</param>
	<remarks></remarks>
</member><member name="M:LAY_XML_Analyzer_Struct.BTN_Reset_Click(System.Object,System.EventArgs)">
	<summary>
 Handler to manage the reset plots
 </summary>
	<param name="sender">Object, our sender</param>
	<param name="e">EventArgs, the argument</param>
	<remarks></remarks>
</member><member name="M:LAY_XML_Analyzer_Struct.BTN_Modify_Click(System.Object,System.EventArgs)">
	<summary>
 Handler to manage the modification of a node
 </summary>
	<param name="sender">Object, our sender</param>
	<param name="e">EventArgs, the argument</param>
	<remarks></remarks>
</member><member name="M:LAY_XML_Analyzer_Struct.SAI_Text_enter(System.Object,System.Windows.Forms.KeyEventArgs)">
	<summary>
 Handler to manage the modification of a node from an enter
 </summary>
	<param name="sender">Object, our sender</param>
	<param name="e">EventArgs, the argument</param>
	<remarks></remarks>
</member><member name="M:LAY_XML_Analyzer_Struct.BTN_Add_Click(System.Object,System.EventArgs)">
	<summary>
 Handler to manage the adding of attributs
 </summary>
	<param name="sender">Object, our sender</param>
	<param name="e">EventArgs, the argument</param>
	<remarks></remarks>
</member><member name="M:LAY_XML_Analyzer_Struct.OPT_TreeNode_Add_Click(System.Object,System.EventArgs)">
	<summary>
 Handler to manage the adding of a node
 </summary>
	<param name="sender">Object, our sender</param>
	<param name="e">EventArgs, the argument</param>
	<remarks></remarks>
</member><member name="M:LAY_XML_Analyzer_Struct.OPT_TreeNode_Delete_Click(System.Object,System.EventArgs)">
	<summary>
 Handler to manage the delete of a node
 </summary>
	<param name="sender">Object, our sender</param>
	<param name="e">EventArgs, the argument</param>
	<remarks></remarks>
</member><member name="M:LAY_XML_Analyzer_Struct.#ctor">
	<summary>
 Builder by default
 </summary>
	<remarks></remarks>
</member><member name="M:LAY_XML_Analyzer_Struct.#ctor(System.Xml.XmlDocument@)">
	<summary>
 Builders with parameter
 </summary>
	<param name="xmlDoc"></param>
	<remarks></remarks>
</member><member name="T:LAY_XML_Analyzer_Struct">
	<summary>
 Layout to analyse and modify a XML File in his structure
 </summary>
	<remarks></remarks>
</member><member name="M:WIN_LUDO_SEPA_Edition_Cdtr.fillSAI">
	<summary>
 Method to fill the Sai
 </summary>
	<returns>Boolean, True if Done</returns>
	<remarks></remarks>
</member><member name="M:WIN_LUDO_SEPA_Edition_Cdtr.fillDGV">
	<summary>
 Method to fill the Datagridview
 </summary>
	<returns>Boolean, True if done</returns>
	<remarks></remarks>
</member><member name="M:WIN_LUDO_SEPA_Edition_Cdtr.init">
	<summary>
 Method to initialize the Form
 </summary>
	<returns>Boolean, True if done</returns>
	<remarks></remarks>
</member><member name="M:WIN_LUDO_SEPA_Edition_Cdtr.reRank">
	<summary>
 Method to re-order the list of Debitor
 </summary>
	<returns>Boolean, True if Done !</returns>
	<remarks></remarks>
</member><member name="M:WIN_LUDO_SEPA_Edition_Cdtr.Save">
	<summary>
 Method to save the modifications
 </summary>
	<returns>Boolean, True if done</returns>
	<remarks></remarks>
</member><member name="M:WIN_LUDO_SEPA_Edition_Cdtr.SaveAndQuit">
	<summary>
 Method to save and quit
 </summary>
	<returns>Boolean, return the result of Save()</returns>
	<remarks></remarks>
</member><member name="M:WIN_LUDO_SEPA_Edition_Cdtr.delDBTR">
	<summary>
 Method to delete the debitor
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:WIN_LUDO_SEPA_Edition_Cdtr.editDBTR(System.Int32)">
	<summary>
 Method to edit a debitor
 </summary>
	<param name="nIndex">Integer, The number of the Debitor you want edit, if out of number, edit the current line</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:WIN_LUDO_SEPA_Edition_Cdtr.addDBTR">
	<summary>
 Method to add a new Dbtr
 </summary>
	<returns>Boolean, true if done</returns>
	<remarks>This Method call editDBTR()</remarks>
</member><member name="M:WIN_LUDO_SEPA_Edition_Cdtr.#ctor">
	<summary>
 Private and not Used builders
 </summary>
	<remarks></remarks>
</member><member name="M:WIN_LUDO_SEPA_Edition_Cdtr.#ctor(Ludo.SEPA.SEPA_Cdtr@)">
	<summary>
 Builders to edit the Creditor
 </summary>
	<param name="oRef">Ludo.SEPA.SEPA_Cdtr, Creditor we want edit</param>
	<remarks></remarks>
</member><member name="T:WIN_LUDO_SEPA_Edition_Cdtr">
	<summary>
 Windows Form to edit a Sepa Creditor
 </summary>
	<remarks></remarks>
</member><member name="M:Ludo.DTB.ADVANCED.Ludo_DTB_ADVANCED_CODE_MAKER.getDescription">
	<summary>
 Method to get the description of the class
 </summary>
	<returns>string, our description</returns>
	<remarks></remarks>
</member><member name="M:Ludo.DTB.ADVANCED.Ludo_DTB_ADVANCED_CODE_MAKER.writeHeader(Ludo.DTB.Ludo_DTB_Table@,System.String)">
	<summary>
 Method to write the header
 </summary>
	<param name="oTable">Ludo.DTB.Ludo_DTB_Table, our table</param>
	<param name="sFilename">string, our filename</param>
	<returns>string, our code</returns>
	<remarks>It's empty, override it :p</remarks>
</member><member name="M:Ludo.DTB.ADVANCED.Ludo_DTB_ADVANCED_CODE_MAKER.writeMember(Ludo.DTB.Ludo_DTB_Column@,System.String,System.Boolean)">
	<summary>
 Method to write the member of a table
 </summary>
	<param name="oCol">Ludo.DTB.Ludo_DTB_Column, our column</param>
	<param name="sTabulation">string, our tabulation</param>
	<param name="bLast">boolean, to know if we had to add the ","</param>
	<returns>string, the write</returns>
	<remarks>It's empty, override it :p</remarks>
</member><member name="M:Ludo.DTB.ADVANCED.Ludo_DTB_ADVANCED_CODE_MAKER.writeMembers(Ludo.DTB.Ludo_DTB_Table@,System.String)">
	<summary>
 Method to write the members
 (The method calls writeMember for each column)
 </summary>
	<param name="oTable">Ludo.DTB.Ludo_DTB_Table, our table</param>
	<param name="sTabulation">string, our inherited tabulation</param>
	<returns>string, our code</returns>
	<remarks>It's empty, override it :p</remarks>
</member><member name="M:Ludo.DTB.ADVANCED.Ludo_DTB_ADVANCED_CODE_MAKER.writeConstructor(Ludo.DTB.Ludo_DTB_Table@,System.String)">
	<summary>
 Method to write the constructor
 </summary>
	<param name="oTable">Ludo.DTB.Ludo_DTB_Table, our table</param>
	<param name="sTabulation">string, our inherited tabulation</param>
	<returns>string, our code</returns>
	<remarks>It's empty, override it :p</remarks>
</member><member name="M:Ludo.DTB.ADVANCED.Ludo_DTB_ADVANCED_CODE_MAKER.writeGetter(Ludo.DTB.Ludo_DTB_Column@,System.String)">
	<summary>
 Method to write a getter from a column
 </summary>
	<param name="oCol">Ludo.DTB.Ludo_DTB_Column, our column</param>
	<param name="sTabulation">string, our starting tabulation</param>
	<returns>string, our getter function</returns>
	<remarks>It's empty, override it :p</remarks>
</member><member name="M:Ludo.DTB.ADVANCED.Ludo_DTB_ADVANCED_CODE_MAKER.writeGetters(Ludo.DTB.Ludo_DTB_Table@,System.String)">
	<summary>
 Method to write the getters
 </summary>
	<param name="oTable">Ludo.DTB.Ludo_DTB_Table, our table</param>
	<param name="sTabulation">string, our inherited tabulation</param>
	<returns>string, our code</returns>
	<remarks>It's empty, override it :p</remarks>
</member><member name="M:Ludo.DTB.ADVANCED.Ludo_DTB_ADVANCED_CODE_MAKER.writeSetter(Ludo.DTB.Ludo_DTB_Column@,System.String)">
	<summary>
 Method to write a setter
 </summary>
	<param name="oCol">Ludo.DTB.Ludo_DTB_Column, our column</param>
	<param name="sTabulation">string, our starting tabulation</param>
	<returns>string, our code</returns>
	<remarks>It's empty, override it :p</remarks>
</member><member name="M:Ludo.DTB.ADVANCED.Ludo_DTB_ADVANCED_CODE_MAKER.writeSetters(Ludo.DTB.Ludo_DTB_Table@,System.String)">
	<summary>
 Method to write the setters
 </summary>
	<param name="oTable">Ludo.DTB.Ludo_DTB_Table, our table</param>
	<param name="sTabulation">string, our inherited tabulation</param>
	<returns>string, our code</returns>
	<remarks>It's empty, override it :p</remarks>
</member><member name="M:Ludo.DTB.ADVANCED.Ludo_DTB_ADVANCED_CODE_MAKER.writeWorkshop(Ludo.DTB.Ludo_DTB_Table@,System.String)">
	<summary>
 Method to write the workshop section
 </summary>
	<param name="oTable">Ludo.DTB.Ludo_DTB_Table, our table</param>
	<param name="sTabulation">string, our inherited tabulation</param>
	<returns>string, our code</returns>
	<remarks>It's empty, override it :p</remarks>
</member><member name="M:Ludo.DTB.ADVANCED.Ludo_DTB_ADVANCED_CODE_MAKER.writeAmazing(Ludo.DTB.Ludo_DTB_Table@,System.String)">
	<summary>
 Method to write the amazing section (custumized by the coder)
 </summary>
	<param name="oTable">Ludo.DTB.Ludo_DTB_Table, our table</param>
	<param name="sTabulation">string, our inherited tabulation</param>
	<returns>string, our code</returns>
	<remarks>It's empty, override it :p</remarks>
</member><member name="M:Ludo.DTB.ADVANCED.Ludo_DTB_ADVANCED_CODE_MAKER.writeClass(Ludo.DTB.Ludo_DTB_Table@)">
	<summary>
 Method to write a class
 </summary>
	<param name="oTable">Ludo.DTB.Ludo_DTB_Table, our table</param>
	<returns>string, our code</returns>
	<remarks>It's empty, override it :p</remarks>
</member><member name="M:Ludo.DTB.ADVANCED.Ludo_DTB_ADVANCED_CODE_MAKER.writeClasses(Ludo.DTB.Ludo_DTB_Module@,System.Windows.Forms.ProgressBar@,System.String,System.Collections.Generic.List{System.String}@)">
	<summary>
 Method to write the classes files
 </summary>
	<param name="oModule">Ludo.DTB.Ludo_DTB_Module, our module</param>
	<param name="PG_Table">System.Windows.Forms.ProgressBar, our progress bar</param>
	<param name="sPath">string, our path</param>
	<param name="lst_sFiles">list(of string), list of generated files</param>
	<returns>boolean, true if done</returns>
	<remarks>It's empty, override it :p</remarks>
</member><member name="M:Ludo.DTB.ADVANCED.Ludo_DTB_ADVANCED_CODE_MAKER.generate(System.String,System.Windows.Forms.ProgressBar@,System.Windows.Forms.Label@,System.Windows.Forms.ProgressBar@)">
	<summary>
 Method to generate the JS code in a directory
 </summary>
	<param name="sPath">string, our directory</param>
	<param name="PG_Modules">System.Windows.Forms.ProgressBar, our progress bar for the modules</param>
	<param name="LAB_Modules">System.Windows.Forms.Label, our label</param>
	<param name="PG_Table">System.Windows.Forms.ProgressBar, our progress bar for the tables</param>
	<returns>boolean, true if done</returns>
	<remarks>It's empty, override it :p</remarks>
</member><member name="M:Ludo.DTB.ADVANCED.Ludo_DTB_ADVANCED_CODE_MAKER.ToString">
	<summary>
 Override of the toString method
 </summary>
	<returns>string, something fro nothing</returns>
</member><member name="T:Ludo.DTB.ADVANCED.Ludo_DTB_ADVANCED_CODE_MAKER">
	<summary>
 The advanced class of generation :
 =+ It's the right template to generate code 
 </summary>
	<remarks></remarks>
</member><member name="F:LAY_XML_Analyzer_Attribut.xmlDocument">
	<summary>
 Our XML Document
 </summary>
	<remarks></remarks>
</member><member name="F:LAY_XML_Analyzer_Attribut.sAttributName">
	<summary>
 our Attribut name
 </summary>
	<remarks></remarks>
</member><member name="F:LAY_XML_Analyzer_Attribut.sElementPath">
	<summary>
 Our element path
 </summary>
	<remarks>The path is not in XPath</remarks>
</member><member name="E:LAY_XML_Analyzer_Attribut.eDelete">
	<summary>
 our delete event
 </summary>
	<remarks></remarks>
</member><member name="M:LAY_XML_Analyzer_Attribut.init(System.Xml.XmlDocument@,System.String,System.String)">
	<summary>
 Method to init the layout
 </summary>
	<param name="xmlDoc">System.Xml.XmlDocument, our document</param>
	<param name="sPath">String, ournode Path [WARNING : It's not XPath]</param>
	<param name="sName">String, the attribut name</param>
	<returns>Boolean, true if done</returns>
	<remarks>The path is not in XPath</remarks>
</member><member name="M:LAY_XML_Analyzer_Attribut.plots">
	<summary>
 Method to plot the attribut
 </summary>
	<returns>Boolean, true if done</returns>
	<remarks></remarks>
</member><member name="M:LAY_XML_Analyzer_Attribut.save">
	<summary>
 Method to save the change
 </summary>
	<returns>Boolean, true if done</returns>
	<remarks></remarks>
</member><member name="M:LAY_XML_Analyzer_Attribut.getsAttributName">
	<summary>
 Method to get the attribut name
 </summary>
	<returns>String, our attribut's name</returns>
	<remarks></remarks>
</member><member name="M:LAY_XML_Analyzer_Attribut.BTN_Del_Click(System.Object,System.EventArgs)">
	<summary>
 Handler to delete our Attribut
 </summary>
	<param name="sender">Object, sender of the event</param>
	<param name="e">EventArgs, Argument of our signal</param>
	<remarks></remarks>
</member><member name="M:LAY_XML_Analyzer_Attribut.SAI_Value_CTRL_Z(System.Object,System.Windows.Forms.KeyEventArgs)">
	<summary>
 Handler to reset our attribut
 </summary>
	<param name="sender">Object, sender of the event</param>
	<param name="e">System.Windows.Forms.KeyEventArgs, Argument of our signal</param>
	<remarks></remarks>
</member><member name="M:LAY_XML_Analyzer_Attribut.OPT_Reset_Click(System.Object,System.EventArgs)">
	<summary>
 Handler to reset our attribut
 </summary>
	<param name="sender">Object, sender of the event</param>
	<param name="e">EventArgs, Argument of our signal</param>
	<remarks></remarks>
</member><member name="M:LAY_XML_Analyzer_Attribut.#ctor">
	<summary>
 Default Builder
 </summary>
	<remarks></remarks>
</member><member name="M:LAY_XML_Analyzer_Attribut.#ctor(System.Xml.XmlDocument@,System.String,System.String)">
	<summary>
 Builder with parameters
 </summary>
	<param name="xmlDoc">System.Xml.XmlDocument, our document</param>
	<param name="sPath">String, ournode Path [WARNING : It's not XPath]</param>
	<param name="sName">String, the attribut name</param>
	<remarks>The path is not in XPath</remarks>
</member><member name="T:LAY_XML_Analyzer_Attribut">
	<summary>
 Layout to edit an attribut from a XML Element in a XML File
 </summary>
	<remarks></remarks>
</member><member name="F:Ludo.DTB.Consts_Schems.LUDO_DTB_DATA_TYPE_Boolean">
	<summary>
 Constant to note the data type : boolean
 </summary>
	<remarks></remarks>
</member><member name="F:Ludo.DTB.Consts_Schems.LUDO_DTB_DATA_TYPE_Integer">
	<summary>
 Constant to note the data type : integer
 </summary>
	<remarks></remarks>
</member><member name="F:Ludo.DTB.Consts_Schems.LUDO_DTB_DATA_TYPE_Float">
	<summary>
 Constant to note the data type : float
 </summary>
	<remarks></remarks>
</member><member name="F:Ludo.DTB.Consts_Schems.LUDO_DTB_DATA_TYPE_Double">
	<summary>
 Constant to note the data type : double
 </summary>
	<remarks></remarks>
</member><member name="F:Ludo.DTB.Consts_Schems.LUDO_DTB_DATA_TYPE_DateTime">
	<summary>
 Constant to note the data type : datetime
 </summary>
	<remarks></remarks>
</member><member name="F:Ludo.DTB.Consts_Schems.LUDO_DTB_DATA_TYPE_Long">
	<summary>
 Constant to note the data type : long
 </summary>
	<remarks></remarks>
</member><member name="F:Ludo.DTB.Consts_Schems.LUDO_DTB_DATA_TYPE_String">
	<summary>
 Constant to note the data type : string
 </summary>
	<remarks></remarks>
</member><member name="F:Ludo.DTB.Consts_Schems.LUDO_DTB_DATA_TYPE_Pointer">
	<summary>
 Constant to note the data type : pointer
 </summary>
	<remarks></remarks>
</member><member name="F:Ludo.DTB.Consts_Schems.LUDO_DTB_KEY_TYPE_None">
	<summary>
 Constant to note the key type : none
 </summary>
	<remarks></remarks>
</member><member name="F:Ludo.DTB.Consts_Schems.LUDO_DTB_KEY_TYPE_Primary">
	<summary>
 Constant to note the key type : primary (the primary key !)
 </summary>
	<remarks></remarks>
</member><member name="F:Ludo.DTB.Consts_Schems.LUDO_DTB_KEY_TYPE_Unique">
	<summary>
 Constant to note the key type : unique
 </summary>
	<remarks></remarks>
</member><member name="F:Ludo.DTB.Consts_Schems.LUDO_DTB_KEY_TYPE_Other">
	<summary>
 Constant to note the key type : other (not define !)
 </summary>
	<remarks></remarks>
</member><member name="F:Ludo.DTB.Consts_Schems.LUDO_DTB_KEY_TYPE_Foreign">
	<summary>
 Constant to note the key type : froeign (the foreign key !!!)
 </summary>
	<remarks></remarks>
</member><member name="F:Ludo.DTB.Consts_Schems.LUDO_DTB_XML_TAG_ROOT">
	<summary>
 Constant to obtain the Tag in the schema xml file corresponding to : the root node name
 </summary>
	<remarks></remarks>
</member><member name="F:Ludo.DTB.Consts_Schems.LUDO_DTB_XML_TAG_MODULES">
	<summary>
 Constant to obtain the Tag in the schema xml file corresponding to : the modules node container name
 </summary>
	<remarks></remarks>
</member><member name="F:Ludo.DTB.Consts_Schems.LUDO_DTB_XML_TAG_MODULE">
	<summary>
 Constant to obtain the Tag in the schema xml file corresponding to : the module node name
 </summary>
	<remarks></remarks>
</member><member name="F:Ludo.DTB.Consts_Schems.LUDO_DTB_XML_TAG_INFO">
	<summary>
 Constant to obtain the Tag in the schema xml file corresponding to : the info node name
 </summary>
	<remarks></remarks>
</member><member name="F:Ludo.DTB.Consts_Schems.LUDO_DTB_XML_TAG_NAME">
	<summary>
 Constant to obtain the Tag in the schema xml file corresponding to : the name node name
 </summary>
	<remarks></remarks>
</member><member name="F:Ludo.DTB.Consts_Schems.LUDO_DTB_XML_TAG_AUTHOR">
	<summary>
 Constant to obtain the Tag in the schema xml file corresponding to : the author node name
 </summary>
	<remarks></remarks>
</member><member name="F:Ludo.DTB.Consts_Schems.LUDO_DTB_XML_TAG_DT">
	<summary>
 Constant to obtain the Tag in the schema xml file corresponding to : the la modif node name
 </summary>
	<remarks></remarks>
</member><member name="F:Ludo.DTB.Consts_Schems.LUDO_DTB_XML_TAG_COMMENT">
	<summary>
 Constant to obtain the Tag in the schema xml file corresponding to : the comment node name
 </summary>
	<remarks></remarks>
</member><member name="F:Ludo.DTB.Consts_Schems.LUDO_DTB_XML_TAG_IMPORTS">
	<summary>
 Constant to obtain the Tag in the schema xml file corresponding to : the imports node name
 </summary>
	<remarks></remarks>
</member><member name="F:Ludo.DTB.Consts_Schems.LUDO_DTB_XML_TAG_IMPORT">
	<summary>
 Constant to obtain the Tag in the schema xml file corresponding to : one import node name
 </summary>
	<remarks></remarks>
</member><member name="F:Ludo.DTB.Consts_Schems.LUDO_DTB_XML_TAG_TABLES">
	<summary>
 Constant to obtain the Tag in the schema xml file corresponding to : the tables container node name
 </summary>
	<remarks></remarks>
</member><member name="F:Ludo.DTB.Consts_Schems.LUDO_DTB_XML_TAG_TABLE">
	<summary>
 Constant to obtain the Tag in the schema xml file corresponding to : a table
 </summary>
	<remarks></remarks>
</member><member name="F:Ludo.DTB.Consts_Schems.LUDO_DTB_XML_TAG_COLUMNS">
	<summary>
 Constant to obtain the Tag in the schema xml file corresponding to : the columns container node name
 </summary>
	<remarks></remarks>
</member><member name="F:Ludo.DTB.Consts_Schems.LUDO_DTB_XML_TAG_COLUMN">
	<summary>
 Constant to obtain the Tag in the schema xml file corresponding to : a column node name
 </summary>
	<remarks></remarks>
</member><member name="F:Ludo.DTB.Consts_Schems.LUDO_DTB_XML_TAG_DEFAULTVALUE">
	<summary>
 Constant to obtain the Tag in the schema xml file corresponding to : default value node name
 </summary>
	<remarks></remarks>
</member><member name="F:Ludo.DTB.Consts_Schems.LUDO_DTB_XML_ATT_ID">
	<summary>
 Constant to obtain the Attribut in the schema xml file corresponding to : the identity
 </summary>
	<remarks></remarks>
</member><member name="F:Ludo.DTB.Consts_Schems.LUDO_DTB_XML_ATT_VERSION">
	<summary>
 Constant to obtain the Attribut in the schema xml file corresponding to : the version
 </summary>
	<remarks></remarks>
</member><member name="F:Ludo.DTB.Consts_Schems.LUDO_DTB_XML_ATT_NAME">
	<summary>
 Constant to obtain the Attribut in the schema xml file corresponding to : the name
 </summary>
	<remarks></remarks>
</member><member name="F:Ludo.DTB.Consts_Schems.LUDO_DTB_XML_ATT_DEP_NAME">
	<summary>
 Constant to obtain the Attribut in the schema xml file corresponding to : the deployment name
 </summary>
	<remarks></remarks>
</member><member name="F:Ludo.DTB.Consts_Schems.LUDO_DTB_XML_ATT_INHERIT">
	<summary>
 Constant to obtain the Attribut in the schema xml file corresponding to : the inherit path
 </summary>
	<remarks></remarks>
</member><member name="F:Ludo.DTB.Consts_Schems.LUDO_DTB_XML_ATT_ISVIEW">
	<summary>
 Constant to obtain the Attribut in the schema xml file corresponding to : know if the table is a view only
 </summary>
	<remarks></remarks>
</member><member name="F:Ludo.DTB.Consts_Schems.LUDO_DTB_XML_ATT_KEY">
	<summary>
 Constant to obtain the Attribut in the schema xml file corresponding to : the key type
 </summary>
	<remarks></remarks>
</member><member name="F:Ludo.DTB.Consts_Schems.LUDO_DTB_XML_ATT_FOREIGN">
	<summary>
 Constant to obtain the Attribut in the schema xml file corresponding to : the foreign key option
 </summary>
	<remarks></remarks>
</member><member name="F:Ludo.DTB.Consts_Schems.LUDO_DTB_XML_ATT_TYPE">
	<summary>
 Constant to obtain the Attribut in the schema xml file corresponding to : the type
 </summary>
	<remarks></remarks>
</member><member name="F:Ludo.DTB.Consts_Schems.LUDO_DTB_XML_ATT_NULLABLE">
	<summary>
 Constant to obtain the Attribut in the schema xml file corresponding to : learn if the Column is nullable or not !
 </summary>
	<remarks></remarks>
</member><member name="F:Ludo.DTB.Consts_Schems.LUDO_DTB_LANGUAGE_C">
	<summary>
 Constant to obtain the code of the programming langage : C
 </summary>
	<remarks></remarks>
</member><member name="F:Ludo.DTB.Consts_Schems.LUDO_DTB_LANGUAGE_CPP">
	<summary>
 Constant to obtain the code of the programming langage : C++
 </summary>
	<remarks></remarks>
</member><member name="F:Ludo.DTB.Consts_Schems.LUDO_DTB_LANGUAGE_ASM">
	<summary>
 Constant to obtain the code of the programming langage : Assembler
 </summary>
	<remarks></remarks>
</member><member name="F:Ludo.DTB.Consts_Schems.LUDO_DTB_LANGUAGE_VB">
	<summary>
 Constant to obtain the code of the programming langage : Visual Basic
 </summary>
	<remarks></remarks>
</member><member name="F:Ludo.DTB.Consts_Schems.LUDO_DTB_LANGUAGE_C_SHARP">
	<summary>
 Constant to obtain the code of the programming langage : C#
 </summary>
	<remarks></remarks>
</member><member name="F:Ludo.DTB.Consts_Schems.LUDO_DTB_LANGUAGE_JS">
	<summary>
 Constant to obtain the code of the programming langage : Javascript
 </summary>
	<remarks></remarks>
</member><member name="F:Ludo.DTB.Consts_Schems.LUDO_DTB_LANGUAGE_SQL">
	<summary>
 Constant to obtain the code of the programming langage : SQL
 </summary>
	<remarks></remarks>
</member><member name="F:Ludo.DTB.Consts_Schems.LUDO_DTB_LANGUAGE_PERL">
	<summary>
 Constant to obtain the code of the programming langage : Perl
 </summary>
	<remarks></remarks>
</member><member name="F:Ludo.DTB.Consts_Schems.LUDO_DTB_LANGUAGE_PHP">
	<summary>
 Constant to obtain the code of the programming langage : Php
 </summary>
	<remarks></remarks>
</member><member name="F:Ludo.DTB.Consts_Schems.LUDO_DTB_LANGUAGE_DEFAULT">
	<summary>
 Constant to obtain the code of the programming langage by default 
 </summary>
	<remarks></remarks>
</member><member name="F:Ludo.DTB.Consts_Schems.LUDO_DTB_COLUMN_TYPE_DEFAULT">
	<summary>
 constant to get the default column type description
 </summary>
	<remarks></remarks>
</member><member name="F:Ludo.DTB.Consts_Schems.LUDO_DTB_TABLE_TYPE_DEFAULT">
	<summary>
 constant to get the default table type description
 </summary>
	<remarks></remarks>
</member><member name="F:Ludo.DTB.Consts_Schems.LUDO_DTB_MODULE_TYPE_DEFAULT">
	<summary>
 constant to get the default module type description
 </summary>
	<remarks></remarks>
</member><member name="F:Ludo.DTB.Consts_Schems.LUDO_DTB_SCHEMA_TYPE_DEFAULT">
	<summary>
 constant to get the default schema type description
 </summary>
	<remarks></remarks>
</member><member name="F:Ludo.DTB.Consts_Schems.LUDO_DTB_TREENODE_STR_MODULE">
	<summary>
 Constant for module the tree node 
 </summary>
	<remarks></remarks>
</member><member name="F:Ludo.DTB.Consts_Schems.LUDO_DTB_TREENODE_STR_TABLE">
	<summary>
 Constant for table the tree node 
 </summary>
	<remarks></remarks>
</member><member name="F:Ludo.DTB.Consts_Schems.DTB_DEFAULT_CREATION_FILENAME">
	<summary>
 Our default creation file name
 </summary>
	<remarks></remarks>
</member><member name="T:Ludo.DTB.Consts_Schems">
	<summary>
 Class to regroup our Ludo.DTB constant
 </summary>
	<remarks></remarks>
</member><member name="M:Ludo.DTB.Globals.IsWellFormedDependancy(System.String)">
	<summary>
 Function to know if the dependancy is well writed :p
 </summary>
	<param name="sPath">string, dependancy path</param>
	<returns>boolean, true if well formed</returns>
	<remarks></remarks>
</member><member name="M:Ludo.DTB.Globals.GetDependancyParts(System.String)">
	<summary>
 Function to obtain part from dependancy's parts
 </summary>
	<param name="sPath">string, dependancy path</param>
	<returns>List(Of String), our list of path part</returns>
	<remarks></remarks>
</member><member name="M:Ludo.DTB.Globals.getIndexFromLST(System.Collections.Generic.List{Ludo.DTB.Ludo_DTB_Column}@,System.String)">
	<summary>
 Function to obtain an index from a name in a List of Columns
 </summary>
	<param name="lst_oColumns">List(Of Ludo.DTB.Ludo_DTB_Column), our columns</param>
	<param name="sName">String, our column name</param>
	<returns>integer, the index</returns>
	<remarks></remarks>
</member><member name="M:Ludo.DTB.Globals.getColumnsFromLST(System.Collections.Generic.List{Ludo.DTB.Ludo_DTB_Column}@,System.Int32)">
	<summary>
 Function to obtain a Column from a list of Columns with an index
 </summary>
	<param name="lst_oColumns">List(Of Ludo.DTB.Ludo_DTB_Column), our columns</param>
	<param name="nIndex">integer, our column index</param>
	<returns>Ludo.DTB.Ludo_DTB_Column, our column or null</returns>
	<remarks></remarks>
</member><member name="M:Ludo.DTB.Globals.getColumnsFromLST(System.Collections.Generic.List{Ludo.DTB.Ludo_DTB_Column}@,System.String)">
	<summary>
 Function to obtain a Column from a list of Columns with a name
 </summary>
	<param name="lst_oColumns">List(Of Ludo.DTB.Ludo_DTB_Column), our columns</param>
	<param name="sName">String, our column name</param>
	<returns>Ludo.DTB.Ludo_DTB_Column, our column or null</returns>
	<remarks></remarks>
</member><member name="M:Ludo.DTB.Globals.getLstPath(System.Collections.Generic.List{Ludo.DTB.Ludo_DTB_Column}@)">
	<summary>
 Function to obtain a list of path from a list of Columns
 </summary>
	<param name="lst_oColumns">List(Of Ludo.DTB.Ludo_DTB_Column), our columns</param>
	<returns>List(Of String), our list of path (never null)</returns>
	<remarks></remarks>
</member><member name="M:Ludo.DTB.Globals.getIndexFromLST(System.Collections.Generic.List{Ludo.DTB.Ludo_DTB_Table}@,System.String)">
	<summary>
 Function to obtain an index from a name in a List of table
 </summary>
	<param name="lst_oTable">List(Of Ludo.DTB.Ludo_DTB_Table), our list of table</param>
	<param name="sName">string, the true name of the table seeked</param>
	<returns>integer, position of lesser than zero</returns>
	<remarks></remarks>
</member><member name="M:Ludo.DTB.Globals.getTableFromLST(System.Collections.Generic.List{Ludo.DTB.Ludo_DTB_Table}@,System.Int32)">
	<summary>
 Function to obtain a table from a list of table with an index
 </summary>
	<param name="lst_oTable">List(Of Ludo.DTB.Ludo_DTB_Table), our list of table</param>
	<param name="nIndex">integer, our index</param>
	<returns>Ludo.DTB.Ludo_DTB_Table, our table or null</returns>
	<remarks></remarks>
</member><member name="M:Ludo.DTB.Globals.getTableFromLST(System.Collections.Generic.List{Ludo.DTB.Ludo_DTB_Table}@,System.String)">
	<summary>
 Function to obtain a table from a list of table with a name
 </summary>
	<param name="lst_oTable">List(Of Ludo.DTB.Ludo_DTB_Table), our list of table</param>
	<param name="sName">string, our table name</param>
	<returns>Ludo.DTB.Ludo_DTB_Table, our table or null</returns>
	<remarks></remarks>
</member><member name="M:Ludo.DTB.Globals.getLstTableName(System.Collections.Generic.List{Ludo.DTB.Ludo_DTB_Table}@)">
	<summary>
 Function to get a list of table name from a list of table
 </summary>
	<param name="lst_oTable">List(Of Ludo.DTB.Ludo_DTB_Table), our list of table</param>
	<returns>list(Of String), our list of table name or null</returns>
	<remarks></remarks>
</member><member name="M:Ludo.DTB.Globals.getIndexFromLST(System.Collections.Generic.List{Ludo.DTB.Ludo_DTB_Module}@,System.String)">
	<summary>
 Function to obtain an index from a name in a List of module
 </summary>
	<param name="lst_oModule">List(Of Ludo.DTB.Ludo_DTB_Module), our list of Module</param>
	<param name="sName">string, our module name</param>
	<returns>integer, our index</returns>
	<remarks></remarks>
</member><member name="M:Ludo.DTB.Globals.getModuleFromLST(System.Collections.Generic.List{Ludo.DTB.Ludo_DTB_Module}@,System.Int32)">
	<summary>
 Function to obtain a Module from a list of Module with an index
 </summary>
	<param name="lst_oModule">List(Of Ludo.DTB.Ludo_DTB_Module), our list of Module</param>
	<param name="nIndex">integer, our index</param>
	<returns>Ludo.DTB.Ludo_DTB_Module, our module or nothing</returns>
	<remarks></remarks>
</member><member name="M:Ludo.DTB.Globals.getModuleFromLST(System.Collections.Generic.List{Ludo.DTB.Ludo_DTB_Module}@,System.String)">
	<summary>
 Function to obtain a Module from a list of Module with a name
 </summary>
	<param name="lst_oModule">List(Of Ludo.DTB.Ludo_DTB_Module), our list of Module</param>
	<param name="sName">string, our name</param>
	<returns>Ludo.DTB.Ludo_DTB_Module, our module or nothing</returns>
	<remarks></remarks>
</member><member name="M:Ludo.DTB.Globals.getLstModuleName(System.Collections.Generic.List{Ludo.DTB.Ludo_DTB_Module}@)">
	<summary>
 Function to get a list of module name !
 </summary>
	<param name="lst_oModule">List(Of Ludo.DTB.Ludo_DTB_Module), our list of Module</param>
	<returns>list(Of String), our list of module name or null</returns>
	<remarks></remarks>
</member><member name="M:Ludo.DTB.Globals.createComment(System.String,System.Int32)">
	<summary>
 Function to create lines of comment
 </summary>
	<param name="sTxt">string, our comment text</param>
	<param name="nLanguage">intger, our Language</param>
	<returns>string, our commented text</returns>
	<remarks></remarks>
</member><member name="T:Ludo.DTB.Globals">
	<summary>
 Class to regroup all the function to manage the conception elements
 </summary>
	<remarks></remarks>
</member><member name="F:Ludo.DTB.Ludo_DTB_Column.sTrueName">
	<summary>
 our True Name
 </summary>
	<remarks></remarks>
</member><member name="F:Ludo.DTB.Ludo_DTB_Column.sName">
	<summary>
 our deploy Name
 </summary>
	<remarks></remarks>
</member><member name="F:Ludo.DTB.Ludo_DTB_Column.sKey">
	<summary>
 Our Key property
 </summary>
	<remarks></remarks>
</member><member name="F:Ludo.DTB.Ludo_DTB_Column.sForeign">
	<summary>
 Foreign dependancy
 </summary>
	<remarks></remarks>
</member><member name="F:Ludo.DTB.Ludo_DTB_Column.sValueType">
	<summary>
 Value Type
 </summary>
	<remarks></remarks>
</member><member name="F:Ludo.DTB.Ludo_DTB_Column.bNullable">
	<summary>
 Is Nullable
 </summary>
	<remarks></remarks>
</member><member name="F:Ludo.DTB.Ludo_DTB_Column.sDefaultValue">
	<summary>
 Default value
 </summary>
	<remarks></remarks>
</member><member name="F:Ludo.DTB.Ludo_DTB_Column.oParentTable">
	<summary>
 Our parent Table
 </summary>
	<remarks></remarks>
</member><member name="F:Ludo.DTB.Ludo_DTB_Column.sComment">
	<summary>
 Comment :)
 </summary>
	<remarks></remarks>
</member><member name="M:Ludo.DTB.Ludo_DTB_Column.getTrueName">
	<summary>
 Method to get the true name
 </summary>
	<returns>String, our true name</returns>
	<remarks></remarks>
</member><member name="M:Ludo.DTB.Ludo_DTB_Column.getName">
	<summary>
 Method to get the name
 </summary>
	<returns>String, our DTB Name</returns>
	<remarks></remarks>
</member><member name="M:Ludo.DTB.Ludo_DTB_Column.getKeyProperty">
	<summary>
 Method to get the Key type
 </summary>
	<returns>String, our key property</returns>
	<remarks></remarks>
</member><member name="M:Ludo.DTB.Ludo_DTB_Column.getForeignPath">
	<summary>
 Method to get the Foreign dependancy
 </summary>
	<returns>String, the foreign dependancy</returns>
	<remarks></remarks>
</member><member name="M:Ludo.DTB.Ludo_DTB_Column.getValueType">
	<summary>
 Method to get the Value Type
 </summary>
	<returns>String, the type of the value</returns>
	<remarks></remarks>
</member><member name="M:Ludo.DTB.Ludo_DTB_Column.isNullable">
	<summary>
 Method to learn if Is nullable
 </summary>
	<returns>Boolean, is nullable value</returns>
	<remarks></remarks>
</member><member name="M:Ludo.DTB.Ludo_DTB_Column.getDefaultValue">
	<summary>
 Method to obtain the default value
 </summary>
	<returns>String, the default value</returns>
	<remarks></remarks>
</member><member name="M:Ludo.DTB.Ludo_DTB_Column.getTableName">
	<summary>
 Method to obtain the Table Name (It's True Name !)
 </summary>
	<returns>String, the table name</returns>
	<remarks></remarks>
</member><member name="M:Ludo.DTB.Ludo_DTB_Column.getParentTable">
	<summary>
 Method to get our parent table
 </summary>
	<returns>Ludo.DTB.Ludo_DTB_Table, our parent or nothing</returns>
	<remarks></remarks>
</member><member name="M:Ludo.DTB.Ludo_DTB_Column.getModuleName">
	<summary>
 Method to get the Module Name
 </summary>
	<returns>STring, Module name</returns>
	<remarks></remarks>
</member><member name="M:Ludo.DTB.Ludo_DTB_Column.getPath">
	<summary>
 Method to get our path
 </summary>
	<returns>String, Path; Path = ModuleName.TableName.TrueName</returns>
	<remarks></remarks>
</member><member name="M:Ludo.DTB.Ludo_DTB_Column.getListOfDependantPaths">
	<summary>
 Method to know the list of paths that depend from our Column
 </summary>
	<returns>List(Of String), list of dependant elements, returns Null</returns>
	<remarks></remarks>
</member><member name="M:Ludo.DTB.Ludo_DTB_Column.getListOfDependantColumns">
	<summary>
 Method to know the list of Columns(columns) that depend from our Column(cloums)
 </summary>
	<returns>List(Of Ludo.DTB.Ludo_DTB_Column), returns Null</returns>
	<remarks></remarks>
</member><member name="M:Ludo.DTB.Ludo_DTB_Column.getOriginalColumn">
	<summary>
 Method to get the Column we depend !
 </summary>
	<returns>Ludo.DTB.Ludo_DTB_Column, Returns Null</returns>
	<remarks></remarks>
</member><member name="M:Ludo.DTB.Ludo_DTB_Column.getComment">
	<summary>
 Method to get the comment !
 </summary>
	<returns>String, the comment</returns>
	<remarks></remarks>
</member><member name="M:Ludo.DTB.Ludo_DTB_Column.getIndex">
	<summary>
 Method to get the index of the column in the table parent
 </summary>
	<returns>Integer, the index</returns>
	<remarks></remarks>
</member><member name="M:Ludo.DTB.Ludo_DTB_Column.setTrueName(System.String)">
	<summary>
 Method to set the true name
 </summary>
	<param name="sTN">String, our new True Name</param>
	<returns>Boolean, True if done</returns>
	<remarks></remarks>
</member><member name="M:Ludo.DTB.Ludo_DTB_Column.setName(System.String)">
	<summary>
 Method to set the name
 </summary>
	<param name="sN">String, our new name</param>
	<returns>Boolean, True if done</returns>
	<remarks></remarks>
</member><member name="M:Ludo.DTB.Ludo_DTB_Column.setKeyType(System.String)">
	<summary>
 Method to set the Key type
 </summary>
	<param name="sStr">String, the new Key Type</param>
	<returns>Boolean, true if done</returns>
	<remarks></remarks>
</member><member name="M:Ludo.DTB.Ludo_DTB_Column.setForeignDependancy(System.String@)">
	<summary>
 Method to set the Foreign dependancy
 </summary>
	<param name="sStr">String, the foreign dependancy</param>
	<returns>Boolean, true if done</returns>
	<remarks></remarks>
</member><member name="M:Ludo.DTB.Ludo_DTB_Column.setValuetype(System.String)">
	<summary>
 Method to set the Value Type
 </summary>
	<param name="sStr">STring, the new value</param>
	<returns>Boolean, true if done</returns>
	<remarks></remarks>
</member><member name="M:Ludo.DTB.Ludo_DTB_Column.setNullable(System.Boolean)">
	<summary>
 Method to set if Is nullable
 </summary>
	<param name="bValue">Boolean, our new nullable value</param>
	<returns>Boolean, true if done</returns>
	<remarks></remarks>
</member><member name="M:Ludo.DTB.Ludo_DTB_Column.setDefaultValue(System.String)">
	<summary>
 Method to set the default value
 </summary>
	<param name="sStr">String, our new default value</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Ludo.DTB.Ludo_DTB_Column.setTable(Ludo.DTB.Ludo_DTB_Table@)">
	<summary>
 Method to set the Parent table
 </summary>
	<param name="oTable">Ludo.DTB.Ludo_DTB_Table, our new parent table</param>
	<returns>Boolean, true if done</returns>
	<remarks></remarks>
</member><member name="M:Ludo.DTB.Ludo_DTB_Column.setComment(System.String)">
	<summary>
 Method to set the comment
 </summary>
	<param name="sStr">String, our new comment</param>
	<returns>Boolean, true if done</returns>
	<remarks></remarks>
</member><member name="M:Ludo.DTB.Ludo_DTB_Column.loadXML(System.Xml.XmlElement@)">
	<summary>
 Method to load from the XML element
 </summary>
	<param name="oNode">Xml.XmlElement, our xml element</param>
	<returns>Boolean, true if done</returns>
	<remarks></remarks>
</member><member name="M:Ludo.DTB.Ludo_DTB_Column.saveXML(System.Xml.XmlElement@,System.Xml.XmlDocument@)">
	<summary>
 Method to save from Parent node
 </summary>
	<param name="oParent">Xml.XmlElement, parent xml element node, to write our Column</param>
	<param name="oXML">Xml.XmlDocument, our xml document</param>
	<returns>Boolean, true if done</returns>
	<remarks></remarks>
</member><member name="M:Ludo.DTB.Ludo_DTB_Column.isPathColumnExists(System.String)">
	<summary>
 Method to know if another Column exists with the indicate path
 </summary>
	<param name="sPath">String, the path we want test</param>
	<returns>Boolean, true if exists</returns>
	<remarks></remarks>
</member><member name="M:Ludo.DTB.Ludo_DTB_Column.getLayout">
	<summary>
 Method to obtain the layout to edit the column
 </summary>
	<returns>LAY_LUDO_DTB_Column_editor, our editor</returns>
	<remarks></remarks>
</member><member name="M:Ludo.DTB.Ludo_DTB_Column.getAviableType">
	<summary>
 Method to get the aviable list of type in this column object
 </summary>
	<returns>List(Of String), our list of aviable object</returns>
	<remarks></remarks>
</member><member name="M:Ludo.DTB.Ludo_DTB_Column.getColumnType">
	<summary>
 Method to get the type of the column
 </summary>
	<returns>String, the type</returns>
	<remarks></remarks>
</member><member name="M:Ludo.DTB.Ludo_DTB_Column.#ctor">
	<summary>
 default builder
 </summary>
	<remarks></remarks>
</member><member name="M:Ludo.DTB.Ludo_DTB_Column.#ctor(System.Xml.XmlElement@)">
	<summary>
 Builer with XML Node
 </summary>
	<param name="oNode">Xml.XmlElement, node to build</param>
	<remarks>This builder calls the method loadXML</remarks>
</member><member name="T:Ludo.DTB.Ludo_DTB_Column">
	<summary>
 Class to describe a column in a DTB
 </summary>
	<remarks></remarks>
</member><member name="F:Ludo.DTB.Ludo_DTB_Table.oModule">
	<summary>
 our parent module
 </summary>
	<remarks></remarks>
</member><member name="F:Ludo.DTB.Ludo_DTB_Table.sTrueName">
	<summary>
 our True Name
 </summary>
	<remarks></remarks>
</member><member name="F:Ludo.DTB.Ludo_DTB_Table.sName">
	<summary>
 our deploy Name
 </summary>
	<remarks></remarks>
</member><member name="F:Ludo.DTB.Ludo_DTB_Table.sForeign">
	<summary>
 inherit
 </summary>
	<remarks></remarks>
</member><member name="F:Ludo.DTB.Ludo_DTB_Table.bIsView">
	<summary>
 Is view
 </summary>
	<remarks></remarks>
</member><member name="F:Ludo.DTB.Ludo_DTB_Table.lst_oColumns">
	<summary>
 Our Columns
 </summary>
	<remarks></remarks>
</member><member name="F:Ludo.DTB.Ludo_DTB_Table.sComment">
	<summary>
 Comment :)
 </summary>
	<remarks></remarks>
</member><member name="M:Ludo.DTB.Ludo_DTB_Table.getTrueName">
	<summary>
 Method to get the true name
 </summary>
	<returns>String, the true name</returns>
	<remarks></remarks>
</member><member name="M:Ludo.DTB.Ludo_DTB_Table.getName">
	<summary>
 Method to get the name
 </summary>
	<returns>String, the name</returns>
	<remarks></remarks>
</member><member name="M:Ludo.DTB.Ludo_DTB_Table.getForeignPath">
	<summary>
 Method to get the Foreign dependancy
 </summary>
	<returns>String, a dependancy</returns>
	<remarks></remarks>
</member><member name="M:Ludo.DTB.Ludo_DTB_Table.isView">
	<summary>
 Method to know if our table is a view !
 </summary>
	<returns>Boolean, true if it's a view</returns>
	<remarks></remarks>
</member><member name="M:Ludo.DTB.Ludo_DTB_Table.getNumberOfColumns">
	<summary>
 Method to get the number of Columns !
 </summary>
	<returns>Integer, to get the number of columns</returns>
	<remarks></remarks>
</member><member name="M:Ludo.DTB.Ludo_DTB_Table.getIndexOf(System.String)">
	<summary>
 Method to obtain an index from a name (his true name !)
 </summary>
	<param name="sStr">String, </param>
	<returns>Integer, index of the column</returns>
	<remarks></remarks>
</member><member name="M:Ludo.DTB.Ludo_DTB_Table.getColumn(System.Int32)">
	<summary>
 Method to obtain a column from an index
 </summary>
	<param name="nIndex">Integer, index</param>
	<returns>Ludo.DTB.Ludo_DTB_Column</returns>
	<remarks></remarks>
</member><member name="M:Ludo.DTB.Ludo_DTB_Table.getColumn(System.String)">
	<summary>
 Method to obtain a Column from a name (his true name !)
 </summary>
	<param name="sStr">String, Our true Table name</param>
	<returns>Ludo.DTB.Ludo_DTB_Column, our column</returns>
	<remarks></remarks>
</member><member name="M:Ludo.DTB.Ludo_DTB_Table.getColumns">
	<summary>
 Method to obtain Columns
 </summary>
	<returns>List(Of Ludo.DTB.Ludo_DTB_Column), list of the Columns</returns>
	<remarks></remarks>
</member><member name="M:Ludo.DTB.Ludo_DTB_Table.getParentModule">
	<summary>
 Method to obtain the parent module
 </summary>
	<returns>Ludo.DTB.Ludo_DTB_Module, our module</returns>
	<remarks></remarks>
</member><member name="M:Ludo.DTB.Ludo_DTB_Table.getModuleName">
	<summary>
 Method to get the Module Name
 </summary>
	<returns>String, Module Name</returns>
	<remarks></remarks>
</member><member name="M:Ludo.DTB.Ludo_DTB_Table.getModuleAuthor">
	<summary>
 Method to get the module Author
 </summary>
	<returns>String, Author</returns>
	<remarks></remarks>
</member><member name="M:Ludo.DTB.Ludo_DTB_Table.getPath">
	<summary>
 Method to get our path
 </summary>
	<returns>String, our path</returns>
	<remarks></remarks>
</member><member name="M:Ludo.DTB.Ludo_DTB_Table.getComment">
	<summary>
 Method to get the comment !
 </summary>
	<returns>String, our comment</returns>
	<remarks></remarks>
</member><member name="M:Ludo.DTB.Ludo_DTB_Table.getColumnsPath">
	<summary>
 Method to get the list of path of the columns
 </summary>
	<returns>List(Of String), method to get the columns path</returns>
	<remarks></remarks>
</member><member name="M:Ludo.DTB.Ludo_DTB_Table.getColumnsFromPath(System.String)">
	<summary>
 Method to obtain a Column from a path
 </summary>
	<param name="sPath">string, our path</param>
	<returns>Ludo.DTB.Ludo_DTB_Column, our column or nothing</returns>
	<remarks></remarks>
</member><member name="M:Ludo.DTB.Ludo_DTB_Table.getAllPossiblePaths">
	<summary>
 Method to obtain all possible paths
 </summary>
	<returns>List(Of String), list of possible paths</returns>
	<remarks></remarks>
</member><member name="M:Ludo.DTB.Ludo_DTB_Table.setTrueName(System.String)">
	<summary>
 Method to set the true name
 </summary>
	<param name="sTN">String, our new True Name</param>
	<returns>Boolean, True if done</returns>
	<remarks></remarks>
</member><member name="M:Ludo.DTB.Ludo_DTB_Table.setName(System.String)">
	<summary>
 Method to set the name
 </summary>
	<param name="sN">String, our new Name</param>
	<returns>Boolean, True if done</returns>
	<remarks></remarks>
</member><member name="M:Ludo.DTB.Ludo_DTB_Table.setForeignDependancy(System.String@)">
	<summary>
 Method to set the Foreign dependancy
 </summary>
	<param name="sStr">String, our new dependancy</param>
	<returns>Boolean, True if done</returns>
	<remarks></remarks>
</member><member name="M:Ludo.DTB.Ludo_DTB_Table.setView(System.Boolean)">
	<summary>
 Method to set if table is view or not
 </summary>
	<param name="bValue">Boolean, our new value</param>
	<returns>Boolean, our view</returns>
	<remarks></remarks>
</member><member name="M:Ludo.DTB.Ludo_DTB_Table.add(Ludo.DTB.Ludo_DTB_Column)">
	<summary>
 Method to add a column !
 </summary>
	<param name="oColumn">Ludo.DTB.Ludo_DTB_Column our column</param>
	<returns>Boolean, true if done</returns>
	<remarks></remarks>
</member><member name="M:Ludo.DTB.Ludo_DTB_Table.del(System.Int32)">
	<summary>
 Method to delete a column from index !
 </summary>
	<param name="nIndex">Integer, our index</param>
	<returns>Boolean, true if done</returns>
	<remarks></remarks>
</member><member name="M:Ludo.DTB.Ludo_DTB_Table.del(System.String)">
	<summary>
 Method to delete a column from Name (its true name !) !
 </summary>
	<param name="sStr">String, the name of the column</param>
	<returns>Boolean, true if done</returns>
	<remarks></remarks>
</member><member name="M:Ludo.DTB.Ludo_DTB_Table.clearColumns">
	<summary>
 Method to delete all Columns
 </summary>
	<returns>Boolean, true if done</returns>
	<remarks></remarks>
</member><member name="M:Ludo.DTB.Ludo_DTB_Table.setModule(Ludo.DTB.Ludo_DTB_Module@)">
	<summary>
 Method to set the module
 </summary>
	<param name="oMod">Ludo.DTB.Ludo_DTB_Module, our module</param>
	<returns>Boolean, true if done</returns>
	<remarks></remarks>
</member><member name="M:Ludo.DTB.Ludo_DTB_Table.setComment(System.String)">
	<summary>
 Method to set the comment
 </summary>
	<param name="sStr">String, our Comment</param>
	<returns>Boolean, True if done</returns>
	<remarks></remarks>
</member><member name="M:Ludo.DTB.Ludo_DTB_Table.loadXML(System.Xml.XmlElement@)">
	<summary>
 Method to load from the XML node
 </summary>
	<param name="oNode">Xml.XmlElement, our node to read</param>
	<returns>Boolean, true if done</returns>
	<remarks></remarks>
</member><member name="M:Ludo.DTB.Ludo_DTB_Table.saveXML(System.Xml.XmlElement@,System.Xml.XmlDocument@)">
	<summary>
 Method to save from Parent node
 </summary>
	<param name="oParent">Xml.XmlElement, our parent</param>
	<param name="oXML">Xml.XmlDocument, our xml document to create element</param>
	<returns>Boolean, true if node</returns>
	<remarks></remarks>
</member><member name="M:Ludo.DTB.Ludo_DTB_Table.isPathColumnExists(System.String)">
	<summary>
 Method to know if another Column exists with the indicate path
 </summary>
	<param name="sPath">String, path </param>
	<returns>Boolean, true if the column exists</returns>
	<remarks></remarks>
</member><member name="M:Ludo.DTB.Ludo_DTB_Table.getLayout">
	<summary>
 Method to obtain the layout that edit this table
 </summary>
	<returns>LAY_LUDO_DTB_Table_editor, our layout</returns>
	<remarks></remarks>
</member><member name="M:Ludo.DTB.Ludo_DTB_Table.getIDColumn">
	<summary>
 Method to get the Identity column if exists
 </summary>
	<returns>Ludo.DTB.Ludo_DTB_Column, our identity column</returns>
	<remarks>Identity can be Primary Key, our unique with foreign path</remarks>
</member><member name="M:Ludo.DTB.Ludo_DTB_Table.getTableType">
	<summary>
 Method to get our table type
 </summary>
	<returns>String, our type</returns>
	<remarks></remarks>
</member><member name="M:Ludo.DTB.Ludo_DTB_Table.#ctor">
	<summary>
 Default Builder
 </summary>
	<remarks></remarks>
</member><member name="M:Ludo.DTB.Ludo_DTB_Table.#ctor(System.Xml.XmlElement@)">
	<summary>
 Builder From XML node !
 </summary>
	<param name="oNode"></param>
	<remarks></remarks>
</member><member name="T:Ludo.DTB.Ludo_DTB_Table">
	<summary>
 Class to describe a table in a DTB
 </summary>
	<remarks></remarks>
</member><member name="F:Ludo.DTB.Ludo_DTB_Module.oSchem">
	<summary>
 Our Schem !
 </summary>
	<remarks></remarks>
</member><member name="F:Ludo.DTB.Ludo_DTB_Module.sId">
	<summary>
 our ID
 </summary>
	<remarks></remarks>
</member><member name="F:Ludo.DTB.Ludo_DTB_Module.sName">
	<summary>
 our deploy Name
 </summary>
	<remarks></remarks>
</member><member name="F:Ludo.DTB.Ludo_DTB_Module.sAuthor">
	<summary>
 our Author
 </summary>
	<remarks></remarks>
</member><member name="F:Ludo.DTB.Ludo_DTB_Module.sDT">
	<summary>
 our Date Time
 </summary>
	<remarks></remarks>
</member><member name="F:Ludo.DTB.Ludo_DTB_Module.sComment">
	<summary>
 our comment 
 </summary>
	<remarks></remarks>
</member><member name="F:Ludo.DTB.Ludo_DTB_Module.lst_sImport">
	<summary>
 Our import list
 </summary>
	<remarks></remarks>
</member><member name="F:Ludo.DTB.Ludo_DTB_Module.lst_oTable">
	<summary>
 Our Table !
 </summary>
	<remarks></remarks>
</member><member name="M:Ludo.DTB.Ludo_DTB_Module.getParentSchema">
	<summary>
 Method to get the schema
 </summary>
	<returns>Ludo.DTB.Ludo_DTB_Schema, our schema</returns>
	<remarks></remarks>
</member><member name="M:Ludo.DTB.Ludo_DTB_Module.getId">
	<summary>
 Method to get Id
 </summary>
	<returns>String, our ID</returns>
	<remarks></remarks>
</member><member name="M:Ludo.DTB.Ludo_DTB_Module.getName">
	<summary>
 Method to get the name
 </summary>
	<returns>String, our name</returns>
	<remarks></remarks>
</member><member name="M:Ludo.DTB.Ludo_DTB_Module.getAuthor">
	<summary>
 Method to get Author
 </summary>
	<returns>String, our Author</returns>
	<remarks></remarks>
</member><member name="M:Ludo.DTB.Ludo_DTB_Module.getDT">
	<summary>
 Method to get our Date Time
 </summary>
	<returns>String, our DT</returns>
	<remarks></remarks>
</member><member name="M:Ludo.DTB.Ludo_DTB_Module.getComment">
	<summary>
 Method to get the comment !
 </summary>
	<returns>String, our comment</returns>
	<remarks></remarks>
</member><member name="M:Ludo.DTB.Ludo_DTB_Module.getNumberOfImports">
	<summary>
 Method to get the number of import
 </summary>
	<returns>Integer, our number of imports</returns>
	<remarks></remarks>
</member><member name="M:Ludo.DTB.Ludo_DTB_Module.getImportList">
	<summary>
 Method to get import list
 </summary>
	<returns>List(Of String), our list of imports</returns>
	<remarks></remarks>
</member><member name="M:Ludo.DTB.Ludo_DTB_Module.getTableList">
	<summary>
 Method to get Table list
 </summary>
	<returns>List(Of Ludo.DTB.Ludo_DTB_Table), our list of table</returns>
	<remarks></remarks>
</member><member name="M:Ludo.DTB.Ludo_DTB_Module.getNumberOfTables">
	<summary>
 Method to get the number of Table
 </summary>
	<returns>Integer, number of tables</returns>
	<remarks></remarks>
</member><member name="M:Ludo.DTB.Ludo_DTB_Module.getPath">
	<summary>
 Method to get our path
 </summary>
	<returns>String, our path</returns>
	<remarks></remarks>
</member><member name="M:Ludo.DTB.Ludo_DTB_Module.getTableIndex(System.String)">
	<summary>
 Method to get an index from a true name table
 </summary>
	<param name="sName">String, Our table true name</param>
	<returns>Integer, our table index</returns>
	<remarks></remarks>
</member><member name="M:Ludo.DTB.Ludo_DTB_Module.getTable(System.Int32)">
	<summary>
 Method to obtain a Table from an index
 </summary>
	<param name="nIndex">Integer, our index</param>
	<returns>Ludo.DTB.Ludo_DTB_Table, our table</returns>
	<remarks></remarks>
</member><member name="M:Ludo.DTB.Ludo_DTB_Module.getTable(System.String)">
	<summary>
 Method to obtain a Table from a Name
 </summary>
	<param name="sName">String, our table name</param>
	<returns>Ludo.DTB.Ludo_DTB_Table, our table</returns>
	<remarks></remarks>
</member><member name="M:Ludo.DTB.Ludo_DTB_Module.getTableNames">
	<summary>
 Method to get Table names
 </summary>
	<returns>List(Of String), our list of table name</returns>
	<remarks></remarks>
</member><member name="M:Ludo.DTB.Ludo_DTB_Module.getTables">
	<summary>
 Method to get Tables
 </summary>
	<returns>List(Of Ludo.DTB.Ludo_DTB_Table), list of the tables of the module</returns>
	<remarks></remarks>
</member><member name="M:Ludo.DTB.Ludo_DTB_Module.getAllPossiblePaths">
	<summary>
 Method to obtain all possible paths
 </summary>
	<returns>List(Of String), our list</returns>
	<remarks></remarks>
</member><member name="M:Ludo.DTB.Ludo_DTB_Module.getColumnsFromPath(System.String)">
	<summary>
 Method to obtain a Column from a path
 </summary>
	<param name="sPath">string, our path</param>
	<returns>Ludo.DTB.Ludo_DTB_Column, our column or nothing</returns>
	<remarks></remarks>
</member><member name="M:Ludo.DTB.Ludo_DTB_Module.setSchem(Ludo.DTB.Ludo_DTB_Schema@)">
	<summary>
 Method to set our schem
 </summary>
	<param name="oSch">Ludo.DTB.Ludo_DTB_Schema, our schema for our Database</param>
	<returns>Boolean, true if done</returns>
	<remarks></remarks>
</member><member name="M:Ludo.DTB.Ludo_DTB_Module.setID(System.String)">
	<summary>
 Method to set our ID
 </summary>
	<param name="sStr">String, our new Identity</param>
	<returns>Boolean, true if done</returns>
	<remarks></remarks>
</member><member name="M:Ludo.DTB.Ludo_DTB_Module.setName(System.String)">
	<summary>
 Method to set the name
 </summary>
	<param name="sN">String, our new name</param>
	<returns>Boolean, true if done</returns>
	<remarks></remarks>
</member><member name="M:Ludo.DTB.Ludo_DTB_Module.setAuthor(System.String)">
	<summary>
 Method to set the author
 </summary>
	<param name="sATH">String, our author</param>
	<returns>Boolean, True</returns>
	<remarks></remarks>
</member><member name="M:Ludo.DTB.Ludo_DTB_Module.setDT(System.String)">
	<summary>
 Method to set DateTime
 </summary>
	<param name="sNDT">String, our date time</param>
	<returns>Boolean, true if done</returns>
	<remarks></remarks>
</member><member name="M:Ludo.DTB.Ludo_DTB_Module.setComment(System.String)">
	<summary>
 Method to set the comment
 </summary>
	<param name="sStr">String, our comment</param>
	<returns>Boolean, true if done</returns>
	<remarks></remarks>
</member><member name="M:Ludo.DTB.Ludo_DTB_Module.addImport(System.String@)">
	<summary>
 Method to add an import
 </summary>
	<param name="sImport">String, our import</param>
	<returns>Boolean, true if done</returns>
	<remarks></remarks>
</member><member name="M:Ludo.DTB.Ludo_DTB_Module.delImport(System.Int32)">
	<summary>
 Method to del an import from index
 </summary>
	<param name="nIndex">Integer, index we want delete</param>
	<returns>Boolean, True if done</returns>
	<remarks></remarks>
</member><member name="M:Ludo.DTB.Ludo_DTB_Module.delImport(System.String)">
	<summary>
 Method to del an import from string value
 </summary>
	<param name="sImport">String, </param>
	<returns>Boolean, True if done</returns>
	<remarks></remarks>
</member><member name="M:Ludo.DTB.Ludo_DTB_Module.clearImports">
	<summary>
 Method to clear all the imports
 </summary>
	<returns>Boolean, True if done</returns>
	<remarks></remarks>
</member><member name="M:Ludo.DTB.Ludo_DTB_Module.addTable(Ludo.DTB.Ludo_DTB_Table@)">
	<summary>
 Method to add a table
 </summary>
	<param name="oTable">Ludo.DTB.Ludo_DTB_Table, Our table we add</param>
	<returns>Boolean, true if done</returns>
	<remarks></remarks>
</member><member name="M:Ludo.DTB.Ludo_DTB_Module.delTable(System.Int32)">
	<summary>
 Method to delete a table from index
 </summary>
	<param name="nIndex">Integer, our index of the table we want delete</param>
	<returns>Boolean, true</returns>
	<remarks></remarks>
</member><member name="M:Ludo.DTB.Ludo_DTB_Module.delTable(System.String)">
	<summary>
 Method to del a table from string value
 </summary>
	<param name="sName">String, our new module name</param>
	<returns>Boolean, true if done</returns>
	<remarks></remarks>
</member><member name="M:Ludo.DTB.Ludo_DTB_Module.clearTables">
	<summary>
 Method to clear all the tables
 </summary>
	<returns>Boolean, true if done</returns>
	<remarks></remarks>
</member><member name="M:Ludo.DTB.Ludo_DTB_Module.loadXML(System.Xml.XmlElement@,System.Windows.Forms.Label@,System.Windows.Forms.ProgressBar@)">
	<summary>
 Method to load from the XML node
 </summary>
	<param name="oNode">Xml.XmlElement, the node we use to load</param>
	<param name="LAB_Module">[OPTIONAL] Label, </param>
	<param name="PG_Tables">[OPTIONAL] ProgressBar, our progress bar</param>
	<returns>Boolean, true if done</returns>
	<remarks></remarks>
</member><member name="M:Ludo.DTB.Ludo_DTB_Module.saveXML(System.Xml.XmlElement@,System.Xml.XmlDocument@,System.Windows.Forms.Label@,System.Windows.Forms.ProgressBar@)">
	<summary>
 Method to save from Parent node
 </summary>
	<param name="oParent">System.Xml.XmlElement, the parent node to save</param>
	<param name="oXML">System.Xml.XmlDocument, xml document to create node</param>
	<param name="LAB_Module">[OPTIONAL] LABEL, label to plot the progression</param>
	<param name="PG_Tables">[OPTIONAL] ProgressBar, to show the progression</param>
	<returns>Boolean, true if done</returns>
	<remarks></remarks>
</member><member name="M:Ludo.DTB.Ludo_DTB_Module.isPathColumnExists(System.String)">
	<summary>
 to know if another Column exists with the indicate path
 </summary>
	<param name="sPath">String, the path of the column </param>
	<returns>Boolean, true if the path exists</returns>
	<remarks></remarks>
</member><member name="M:Ludo.DTB.Ludo_DTB_Module.getLayout">
	<summary>
 Method to get the lay to edit the 
 </summary>
	<returns>LAY_LUDO_DTB_Module_editor, our layout to edit the current module</returns>
	<remarks></remarks>
</member><member name="M:Ludo.DTB.Ludo_DTB_Module.getModuleType">
	<summary>
 Method to return the module type
 </summary>
	<returns>String, our type</returns>
	<remarks></remarks>
</member><member name="M:Ludo.DTB.Ludo_DTB_Module.#ctor">
	<summary>
 Builder by default
 </summary>
	<remarks></remarks>
</member><member name="M:Ludo.DTB.Ludo_DTB_Module.#ctor(System.Xml.XmlElement@,System.Windows.Forms.Label@,System.Windows.Forms.ProgressBar@)">
	<summary>
 Builder With Load !
 </summary>
	<param name="oNode">Xml.XmlElement, </param>
	<param name="LAB_Module">[OPTIONAL] LABEL, label to plot the progression</param>
	<param name="PG_Tables">[OPTIONAL] ProgressBar, to show the progression</param>
	<remarks></remarks>
</member><member name="T:Ludo.DTB.Ludo_DTB_Module">
	<summary>
 Class to describe a module
 </summary>
	<remarks></remarks>
</member><member name="F:Ludo.DTB.Ludo_DTB_Schema.lst_oModule">
	<summary>
 Our list of module
 </summary>
	<remarks></remarks>
</member><member name="M:Ludo.DTB.Ludo_DTB_Schema.getModules">
	<summary>
 Method to get the list of Module
 </summary>
	<returns>List(Of Ludo.DTB.Ludo_DTB_Module), our list</returns>
	<remarks></remarks>
</member><member name="M:Ludo.DTB.Ludo_DTB_Schema.getNumberOfModule">
	<summary>
 Method to get the number of module
 </summary>
	<returns>integer, our number of module</returns>
	<remarks></remarks>
</member><member name="M:Ludo.DTB.Ludo_DTB_Schema.getModulesName">
	<summary>
 Method to get Module names
 </summary>
	<returns>List(Of String), our list of module names</returns>
	<remarks></remarks>
</member><member name="M:Ludo.DTB.Ludo_DTB_Schema.getModuleIndex(System.String)">
	<summary>
 Method to get the index of a module from name
 </summary>
	<param name="sName">string, our seeked module name</param>
	<returns>integer, our position or lesser than zero</returns>
	<remarks></remarks>
</member><member name="M:Ludo.DTB.Ludo_DTB_Schema.getModule(System.Int32)">
	<summary>
 Method to get module by index
 </summary>
	<param name="nIndex">integer, our index</param>
	<returns>Ludo.DTB.Ludo_DTB_Module, our module or null</returns>
	<remarks></remarks>
</member><member name="M:Ludo.DTB.Ludo_DTB_Schema.getModule(System.String)">
	<summary>
 Method to get module by name
 </summary>
	<param name="sName">string, our module name</param>
	<returns>Ludo.DTB.Ludo_DTB_Module, our module or null</returns>
	<remarks></remarks>
</member><member name="M:Ludo.DTB.Ludo_DTB_Schema.getTable(System.String)">
	<summary>
 Method to get a Table from a Path
 </summary>
	<param name="sPath">string, our path</param>
	<returns>Ludo.DTB.Ludo_DTB_Table</returns>
	<remarks></remarks>
</member><member name="M:Ludo.DTB.Ludo_DTB_Schema.getAllPossiblePaths">
	<summary>
 Method to obtain all possible paths
 </summary>
	<returns>List(Of string), our list of possible paths</returns>
	<remarks></remarks>
</member><member name="M:Ludo.DTB.Ludo_DTB_Schema.getColumnsFromPath(System.String)">
	<summary>
 Method to obtain a Column from a path
 </summary>
	<param name="sPath">string, our path</param>
	<returns>Ludo.DTB.Ludo_DTB_Column, our column or nothing</returns>
	<remarks></remarks>
</member><member name="M:Ludo.DTB.Ludo_DTB_Schema.addModule(Ludo.DTB.Ludo_DTB_Module@)">
	<summary>
 Method to add a Module
 </summary>
	<param name="oModule">Ludo.DTB.Ludo_DTB_Module, our module</param>
	<returns>Boolean, true if done</returns>
	<remarks></remarks>
</member><member name="M:Ludo.DTB.Ludo_DTB_Schema.delModule(System.Int32)">
	<summary>
 Method to delete a module from index
 </summary>
	<param name="nIndex">integer, our module index</param>
	<returns>Boolean, true if done</returns>
	<remarks></remarks>
</member><member name="M:Ludo.DTB.Ludo_DTB_Schema.delModule(System.String)">
	<summary>
 Method to delete a module from Name
 </summary>
	<param name="sName">string, our module name</param>
	<returns>Boolean, true if done</returns>
	<remarks></remarks>
</member><member name="M:Ludo.DTB.Ludo_DTB_Schema.clearModule">
	<summary>
 Method to clear all modules
 </summary>
	<returns>Boolean, true if done</returns>
	<remarks></remarks>
</member><member name="M:Ludo.DTB.Ludo_DTB_Schema.import(System.String,System.Windows.Forms.ProgressBar@,System.Windows.Forms.Label@,System.Windows.Forms.ProgressBar@)">
	<summary>
 Method to import modules from filename
 </summary>
	<param name="sFilename">string, our file name</param>
	<param name="PG_Modules">[Optional]System.Windows.Forms.ProgressBar, control to show the progression by modules</param>
	<param name="LAB_Module">[Optional]System.Windows.Forms.Label, control to show the progression with a text text</param>
	<param name="PG_Tables">[Optional]System.Windows.Forms.ProgressBar, control to show the progression in a module by Tables</param>
	<returns>boolean, true if done</returns>
	<remarks></remarks>
</member><member name="M:Ludo.DTB.Ludo_DTB_Schema.import(System.IO.StreamReader@,System.Windows.Forms.ProgressBar@,System.Windows.Forms.Label@,System.Windows.Forms.ProgressBar@)">
	<summary>
 Method to import module from stream
 </summary>
	<param name="oStream">System.IO.StreamReader, our stream</param>
	<param name="PG_Modules">[Optional]System.Windows.Forms.ProgressBar, control to show the progression by modules</param>
	<param name="LAB_Module">[Optional]System.Windows.Forms.Label, control to show the progression with a text text</param>
	<param name="PG_Tables">[Optional]System.Windows.Forms.ProgressBar, control to show the progression in a module by Tables</param>
	<returns>boolean, true if done</returns>
	<remarks></remarks>
</member><member name="M:Ludo.DTB.Ludo_DTB_Schema.load(System.String,System.Boolean,System.Windows.Forms.ProgressBar@,System.Windows.Forms.Label@,System.Windows.Forms.ProgressBar@)">
	<summary>
 Method to load from filename
 </summary>
	<param name="sFilename">string, our file name</param>
	<param name="bImport">boolean, import only</param>
	<param name="PG_Modules">[Optional]System.Windows.Forms.ProgressBar, control to show the progression by modules</param>
	<param name="LAB_Module">[Optional]System.Windows.Forms.Label, control to show the progression with a text text</param>
	<param name="PG_Tables">[Optional]System.Windows.Forms.ProgressBar, control to show the progression in a module by Tables</param>
	<returns>boolean, true if done</returns>
	<remarks></remarks>
</member><member name="M:Ludo.DTB.Ludo_DTB_Schema.load(System.IO.StreamReader@,System.Boolean,System.Windows.Forms.ProgressBar@,System.Windows.Forms.Label@,System.Windows.Forms.ProgressBar@)">
	<summary>
 Method to load from streamReader !
 </summary>
	<param name="oStream">System.IO.StreamReader, our stream</param>
	<param name="bImport">boolean, import only</param>
	<param name="PG_Modules">[Optional]System.Windows.Forms.ProgressBar, control to show the progression by modules</param>
	<param name="LAB_Module">[Optional]System.Windows.Forms.Label, control to show the progression with a text text</param>
	<param name="PG_Tables">[Optional]System.Windows.Forms.ProgressBar, control to show the progression in a module by Tables</param>
	<returns>boolean, true if done</returns>
	<remarks></remarks>
</member><member name="M:Ludo.DTB.Ludo_DTB_Schema.save(System.String,System.Windows.Forms.ProgressBar@,System.Windows.Forms.Label@,System.Windows.Forms.ProgressBar@)">
	<summary>
 Method save in the file name
 </summary>
	<param name="sFilename">string, our file name</param>
	<param name="PG_Modules">[Optional]System.Windows.Forms.ProgressBar, control to show the progression by modules</param>
	<param name="LAB_Module">[Optional]System.Windows.Forms.Label, control to show the progression with a text text</param>
	<param name="PG_Tables">[Optional]System.Windows.Forms.ProgressBar, control to show the progression in a module by Tables</param>
	<returns>boolean, true if done</returns>
	<remarks></remarks>
</member><member name="M:Ludo.DTB.Ludo_DTB_Schema.save(System.IO.StreamWriter@,System.Windows.Forms.ProgressBar@,System.Windows.Forms.Label@,System.Windows.Forms.ProgressBar@)">
	<summary>
 Method to save in the stream
 </summary>
	<param name="oStream">System.IO.StreamWriter, our stream</param>
	<param name="PG_Modules">[Optional]System.Windows.Forms.ProgressBar, control to show the progression by modules</param>
	<param name="LAB_Module">[Optional]System.Windows.Forms.Label, control to show the progression with a text text</param>
	<param name="PG_Tables">[Optional]System.Windows.Forms.ProgressBar, control to show the progression in a module by Tables</param>
	<returns>boolean, true if done</returns>
	<remarks></remarks>
</member><member name="M:Ludo.DTB.Ludo_DTB_Schema.isPathColumnExists(System.String)">
	<summary>
 Method to know if another column exists with the indicate path
 </summary>
	<param name="sPath">string, our path</param>
	<returns>Boolean, if existes</returns>
	<remarks></remarks>
</member><member name="M:Ludo.DTB.Ludo_DTB_Schema.getSchemaType">
	<summary>
 Method to get the type of the schema
 </summary>
	<returns>String, our schema type</returns>
	<remarks></remarks>
</member><member name="M:Ludo.DTB.Ludo_DTB_Schema.#ctor">
	<summary>
 Our default builder
 </summary>
	<remarks></remarks>
</member><member name="M:Ludo.DTB.Ludo_DTB_Schema.#ctor(System.String)">
	<summary>
 Our builder loading data from a file
 </summary>
	<param name="sFilename">string, our file name</param>
	<remarks></remarks>
</member><member name="M:Ludo.DTB.Ludo_DTB_Schema.#ctor(System.IO.StreamReader@)">
	<summary>
 Our builder loading from streamReader !
 </summary>
	<param name="oStream"></param>
	<remarks></remarks>
</member><member name="T:Ludo.DTB.Ludo_DTB_Schema">
	<summary>
 Class to describe a DTB Schema
 </summary>
	<remarks></remarks>
</member><member name="T:Ludo.UP.Ludo_Up_Ops">
	<summary>
 Operation class
 </summary>
	<remarks></remarks>
</member><member name="T:Ludo.UP.Ludo_Up_Ops_Special">
	<summary>
 Custom class inherit from the Original
 </summary>
	<remarks></remarks>
</member><member name="T:Ludo.UP.Ludo_Up_Ops_CRT">
	<summary>
 Class to create a new file when we Update
 </summary>
	<remarks></remarks>
</member><member name="T:Ludo.UP.Ludo_Up_Ops_UPG">
	<summary>
 Class to replace a file when we Update
 </summary>
	<remarks></remarks>
</member><member name="T:Ludo.UP.Ludo_Up_Ops_DEL">
	<summary>
 Class to delete a file when we Update
 </summary>
	<remarks></remarks>
</member><member name="T:Ludo.UP.Ludo_Up">
	<summary>
 Class to do the Update
 </summary>
	<remarks></remarks>
</member><member name="M:LUDO_CTRL_LIST.getSystemWindowsFormsListBox">
	<summary>
 Method to get the original List box object
 </summary>
	<returns>System.Windows.Forms.ListBox</returns>
	<remarks></remarks>
</member><member name="P:LUDO_CTRL_LIST.Text">
	<summary>
 Property to set the text
 </summary>
	<value>String, our value !</value>
	<returns>String, our text</returns>
	<remarks></remarks>
</member><member name="P:LUDO_CTRL_LIST.Font">
	<summary>
 Property to manage the font of the Textbox
 </summary>
	<value>Font, our new font</value>
	<returns>Font, our font</returns>
	<remarks></remarks>
</member><member name="P:LUDO_CTRL_LIST.Enabled">
	<summary>
 Property to managed the enableness
 </summary>
	<value>boolean, the value</value>
	<returns>Boolean, is enabled or not !!!</returns>
	<remarks></remarks>
</member><member name="P:LUDO_CTRL_LIST.ScrollAlwaysVisible">
	<summary>
 Property to manage the scrollbar in the List field
 </summary>
	<value>System.Windows.Forms.ScrollBars, our new scroll type</value>
	<returns>System.Windows.Forms.ScrollBars, our scroll used</returns>
	<remarks></remarks>
</member><member name="P:LUDO_CTRL_LIST.SelectionMode">
	<summary>
 Property tp manage the selection
 </summary>
	<value>System.Windows.Forms.SelectionMode(integer in fact), our new mode</value>
	<returns>System.Windows.Forms.SelectionMode(integer in fact), get the mode</returns>
	<remarks></remarks>
</member><member name="P:LUDO_CTRL_LIST.SelectedIndex">
	<summary>
 Property to select an index
 </summary>
	<value>Integer, the new index</value>
	<returns>Integer, our index</returns>
	<remarks></remarks>
</member><member name="P:LUDO_CTRL_LIST.SelectedIndices">
	<summary>
 Property to manage the selected indices
 </summary>
	<returns>System.Windows.Forms.ListBox.SelectedIndexCollection, list of selected value</returns>
	<remarks></remarks>
</member><member name="P:LUDO_CTRL_LIST.SelectedItem">
	<summary>
 Property to select the item 
 </summary>
	<value>Object, our new selected item</value>
	<returns>Object, our selected object</returns>
	<remarks></remarks>
</member><member name="P:LUDO_CTRL_LIST.SelectedItems">
	<summary>
 Property to manage the selected Item
 </summary>
	<returns>System.Windows.Forms.ListBox.SelectedObjectCollection, our list of selected item</returns>
	<remarks></remarks>
</member><member name="P:LUDO_CTRL_LIST.SelectedKeyValues">
	<summary>
 Property to manage the selected keyvalue
 </summary>
	<returns>List(Of KeyValue), our list of selected Key value</returns>
	<remarks></remarks>
</member><member name="P:LUDO_CTRL_LIST.SelectedValue">
	<summary>
 Property to manage the selected value
 </summary>
	<value>Object, our new selected value</value>
	<returns>Object, our selected value</returns>
	<remarks></remarks>
</member><member name="P:LUDO_CTRL_LIST.DataSource">
	<summary>
 Property to manage the data source
 </summary>
	<value>Object, our new data source</value>
	<returns>Object, our data source</returns>
	<remarks></remarks>
</member><member name="P:LUDO_CTRL_LIST.Items">
	<summary>
 Property to manage the Item of the List
 </summary>
	<value>System.Windows.Forms.ListBox.ObjectCollection, our list of object</value>
	<returns>System.Windows.Forms.ListBox.ObjectCollection, our list of object</returns>
	<remarks></remarks>
</member><member name="M:LUDO_CTRL_LIST.HANDLER_Click(System.Object,System.EventArgs)">
	<summary>
 Handler to manage the keyUp
 </summary>
	<param name="sender">Object, the sender of the event</param>
	<param name="e">System.Windows.Forms.KeyEventArgs, our event arg</param>
	<remarks></remarks>
</member><member name="M:LUDO_CTRL_LIST.HANDLER_KeyUp(System.Object,System.Windows.Forms.KeyEventArgs)">
	<summary>
 Handler to manage the keyUp
 </summary>
	<param name="sender">Object, the sender of the event</param>
	<param name="e">System.Windows.Forms.KeyEventArgs, our event arg</param>
	<remarks></remarks>
</member><member name="M:LUDO_CTRL_LIST.HANDLER_KeyDown(System.Object,System.Windows.Forms.KeyEventArgs)">
	<summary>
 Handler to manage the keyDown
 </summary>
	<param name="sender">Object, the sender of the event</param>
	<param name="e">System.Windows.Forms.KeyEventArgs, our event arg</param>
	<remarks></remarks>
</member><member name="M:LUDO_CTRL_LIST.HANDLER_KeyPress(System.Object,System.Windows.Forms.KeyPressEventArgs)">
	<summary>
 Handler to manage the keyPress
 </summary>
	<param name="sender">Object, the sender of the event</param>
	<param name="e">System.Windows.Forms.KeyEventArgs, our event arg</param>
	<remarks></remarks>
</member><member name="M:LUDO_CTRL_LIST.#ctor">
	<summary>
 Builder
 </summary>
	<remarks></remarks>
</member><member name="T:LUDO_CTRL_LIST">
	<summary>
 Layout to have a List field with label
 </summary>
	<remarks></remarks>
</member><member name="F:Ludo.CTRL.Ludo_ProgressBar.nMaximum">
	<summary>
 Our maximum value
 </summary>
	<remarks></remarks>
</member><member name="F:Ludo.CTRL.Ludo_ProgressBar.nMinimum">
	<summary>
 Our minimum value
 </summary>
	<remarks></remarks>
</member><member name="F:Ludo.CTRL.Ludo_ProgressBar.nStep">
	<summary>
 Our step to progress
 </summary>
	<remarks></remarks>
</member><member name="F:Ludo.CTRL.Ludo_ProgressBar.nValue">
	<summary>
 Our value
 </summary>
	<remarks></remarks>
</member><member name="F:Ludo.CTRL.Ludo_ProgressBar.bVerbose">
	<summary>
 Did we want some text ?
 </summary>
	<remarks></remarks>
</member><member name="F:Ludo.CTRL.Ludo_ProgressBar.bPercent">
	<summary>
 Our progression is texted in Percent our in brut ?
 </summary>
	<remarks></remarks>
</member><member name="F:Ludo.CTRL.Ludo_ProgressBar.sOperationText">
	<summary>
 Text of the progression
 </summary>
	<remarks></remarks>
</member><member name="F:Ludo.CTRL.Ludo_ProgressBar.sText">
	<summary>
 Message to plots
 </summary>
	<remarks></remarks>
</member><member name="F:Ludo.CTRL.Ludo_ProgressBar.nPositiveColor">
	<summary>
 The Positive color
 </summary>
	<remarks></remarks>
</member><member name="F:Ludo.CTRL.Ludo_ProgressBar.nNegativeColor">
	<summary>
 The Negative Color
 </summary>
	<remarks></remarks>
</member><member name="M:Ludo.CTRL.Ludo_ProgressBar.Increment(System.Int32)">
	<summary>
 Method to increment the value of the Prog
 </summary>
	<param name="value">Integer, value</param>
	<returns>Boolean, True if done</returns>
	<remarks></remarks>
</member><member name="M:Ludo.CTRL.Ludo_ProgressBar.PerformStep">
	<summary>
 Method to perform step
 </summary>
	<returns>Boolean, true if done</returns>
	<remarks></remarks>
</member><member name="M:Ludo.CTRL.Ludo_ProgressBar.writeStatusRatio">
	<summary>
 Method to write Status with the ration form : Y/X
 </summary>
	<returns>String, our Text</returns>
	<remarks></remarks>
</member><member name="M:Ludo.CTRL.Ludo_ProgressBar.writeStatusPercent">
	<summary>
 Method to write the Status with Percent form : XXX%
 </summary>
	<returns>String, our Text</returns>
	<remarks></remarks>
</member><member name="M:Ludo.CTRL.Ludo_ProgressBar.writeStatus">
	<summary>
 Method to write the Status
 </summary>
	<returns>String, our Text</returns>
	<remarks></remarks>
</member><member name="M:Ludo.CTRL.Ludo_ProgressBar.drawBase(System.Drawing.Graphics@)">
	<summary>
 Method to draw the base of the base of the Control
 </summary>
	<param name="g">System.Drawing.Graphics, our graphic to draw</param>
	<returns>Boolean, true if done</returns>
	<remarks></remarks>
</member><member name="M:Ludo.CTRL.Ludo_ProgressBar.drawText(System.Drawing.Graphics@)">
	<summary>
 Method to draw the text after thebase
 </summary>
	<param name="g">System.Drawing.Graphics, graphic used to draw</param>
	<returns>Boolean, true if done</returns>
	<remarks></remarks>
</member><member name="M:Ludo.CTRL.Ludo_ProgressBar.drawElement">
	<summary>
 Method to draw our element
 </summary>
	<returns>Boolean, true if done</returns>
	<remarks></remarks>
</member><member name="P:Ludo.CTRL.Ludo_ProgressBar.Verbose">
	<summary>
 Property to manage verbosity
 </summary>
	<value>boolean, our new verbosity</value>
	<returns>Boolean, our verbosity</returns>
	<remarks></remarks>
</member><member name="P:Ludo.CTRL.Ludo_ProgressBar.Percent">
	<summary>
 Property to manage if the text of progression is in percent or not
 </summary>
	<value>boolean, our new value</value>
	<returns>Boolean, our value</returns>
	<remarks></remarks>
</member><member name="P:Ludo.CTRL.Ludo_ProgressBar.OperationText">
	<summary>
 Property to manage the message text during progression
 </summary>
	<value>String, our new text</value>
	<returns>String, our text</returns>
	<remarks></remarks>
</member><member name="P:Ludo.CTRL.Ludo_ProgressBar.Maximum">
	<summary>
 Property to manage the maximum value of the PG
 </summary>
	<value>integer, our new maximum</value>
	<returns>Integer, our maximum</returns>
	<remarks></remarks>
</member><member name="P:Ludo.CTRL.Ludo_ProgressBar.Minimum">
	<summary>
 Property to manage the minimum value of the PG
 </summary>
	<value>Integer, our new minimum</value>
	<returns>Integer, minimum</returns>
	<remarks></remarks>
</member><member name="P:Ludo.CTRL.Ludo_ProgressBar.Step">
	<summary>
 Property to manage the step part
 </summary>
	<value>Integer, our new step value</value>
	<returns>Integer, our step value</returns>
	<remarks></remarks>
</member><member name="P:Ludo.CTRL.Ludo_ProgressBar.Value">
	<summary>
 Property to manage the value of the Progress Bar
 </summary>
	<value>Integer, our new value</value>
	<returns>Integer, our value</returns>
	<remarks></remarks>
</member><member name="P:Ludo.CTRL.Ludo_ProgressBar.Text">
	<summary>
 Property as string
 </summary>
	<value>String, our new text</value>
	<returns>String, our text</returns>
	<remarks></remarks>
</member><member name="M:Ludo.CTRL.Ludo_ProgressBar.#ctor">
	<summary>
 Our defalut builder
 </summary>
	<remarks></remarks>
</member><member name="T:Ludo.CTRL.Ludo_ProgressBar">
	<summary>
 Control class to manage the Progress bar with text
 </summary>
	<remarks></remarks>
</member><member name="F:LAY_LUDO_DTB_Conception.oSch">
	<summary>
 Our schema
 </summary>
	<remarks></remarks>
</member><member name="F:LAY_LUDO_DTB_Conception.sFile">
	<summary>
 Our file name
 </summary>
	<remarks></remarks>
</member><member name="F:LAY_LUDO_DTB_Conception.oLay_Schema">
	<summary>
 Our layout to edit the schema
 </summary>
	<remarks></remarks>
</member><member name="E:LAY_LUDO_DTB_Conception.eQuit">
	<summary>
 Our quit event
 </summary>
	<remarks></remarks>
</member><member name="M:LAY_LUDO_DTB_Conception.init(Ludo.DTB.Ludo_DTB_Schema@,System.String)">
	<summary>
 Method to init the layout
 </summary>
	<param name="oSchema">Ludo.DTB.Ludo_DTB_Schema, Our schema</param>
	<param name="sFilename">[OPTIONAL] String, our document name</param>
	<returns>Boolean, True if done</returns>
	<remarks></remarks>
</member><member name="M:LAY_LUDO_DTB_Conception.setLaySchema">
	<summary>
 Method to set the layout to edit the layout
 </summary>
	<returns>Boolean, return True if not already init</returns>
	<remarks></remarks>
</member><member name="M:LAY_LUDO_DTB_Conception.loadFile(System.String)">
	<summary>
 Method to load a file from a name
 </summary>
	<param name="sFilename">String, </param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:LAY_LUDO_DTB_Conception.loadAction">
	<summary>
 Method to throw the load file action
 </summary>
	<returns>Boolean, True if done</returns>
	<remarks></remarks>
</member><member name="M:LAY_LUDO_DTB_Conception.saveSchema">
	<summary>
 Method to save the schema
 </summary>
	<returns>Boolean, true if done</returns>
	<remarks></remarks>
</member><member name="M:LAY_LUDO_DTB_Conception.saveAsSchema">
	<summary>
 Method to save the schema as a new name
 </summary>
	<returns>Boolean, true if done</returns>
	<remarks></remarks>
</member><member name="M:LAY_LUDO_DTB_Conception.BTN_Files_Click(System.Object,System.EventArgs)">
	<summary>
 Handler to manage the load event
 </summary>
	<param name="sender">Object, sender of the event</param>
	<param name="e">EventArgs, argument</param>
	<remarks></remarks>
</member><member name="M:LAY_LUDO_DTB_Conception.BTN_Save_Click(System.Object,System.EventArgs)">
	<summary>
 Method to save the schema file
 </summary>
	<param name="sender">Object, sender of the event</param>
	<param name="e">EventArgs, argument</param>
	<remarks></remarks>
</member><member name="M:LAY_LUDO_DTB_Conception.BTN_SaveAs_Click(System.Object,System.EventArgs)">
	<summary>
 Method to save the schema file with a new name
 </summary>
	<param name="sender">Object, sender of the event</param>
	<param name="e">EventArgs, argument</param>
	<remarks></remarks>
</member><member name="M:LAY_LUDO_DTB_Conception.BTN_Quit_Click(System.Object,System.EventArgs)">
	<summary>
 Handler to manage the quit
 </summary>
	<param name="sender">Object, sender of the event</param>
	<param name="e">EventArgs, argument</param>
	<remarks></remarks>
</member><member name="M:LAY_LUDO_DTB_Conception.#ctor">
	<summary>
 default builder
 </summary>
	<remarks>Do not use it !</remarks>
</member><member name="M:LAY_LUDO_DTB_Conception.#ctor(Ludo.DTB.Ludo_DTB_Schema@,System.String)">
	<summary>
 Builder with parameter
 </summary>
	<param name="sFilename">[OPTIONAL] String, our document name</param>
	<remarks></remarks>
</member><member name="T:LAY_LUDO_DTB_Conception">
	<summary>
 Layout to create or modify a DTB schema
 </summary>
	<remarks></remarks>
</member><member name="F:WIN_LUDO_DTB_Conception.oSch">
	<summary>
 Our schema
 </summary>
	<remarks></remarks>
</member><member name="F:WIN_LUDO_DTB_Conception.oLAY_DTB_Conception">
	<summary>
 Our layout to 
 </summary>
	<remarks></remarks>
</member><member name="M:WIN_LUDO_DTB_Conception.init(Ludo.DTB.Ludo_DTB_Schema@,System.String)">
	<summary>
 Method to init the windows
 </summary>
	<param name="sFilename">String, our filename</param>
	<returns>Boolean, True if done</returns>
	<remarks></remarks>
</member><member name="M:WIN_LUDO_DTB_Conception.HANDLER_Quit(System.Object,System.EventArgs)">
	<summary>
 Handler to manage the quit event
 </summary>
	<param name="sender">Object, sender</param>
	<param name="e">Eventargs, arguments</param>
	<remarks></remarks>
</member><member name="M:WIN_LUDO_DTB_Conception.#ctor">
	<summary>
 Private builder
 </summary>
	<remarks></remarks>
</member><member name="M:WIN_LUDO_DTB_Conception.#ctor(Ludo.DTB.Ludo_DTB_Schema@,System.String)">
	<summary>
 builder
 </summary>
	<param name="oSchema">Ludo.DTB.Ludo_DTB_Schema, our schema we want open</param>
	<param name="sFilename">[OPTIONAL] String, our file name</param>
	<remarks></remarks>
</member><member name="T:WIN_LUDO_DTB_Conception">
	<summary>
 Windows to create/modify a dtb schema
 </summary>
	<remarks></remarks>
</member><member name="F:WIN_LUDO_DTB_Management.lst_oConnexions">
	<summary>
 Our list of connexions
 </summary>
	<remarks></remarks>
</member><member name="F:WIN_LUDO_DTB_Management.nCONST_DTB">
	<summary>
 Const to know th dtb place
 </summary>
	<remarks></remarks>
</member><member name="M:WIN_LUDO_DTB_Management.plots">
	<summary>
 Method to plot the elements
 </summary>
	<returns>Boolean, True if done</returns>
	<remarks></remarks>
</member><member name="M:WIN_LUDO_DTB_Management.plotsDTB">
	<summary>
 Method to plots the list of DTB
 </summary>
	<returns>Boolean, True if done</returns>
	<remarks></remarks>
</member><member name="M:WIN_LUDO_DTB_Management.addDTB(System.Boolean)">
	<summary>
 Method to add a dtb by creation or not !
 </summary>
	<param name="bCreation">Boolean, True in case of creation, False in attach only</param>
	<returns>Boolean, True if done !</returns>
	<remarks></remarks>
</member><member name="M:WIN_LUDO_DTB_Management.addQuery(System.String)">
	<summary>
 Method to add a query
 </summary>
	<param name="sFilename">[OPTIONAL] STring, our file name</param>
	<returns>Boolean, True</returns>
	<remarks></remarks>
</member><member name="M:WIN_LUDO_DTB_Management.loadQuery">
	<summary>
 Method to load query
 </summary>
	<returns>Boolean tru if done</returns>
	<remarks></remarks>
</member><member name="M:WIN_LUDO_DTB_Management.OPT_Files_Import_Click(System.Object,System.EventArgs)">
	<summary>
 Handler to execute the import task
 </summary>
	<param name="sender">Object, sender of the event</param>
	<param name="e">EventArgs, our events</param>
	<remarks></remarks>
</member><member name="M:WIN_LUDO_DTB_Management.OPT_Files_Quit_Click(System.Object,System.EventArgs)">
	<summary>
 Handler to quit the windows
 </summary>
	<param name="sender">Object, sender of the event</param>
	<param name="e">EventArgs, our events</param>
	<remarks></remarks>
</member><member name="M:WIN_LUDO_DTB_Management.OPT_Edition_Query_Click(System.Object,System.EventArgs)">
	<summary>
 Handler to add a new query
 </summary>
	<param name="sender">Object, sender of the event</param>
	<param name="e">EventArgs, our events</param>
	<remarks></remarks>
</member><member name="M:WIN_LUDO_DTB_Management.OPT_Load_Query_Click(System.Object,System.EventArgs)">
	<summary>
 Handler to add a qury from a file
 </summary>
	<param name="sender">Object, sender of the event</param>
	<param name="e">EventArgs, our events</param>
	<remarks></remarks>
</member><member name="M:WIN_LUDO_DTB_Management.OPT_Compact_CreateDTB_Click(System.Object,System.EventArgs)">
	<summary>
 Handler to create Database Compact
 </summary>
	<param name="sender">Object, sender of the event</param>
	<param name="e">EventArgs, our events</param>
	<remarks></remarks>
</member><member name="M:WIN_LUDO_DTB_Management.OPT_Compact_Attach_Click(System.Object,System.EventArgs)">
	<summary>
 Handler to attach a compact database
 </summary>
	<param name="sender">Object, sender of the event</param>
	<param name="e">EventArgs, our events</param>
	<remarks></remarks>
</member><member name="M:WIN_LUDO_DTB_Management.OPT_Compact_Copy_Click(System.Object,System.EventArgs)">
	<summary>
 Handler to copy compact database
 </summary>
	<param name="sender">Object, sender of the event</param>
	<param name="e">EventArgs, our events</param>
	<remarks></remarks>
</member><member name="M:WIN_LUDO_DTB_Management.OPT_Compact_detach_Click(System.Object,System.EventArgs)">
	<summary>
 Handler to detach a database
 </summary>
	<param name="sender">Object, sender of the event</param>
	<param name="e">EventArgs, our events</param>
	<remarks></remarks>
</member><member name="M:WIN_LUDO_DTB_Management.OPT_Compact_Delete_Click(System.Object,System.EventArgs)">
	<summary>
 Handler to delete a databse
 </summary>
	<param name="sender">Object, sender of the event</param>
	<param name="e">EventArgs, our events</param>
	<remarks></remarks>
</member><member name="M:WIN_LUDO_DTB_Management.closeTab(System.Object,System.EventArgs)">
	<summary>
 Handler to close a tab
 </summary>
	<param name="sender">Object, sender</param>
	<param name="e">Eventargs, arguments</param>
	<remarks></remarks>
</member><member name="M:WIN_LUDO_DTB_Management.openListTab(System.Object,Ludo.EVENTS.LudoListEventArgs)">
	<summary>
 Handler to manage the open list tab from an event
 </summary>
	<param name="sender">Object, sender</param>
	<param name="e">Ludo.EVENTS.LudoListEventArgs, arguments</param>
	<remarks></remarks>
</member><member name="M:WIN_LUDO_DTB_Management.OPT_Tree_NewQuery_Click(System.Object,System.EventArgs)">
	<summary>
 Handler to add a new query
 </summary>
	<param name="sender">Object, sender</param>
	<param name="e">Eventargs, arguments</param>
	<remarks></remarks>
</member><member name="M:WIN_LUDO_DTB_Management.OPT_Tree_LoadQuery_Click(System.Object,System.EventArgs)">
	<summary>
 Handler to load an existing query
 </summary>
	<param name="sender">Object, sender</param>
	<param name="e">Eventargs, arguments</param>
	<remarks></remarks>
</member><member name="M:WIN_LUDO_DTB_Management.#ctor">
	<summary>
 Default Builders
 </summary>
	<remarks></remarks>
</member><member name="M:WIN_LUDO_DTB_Management.#ctor(System.Collections.Generic.List{Ludo.DTB.Ludo_DTB_Connexion}@)">
	<summary>
 Builder with connection
 </summary>
	<param name="lst_oCo">List(Of Ludo.DTB.Ludo_DTB_Connexion), list of connection</param>
	<remarks></remarks>
</member><member name="T:WIN_LUDO_DTB_Management">
	<summary>
 Windows to manage The dtb
 </summary>
	<remarks></remarks>
</member><member name="F:Ludo_Data_Cell.sContent">
	<summary>
 our content
 </summary>
	<remarks></remarks>
</member><member name="F:Ludo_Data_Cell.nType">
	<summary>
 type of the content
 </summary>
	<remarks></remarks>
</member><member name="M:Ludo_Data_Cell.setValue(System.String)">
	<summary>
 Method to set the value
 </summary>
	<param name="sValue">string, our value</param>
	<returns>boolean, true if done</returns>
	<remarks></remarks>
</member><member name="M:Ludo_Data_Cell.setType(System.Int32)">
	<summary>
 Method to set the Type
 </summary>
	<param name="nType">integer, our new type !</param>
	<returns>boolean, true</returns>
	<remarks></remarks>
</member><member name="M:Ludo_Data_Cell.getBoolean">
	<summary>
 Method to obtain the value as a boolean
 </summary>
	<returns>boolean, our value</returns>
	<remarks></remarks>
</member><member name="M:Ludo_Data_Cell.getString">
	<summary>
 Method to obtain the value as a string
 </summary>
	<returns>string, the value</returns>
	<remarks></remarks>
</member><member name="M:Ludo_Data_Cell.getInteger">
	<summary>
 Method to obtain the value as an integer
 </summary>
	<returns>integer, the value</returns>
	<remarks></remarks>
</member><member name="M:Ludo_Data_Cell.getLong">
	<summary>
 Method to obtain the value as a long
 </summary>
	<returns>long, the value</returns>
	<remarks></remarks>
</member><member name="M:Ludo_Data_Cell.getDouble">
	<summary>
 Method to obtain the value as a double
 </summary>
	<returns>double, the value</returns>
	<remarks></remarks>
</member><member name="M:Ludo_Data_Cell.getMyType">
	<summary>
 Method to obtain the type
 </summary>
	<returns>intger, our type</returns>
	<remarks></remarks>
</member><member name="M:Ludo_Data_Cell.ToString">
	<summary>
 our use of to string :p
 </summary>
	<returns>string</returns>
	<remarks></remarks>
</member><member name="M:Ludo_Data_Cell.#ctor">
	<summary>
 default builder
 </summary>
	<remarks></remarks>
</member><member name="M:Ludo_Data_Cell.#ctor(System.String)">
	<summary>
 Builder with Value
 </summary>
	<param name="sValue">string, our value</param>
	<remarks></remarks>
</member><member name="T:Ludo_Data_Cell">
	<summary>
 class for our cell
 </summary>
	<remarks></remarks>
</member><member name="F:Ludo_Data_Line.ary_clCell">
	<summary>
 Our public member line ! such a dumb crap !
 </summary>
	<remarks></remarks>
</member><member name="M:Ludo_Data_Line.lineClear">
	<summary>
 Method to clear the contant of each cell !
 </summary>
	<returns>boolean, true if done</returns>
	<remarks></remarks>
</member><member name="M:Ludo_Data_Line.toLstOfStr">
	<summary>
 Method to transform to List of String
 </summary>
	<returns>List(Of String)), our list of string</returns>
	<remarks></remarks>
</member><member name="M:Ludo_Data_Line.#ctor">
	<summary>
 default builder
 </summary>
	<remarks></remarks>
</member><member name="M:Ludo_Data_Line.#ctor(System.Int32)">
	<summary>
 builder with size line
 </summary>
	<param name="nSize">integer, our size line !</param>
	<remarks></remarks>
</member><member name="T:Ludo_Data_Line">
	<summary>
 Class to manage a line
 </summary>
	<remarks></remarks>
</member><member name="F:Ludo_Data.clColumn">
	<summary>
 Colonne line
 </summary>
</member><member name="F:Ludo_Data.lst_Lines">
	<summary>
 list of line
 </summary>
</member><member name="M:Ludo_Data.setColumnName(System.Int32,System.String)">
	<summary>
 Method to set the column name
 </summary>
	<param name="nIndex">integer, our index</param>
	<param name="sName">string, our new name</param>
	<returns></returns>
	<remarks>integer, return the column number, or -1 in case of "nothing" error, or -2 in case of out of range error</remarks>
</member><member name="M:Ludo_Data.setCellValueString(System.Int32,System.Int32,System.String)">
	<summary>
 Method to set the value of a cell,with column number and line number
 </summary>
	<param name="nColumn">integer, our column index</param>
	<param name="nLine">integer, our line index</param>
	<param name="sValue">string, the new value</param>
	<returns>boolean, true if done</returns>
	<remarks></remarks>
</member><member name="M:Ludo_Data.setCellValueString(System.String,System.Int32,System.String)">
	<summary>
 Method to set the value of a cell, with column name and line number
 </summary>
	<param name="sColumn">string, our column name</param>
	<param name="nLine">integer, our line index</param>
	<param name="sValue">string, the new value</param>
	<returns>boolean, true if done</returns>
	<remarks>this method calls "getColumnIndex" to obtain index and with index parameters</remarks>
</member><member name="M:Ludo_Data.getColumnIndex(System.String)">
	<summary>
 Method to get the column index from a name
 </summary>
	<param name="sName">String, Column Name We Search</param>
	<returns>Return the number of the corresponding column, or -1 if the column does not exists</returns>
	<remarks>
 The method tests if parameters are Null.
 The error case (-1 return ) is manage by the other functions
 </remarks>
</member><member name="M:Ludo_Data.getColumnsIndex(System.Collections.Generic.List{System.String})">
	<summary>
 Method to get the column index from list of name
 </summary>
	<param name="lst_sName">List of the columns we are searching the indexes</param>
	<returns>In every case a list of integer, but this list will have Count equals to 0 if lst_sName is Null</returns>
	<remarks>For Every sName, this method call the method getColumnIndex </remarks>
</member><member name="M:Ludo_Data.getColumnName(System.Int32)">
	<summary>
 Method to get the name of a column from a number
 </summary>
	<param name="nIndex">Integer, Index of the column</param>
	<returns>String, Name if founded or Empty String</returns>
	<remarks></remarks>
</member><member name="M:Ludo_Data.getCellValueString(System.Int32,System.Int32)">
	<summary>
 Method to get the value as string from a cell, with column number and line number
 </summary>
	<param name="nColumn">Integer, Index of the Column</param>
	<param name="nLine">Integer, Line </param>
	<returns>String, As results</returns>
	<remarks></remarks>
</member><member name="M:Ludo_Data.getCellValueString(System.String,System.Int32)">
	<summary>
 Method to get the value as string from a cell, with column name and line number
 </summary>
	<param name="sColumn">String, Name of the column</param>
	<param name="nLine">Integer, Line </param>
	<returns>String, As results</returns>
	<remarks>The Method calls :
 The method getColumnIndex to obtain the index from the name
 And the method getCellValueString with number of column parameter
 </remarks>
</member><member name="M:Ludo_Data.getCellValueInteger(System.Int32,System.Int32)">
	<summary>
 Method to get the value as integer from a cell, with column number and line number
 </summary>
	<param name="nColumn">Integer, Index of the Column</param>
	<param name="nLine">Integer, Line </param>
	<returns>Integer, As results</returns>
	<remarks></remarks>
</member><member name="M:Ludo_Data.getCellValueInteger(System.String,System.Int32)">
	<summary>
 Method to get the value as integer from a cell, with column name and line number
 </summary>
	<param name="sColumn">String, Name of the column</param>
	<param name="nLine">Integer, Line </param>
	<returns>Integer, As results</returns>
	<remarks>The Method calls :
 The method getColumnIndex to obtain the index from the name
 And the method getCellValueInteger with number of column parameter
 </remarks>
</member><member name="M:Ludo_Data.getCellValueLong(System.Int32,System.Int32)">
	<summary>
 Method to get the value as Long from a cell, with column number and line number
 </summary>
	<param name="nColumn">Integer, Index of the Column</param>
	<param name="nLine">Integer, Line </param>
	<returns>Long, As results</returns>
	<remarks></remarks>
</member><member name="M:Ludo_Data.getCellValueLong(System.String,System.Int32)">
	<summary>
 Method to get the value as Long from a cell, with column name and line number
 </summary>
	<param name="sColumn">String, Name of the column</param>
	<param name="nLine">Integer, Line </param>
	<returns>Long, As results</returns>
	<remarks>The Method calls :
 The method getColumnIndex to obtain the index from the name
 And the method getCellValueLong with number of column parameter
 </remarks>
</member><member name="M:Ludo_Data.getCellValueDouble(System.Int32,System.Int32)">
	<summary>
 Method to get the value as double from a cell, with column number and line number
 </summary>
	<param name="nColumn">Integer, Index of the Column</param>
	<param name="nLine">Integer, Line </param>
	<returns>Double, As results</returns>
	<remarks></remarks>
</member><member name="M:Ludo_Data.getCellValueDouble(System.String,System.Int32)">
	<summary>
 Method to get the value as double from a cell, with column name and line number
 </summary>
	<param name="sColumn">String, Name of the column</param>
	<param name="nLine">Integer, Line </param>
	<returns>Double, As results</returns>
	<remarks>The Method calls :
 The method getColumnIndex to obtain the index from the name
 And the method getCellValueDouble with number of column parameter
 </remarks>
</member><member name="M:Ludo_Data.getCellValueBoolean(System.Int32,System.Int32)">
	<summary>
 Method to get the value as boolean from a cell, with column number and line number
 </summary>
	<param name="nColumn">Integer, Index of the Column</param>
	<param name="nLine">Integer, Line </param>
	<returns>Boolean, As results</returns>
	<remarks></remarks>
</member><member name="M:Ludo_Data.getCellValueBoolean(System.String,System.Int32)">
	<summary>
 Method to get the value as Boolean from a cell, with column name and line number
 </summary>
	<param name="sColumn">String, Name of the column</param>
	<param name="nLine">Integer, Line </param>
	<returns>Boolean, As results</returns>
	<remarks>The Method calls :
 The method getColumnIndex to obtain the index from the name
 And the method getCellValueBoolean with number of column parameter
 </remarks>
</member><member name="M:Ludo_Data.getNumberOfColumn">
	<summary>
 Method to get the number of column
 </summary>
	<returns>Integer, number of column</returns>
	<remarks></remarks>
</member><member name="M:Ludo_Data.getNumberOfLines">
	<summary>
 Method to get the number of Line
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Ludo_Data.getColumnsValuesString(System.Collections.Generic.List{System.Int32})">
	<summary>
 Method to get the Columns as list of list of String from a list of index
 </summary>
	<param name="lst_nIndex">List(Of integer), our list of column index</param>
	<returns>list(Of list(Of String)), column and their values</returns>
	<remarks></remarks>
</member><member name="M:Ludo_Data.getColumnsValuesString(System.Collections.Generic.List{System.String})">
	<summary>
 Method to get the Columns as list of list of String from a list of Name
 </summary>
	<param name="lst_sName">List(Of String), our list of column name</param>
	<returns>list(Of list(Of String)), column and their values</returns>
	<remarks>This method calls getColumnIndex, to obtain a list of index and calls getColumnsValuesString with list of index parameters</remarks>
</member><member name="M:Ludo_Data.getColumnValuesString(System.Int32)">
	<summary>
 Method to get the Column as list of String from an index
 </summary>
	<param name="nIndex">integer, our column index</param>
	<returns>list (of string), column value</returns>
	<remarks></remarks>
</member><member name="M:Ludo_Data.getColumnValuesString(System.String)">
	<summary>
 Method to get the Column as list of String from a Name
 </summary>
	<param name="sName">string, our column name</param>
	<returns></returns>
	<remarks>This method calls getColumnIndex to obtain the column index, and calls getColumnValuesString with index parameter after</remarks>
</member><member name="M:Ludo_Data.LoadFromDGV(System.Windows.Forms.DataGridView,System.Boolean)">
	<summary>
 Method to load from a DataGriedView
 </summary>
	<param name="cTab">system.windows.forms.datagridview, our datagrid view</param>
	<param name="bVisibleOnly">[OPTIONAL]boolean, only load the visible column ?</param>
	<returns>boolean, true if done</returns>
	<remarks></remarks>
</member><member name="M:Ludo_Data.LoadCSVFromTxt(System.String,System.Windows.Forms.ProgressBar@)">
	<summary>
 Method to load csv from a txt
 </summary>
	<param name="sTxt">string, our txt formated as CSV</param>
	<param name="PG_UI">[OPTIONAL]system.windows.forms.ProgressBar, our bar to show the progression</param>
	<returns>boolean, true if done</returns>
	<remarks></remarks>
</member><member name="M:Ludo_Data.LoadCSVFromFile(System.String,System.Windows.Forms.ProgressBar@)">
	<summary>
 Method to load a csv from file
 </summary>
	<param name="sFilename">string, our filename</param>
	<param name="PG_UI">[OPTIONAL]system.windows.forms.ProgressBar, our bar to show the progression</param>
	<returns>boolean, true if done</returns>
	<remarks></remarks>
</member><member name="M:Ludo_Data.SaveToCSV(System.String,System.Windows.Forms.ProgressBar@)">
	<summary>
 Method to save data as csv
 </summary>
	<param name="sFilename">string, our filename</param>
	<param name="PG_UI">[OPTIONAL]system.windows.forms.ProgressBar, our bar to show the progression</param>
	<returns>boolean, true if done</returns>
	<remarks></remarks>
</member><member name="M:Ludo_Data.SaveToXml(System.String,System.String,System.String,System.String,System.String,System.String,System.Windows.Forms.ProgressBar@)">
	<summary>
 Method to Save a xml
 </summary>
	<param name="sFilename">string, our filename</param>
	<param name="sAuthor">[OPTIONAL]string, the author (creators, modifiers)</param>
	<param name="sLastAuthor">[OPTIONAL]string, the last author that modify the file</param>
	<param name="sCreated">[OPTIONAL]string, creation date</param>
	<param name="sUpdated">[OPTIONAL]string, update date</param>
	<param name="sWorkSheetName">[OPTIONAL]string, sheet name</param>
	<param name="PG_Progress_Bar">[OPTIONAL]system.windows.forms.ProgressBar, our bar to show the progression</param>
	<returns>boolean, true if done</returns>
	<remarks></remarks>
</member><member name="M:Ludo_Data.exportToDGV(System.Windows.Forms.DataGridView@)">
	<summary>
 Method to export data to system.windows.DataGridView
 </summary>
	<param name="DGV_">system.windows.DataGridView, our datagridview</param>
	<returns>Boolean, true if done</returns>
	<remarks></remarks>
</member><member name="M:Ludo_Data.addColumn(System.String,System.String)">
	<summary>
 Method to add a column
 </summary>
	<param name="sName">string, our column name</param>
	<param name="sDefaultValue">[OPTIONAL]string, the default value</param>
	<returns>integer, the column number, or -1 in case of "nothing" error</returns>
	<remarks></remarks>
</member><member name="M:Ludo_Data.insertColumn(System.Int32,System.String,System.String)">
	<summary>
 Method to insert a column, 
 </summary>
	<param name="nIndex">integer, index of insertion</param>
	<param name="sName">string, our column name</param>
	<param name="sDefaultValue">[OPTIONAL]string, the default value</param>
	<returns>integer, return the column number, or -1 in case of "nothing" error, or -2 in case of out of range error</returns>
	<remarks></remarks>
</member><member name="M:Ludo_Data.deleteColumn(System.Int32)">
	<summary>
 Method to delete a column
 </summary>
	<param name="nIndex">integer, index of the column</param>
	<returns>integer, the column number, or -2 in case of out of range error</returns>
	<remarks></remarks>
</member><member name="M:Ludo_Data.addLine">
	<summary>
 Method to add line
 </summary>
	<returns>integer, the line number</returns>
	<remarks></remarks>
</member><member name="M:Ludo_Data.insertLine(System.Int32)">
	<summary>
 Method to insert a line, return 
 </summary>
	<param name="nLine">integer, insertion index</param>
	<returns>integer, line number, or -2 in case of out of range error</returns>
	<remarks></remarks>
</member><member name="M:Ludo_Data.deleteLine(System.Int32)">
	<summary>
 Method to delete a line
 </summary>
	<param name="nLine">integer, deletion index</param>
	<returns>integer, line number, or -2 in case of out of range error</returns>
	<remarks></remarks>
</member><member name="M:Ludo_Data.#ctor">
	<summary>
 Builder by default
 </summary>
	<remarks></remarks>
</member><member name="M:Ludo_Data.#ctor(System.Int32,System.Int32)">
	<summary>
 Builder with number of columns and  lines
 </summary>
	<param name="nColumns">integer, number of column</param>
	<param name="nLines">[OPTIONAL]integer, number of line</param>
	<remarks></remarks>
</member><member name="T:Ludo_Data">
	<summary>
 Class to recieve data from Ludo.DTB.Ludo_Connexion, or CSV File
 </summary>
	<remarks>It's one of the most import classes in the Ludo Lib</remarks>
</member><member name="M:Ludo.DTB.SQLServer.functions.createArgs(System.String,System.String,System.String,System.String)">
	<summary>
 Function to create the arguments for the SQLServer connection
 </summary>
	<param name="sSrvIpV4">String, Ipv V4</param>
	<param name="sUsr">String, our user</param>
	<param name="sPwd">String, our pass word</param>
	<param name="sDtb">String, our DTB name !</param>
	<returns>String, our parameters</returns>
	<remarks></remarks>
</member><member name="M:Ludo.DTB.SQLServer.functions.createConnectionObject(System.String,System.String,System.String,System.String)">
	<summary>
 Function to create a SQLServer connection object
 </summary>
	<param name="sSrvIpV4">String, Ipv V4</param>
	<param name="sUsr">String, our user</param>
	<param name="sPwd">String, our pass word</param>
	<param name="sDtb">String, our DTB name !</param>
	<returns>object, our connection</returns>
	<remarks></remarks>
</member><member name="M:Ludo.DTB.SQLServer.functions.open(System.Object@)">
	<summary>
 Function to open the connection
 </summary>
	<param name="oConnection">Object, our connection</param>
	<returns>Boolean, true if open</returns>
	<remarks></remarks>
</member><member name="M:Ludo.DTB.SQLServer.functions.close(System.Object@)">
	<summary>
 Function to close the connection
 </summary>
	<param name="oConnection">Object, our connection</param>
	<returns>Boolean, true if done, false else</returns>
	<remarks></remarks>
</member><member name="M:Ludo.DTB.SQLServer.functions.executeQuery(System.Object@,System.String,System.Windows.Forms.DataGridView@,System.Windows.Forms.ProgressBar@)">
	<summary>
 function to execute a query and show her in a datagridview
 </summary>
	<param name="oConnection">Object, our connection</param>
	<param name="sQuery">String, our query</param>
	<param name="DGV_">system.windows.forms.DataGridView, our datagrid</param>
	<param name="PG_">system.windows.forms.ProgessBar, our bar toshow the progression</param>
	<returns>Boolean, true if done</returns>
	<remarks></remarks>
</member><member name="M:Ludo.DTB.SQLServer.functions.dataFromQuery(System.Object@,System.String,System.Windows.Forms.ProgressBar@)">
	<summary>
 Function to execute a select query and get the data witha SQLServerCE Connection !
 </summary>
	<param name="oConnection">Object, our connection</param>
	<param name="sQuery">String, our query</param>
	<param name="PG_">system.windows.forms.ProgressBar, our bar of progression</param>
	<returns>Ludo_Data, our data for ludo</returns>
	<remarks></remarks>
</member><member name="M:Ludo.DTB.SQLServer.functions.executeNoDataReturn(System.Object@,System.String)">
	<summary>
 Function to execute query, without a data result
 </summary>
	<param name="oConnection">Object, our connection</param>
	<param name="sQuery">String, our query</param>
	<returns>Integer,number of rows affected</returns>
	<remarks></remarks>
</member><member name="M:Ludo.DTB.SQLServer.functions.quotes(System.String)">
	<summary>
 Functiono to quotes the text
 </summary>
	<param name="sStr">string, our text to quote</param>
	<returns>string, our query treated</returns>
	<remarks></remarks>
</member><member name="T:Ludo.DTB.SQLServer.functions">
	<summary>
 Module of functions for SQLServer
 </summary>
	<remarks></remarks>
</member><member name="M:Ludo.DTB.SQLServerCe.functions.createArgs(System.String,System.String,System.String,System.String)">
	<summary>
 Function to create the arguments for the SQLServerCe connection
 </summary>
	<param name="sSrvIpV4">String, Ipv V4</param>
	<param name="sUsr">String, our user</param>
	<param name="sPwd">String, our pass word</param>
	<param name="sDtb">String, our DTB name !</param>
	<returns>String, our parameters</returns>
	<remarks></remarks>
</member><member name="M:Ludo.DTB.SQLServerCe.functions.createConnectionObject(System.String,System.String,System.String,System.String)">
	<summary>
 Function to create a SQLServer connection object
 </summary>
	<param name="sSrvIpV4">String, Ipv V4</param>
	<param name="sUsr">String, our user</param>
	<param name="sPwd">String, our pass word</param>
	<param name="sDtb">String, our DTB name !</param>
	<returns>object, our connection</returns>
	<remarks></remarks>
</member><member name="M:Ludo.DTB.SQLServerCe.functions.open(System.Object@)">
	<summary>
 Function to open the SQLServerCe connection
 </summary>
	<param name="oConnection">Object, our connection</param>
	<returns>Boolean, true if open</returns>
	<remarks></remarks>
</member><member name="M:Ludo.DTB.SQLServerCe.functions.close(System.Object@)">
	<summary>
 Function to close the SQLServerCe connection
 </summary>
	<param name="oConnection">Object, our connection</param>
	<returns>Boolean, true if done, false else</returns>
	<remarks></remarks>
</member><member name="M:Ludo.DTB.SQLServerCe.functions.executeQuery(System.Object@,System.String,System.Windows.Forms.DataGridView@,System.Windows.Forms.ProgressBar@)">
	<summary>
 function to execute a query and show her in a datagridview
 </summary>
	<param name="oConnection">Object, our connection</param>
	<param name="sQuery">String, our query</param>
	<param name="DGV_">system.windows.forms.DataGridView, our datagrid</param>
	<param name="PG_">system.windows.forms.ProgessBar, our bar toshow the progression</param>
	<returns>Boolean, true if done</returns>
	<remarks></remarks>
</member><member name="M:Ludo.DTB.SQLServerCe.functions.dataFromQuery(System.Object@,System.String,System.Windows.Forms.ProgressBar@)">
	<summary>
 Function to execute a select query and get the data witha SQLServerCE Connection !
 </summary>
	<param name="oConnection">Object, our connection</param>
	<param name="sQuery">String, our query</param>
	<param name="PG_">system.windows.forms.ProgressBar, our bar of progression</param>
	<returns>Ludo_Data, our data for ludo</returns>
	<remarks></remarks>
</member><member name="M:Ludo.DTB.SQLServerCe.functions.executeNoDataReturn(System.Object@,System.String)">
	<summary>
 Function to execute query, without a data result
 </summary>
	<param name="oConnection">Object, our connection</param>
	<param name="sQuery">String, our query</param>
	<returns>Integer,number of rows affected</returns>
	<remarks></remarks>
</member><member name="M:Ludo.DTB.SQLServerCe.functions.quotes(System.String)">
	<summary>
 Functiono to quotes the text
 </summary>
	<param name="sStr">string, our text to quote</param>
	<returns>string, our query treated</returns>
	<remarks></remarks>
</member><member name="T:Ludo.DTB.SQLServerCe.functions">
	<summary>
 Module of function for SQLServer CE
 </summary>
	<remarks></remarks>
</member><member name="F:Ludo.DTB.Consts.INI_CONNECTION_DEFAULT_PREFIXE">
	<summary>
 Init file default prefixe for connection
 </summary>
	<remarks></remarks>
</member><member name="T:Ludo.DTB.Consts">
	<summary>
 Consts about connection in the ini files
 </summary>
	<remarks></remarks>
</member><member name="T:Ludo.DTB.DEL.DEL_createConnectionObject">
	<summary>
 Function to create the object
 </summary>
	<param name="sSrvIpV4">String, our IPV4</param>
	<param name="sUsr">String, our User</param>
	<param name="sPwd">String, our password</param>
	<param name="sDtb">String, our database</param>
	<returns>Object, our connection</returns>
	<remarks></remarks>
</member><member name="T:Ludo.DTB.DEL.DEL_open">
	<summary>
 Function to open the connection
 </summary>
	<param name="oConnection">Object, our connection</param>
	<returns>Boolean, true if open</returns>
	<remarks></remarks>
</member><member name="T:Ludo.DTB.DEL.DEL_close">
	<summary>
 Function to close the connection
 </summary>
	<param name="oConnection">Object, our connection</param>
	<returns>Boolean, true if done, false else</returns>
	<remarks></remarks>
</member><member name="T:Ludo.DTB.DEL.DEL_executeQuery">
	<summary>
 function to execute a query and show her in a datagridview
 </summary>
	<param name="oConnection">Object, our connection</param>
	<param name="sQuery">String, our query</param>
	<param name="DGV_">system.windows.forms.DataGridView, our datagrid</param>
	<param name="PG_">system.windows.forms.ProgessBar, our bar toshow the progression</param>
	<returns>Boolean, true if done</returns>
	<remarks></remarks>
</member><member name="T:Ludo.DTB.DEL.DEL_dataFromQuery">
	<summary>
 Function to execute a selct query and get the data !
 </summary>
	<param name="oConnection">Object, our connection</param>
	<param name="sQuery">String, our query</param>
	<param name="PG_">system.windows.forms.ProgressBar, our bar of progression</param>
	<returns>Ludo_Data, our data for ludo</returns>
	<remarks></remarks>
</member><member name="T:Ludo.DTB.DEL.DEL_executeNoDataReturn">
	<summary>
 Function to execute query, without a data result
 </summary>
	<param name="oConnection">Object, our connection</param>
	<param name="sQuery">String, our query</param>
	<returns>Integer,number of rows affected</returns>
	<remarks></remarks>
</member><member name="T:Ludo.DTB.DEL.DEL_quotes">
	<summary>
 Functiono to quotes the text
 </summary>
	<param name="sText">string, our text to quote</param>
	<returns>string, our query treated</returns>
	<remarks></remarks>
</member><member name="T:Ludo.DTB.DEL">
	<summary>
 module that contains the delegate function 
 </summary>
	<remarks></remarks>
</member><member name="F:Ludo.DTB.Ludo_DTB_Ops_Set.nDTBType">
	<summary>
 type of the dtb
 </summary>
	<remarks></remarks>
</member><member name="F:Ludo.DTB.Ludo_DTB_Ops_Set.sDTBType">
	<summary>
 Type of the DTB, as string
 </summary>
	<remarks></remarks>
</member><member name="F:Ludo.DTB.Ludo_DTB_Ops_Set.createConnectionObject">
	<summary>
 Function to create the object
 </summary>
	<remarks></remarks>
</member><member name="F:Ludo.DTB.Ludo_DTB_Ops_Set.open">
	<summary>
 Function to open the connection
 </summary>
	<remarks></remarks>
</member><member name="F:Ludo.DTB.Ludo_DTB_Ops_Set.close">
	<summary>
 Function to close the connection
 </summary>
	<remarks></remarks>
</member><member name="F:Ludo.DTB.Ludo_DTB_Ops_Set.executeQuery">
	<summary>
 function to execute a query and show her in a datagridview
 </summary>
	<remarks></remarks>
</member><member name="F:Ludo.DTB.Ludo_DTB_Ops_Set.dataFromQuery">
	<summary>
 Function to execute a selct query and d=get the data !
 </summary>
	<remarks></remarks>
</member><member name="F:Ludo.DTB.Ludo_DTB_Ops_Set.executeNoDataReturn">
	<summary>
 Function to execute query, without a data result
 </summary>
	<remarks></remarks>
</member><member name="F:Ludo.DTB.Ludo_DTB_Ops_Set.quotes">
	<summary>
 Functiono to quotes the text
 </summary>
	<remarks></remarks>
</member><member name="T:Ludo.DTB.Ludo_DTB_Ops_Set">
	<summary>
 Our structure to store the DTB functions 
 </summary>
	<remarks></remarks>
</member><member name="M:Ludo.DTB.Functions.FindIn(System.Int32,System.Collections.Generic.List{Ludo.DTB.Ludo_DTB_Ops_Set})">
	<summary>
 Function to find a integer in a List Of Integer
 </summary>
	<param name="nType">Integer, The Database type we are looking for !!!</param>
	<param name="lst_oOpsSet">List(Of Ludo_DTB_Ops_Set), where we are looking in</param>
	<returns>Integer where is our target</returns>
	<remarks></remarks>
</member><member name="M:Ludo.DTB.Functions.FindIn(System.String,System.Collections.Generic.List{Ludo.DTB.Ludo_DTB_Ops_Set})">
	<summary>
 Function to find a integer in a List Of Integer
 </summary>
	<param name="sType">string, The Database type we are looking for !!!</param>
	<param name="lst_oOpsSet">List(Of Ludo_DTB_Ops_Set), where we are looking in</param>
	<returns>Integer where is our target</returns>
	<remarks></remarks>
</member><member name="M:Ludo.DTB.Functions.FindIn(Ludo.DTB.Ludo_DTB_Ops_Set,System.Collections.Generic.List{Ludo.DTB.Ludo_DTB_Ops_Set})">
	<summary>
 Function to find a integer in a List Of Integer
 </summary>
	<param name="oSet">Ludo_DTB_Ops_Set, ou set we looking for !!!</param>
	<param name="lst_oOpsSet">List(Of Ludo_DTB_Ops_Set), where we are looking in</param>
	<returns>Integer where is our target</returns>
	<remarks></remarks>
</member><member name="M:Ludo.DTB.Functions.createOpsSet_SQLServer">
	<summary>
 Function to create the default operation set for Connection class
 </summary>
	<returns> Ludo_DTB_Ops_Set, our set</returns>
	<remarks></remarks>
</member><member name="M:Ludo.DTB.Functions.createOpsSet_SQLServerCe">
	<summary>
 Function to create the default operation set for Connection class
 </summary>
	<returns> Ludo_DTB_Ops_Set, our set</returns>
	<remarks></remarks>
</member><member name="M:Ludo.DTB.Functions.ExtractColumns(System.String)">
	<summary>
 Function to extract the columns from a Query (in String)
 </summary>
	<param name="sQuery">String, our query</param>
	<returns>List(Of String), our columns</returns>
	<remarks></remarks>
</member><member name="M:Ludo.DTB.Functions.ExecuteQuery(System.Data.SqlClient.SqlConnection@,System.String,System.Windows.Forms.DataGridView@,System.Windows.Forms.ProgressBar@)">
	<summary>
 Function to execute a query in purpose to fill a DataGridView
 </summary>
	<param name="cConnection">SqlConnection, Our dtb connexion object</param>
	<param name="sQuery">String, our query </param>
	<param name="cTab">DatagridView, our tab to show</param>
	<param name="PG_Progress_Bar">[Optional] ProgressBar, to show the progression</param>
	<returns>Boolean, true if Done</returns>
	<remarks></remarks>
</member><member name="M:Ludo.DTB.Functions.ExecuteQuery(System.Data.SqlServerCe.SqlCeConnection@,System.String,System.Windows.Forms.DataGridView@,System.Windows.Forms.ProgressBar@)">
	<summary>
 Function to execute a query in purpose to fill a DataGridView
 </summary>
	<param name="cConnection">SqlCeConnection, Our dtb connexion object</param>
	<param name="sQuery">String, our query </param>
	<param name="cTab">DatagridView, our tab to show</param>
	<param name="PG_Progress_Bar">[Optional] ProgressBar, to show the progression</param>
	<returns>Boolean, true if Done</returns>
	<remarks></remarks>
</member><member name="M:Ludo.DTB.Functions.ExecuteQuery(System.Data.OleDb.OleDbConnection@,System.String,System.Windows.Forms.DataGridView@,System.Windows.Forms.ProgressBar@)">
	<summary>
 Function to execute a query in purpose to fill a DataGridView from Ole Db
 </summary>
	<param name="cConnection">OleDbConnection, Our dtb connexion object</param>
	<param name="sQuery">String, our query </param>
	<param name="cTab">DatagridView, our tab to show</param>
	<param name="PG_Progress_Bar">[Optional] ProgressBar, to show the progression</param>
	<returns>Boolean, true if Done</returns>
	<remarks></remarks>
</member><member name="M:Ludo.DTB.Functions.ExecuteModifyQuery(System.Data.SqlClient.SqlConnection@,System.String)">
	<summary>
 Function to execute a Query that modify the database, return number of affected Line
 </summary>
	<param name="oConnection">SqlConnection, our connexion</param>
	<param name="sQuery">String, our query</param>
	<returns>Integer, Number of modified lines !</returns>
	<remarks></remarks>
</member><member name="M:Ludo.DTB.Functions.ExecuteModifyQuery(System.Data.SqlServerCe.SqlCeConnection@,System.String)">
	<summary>
 Function to execute a Query that modify the database, return number of affected Line
 </summary>
	<param name="oConnection">SqlConnection, our connexion</param>
	<param name="sQuery">String, our query</param>
	<returns>Integer, Number of modified lines !</returns>
	<remarks></remarks>
</member><member name="M:Ludo.DTB.Functions.ExecuteModifyQuery(System.Data.OleDb.OleDbConnection@,System.String)">
	<summary>
 Function to execute a Query that modify the database, return number of affected Line
 </summary>
	<param name="oConnection">OledbConnection, our connexion</param>
	<param name="sQuery">String, our query</param>
	<returns>Integer, Number of modified lines !</returns>
	<remarks></remarks>
</member><member name="M:Ludo.DTB.Functions.CreateColumns(System.Collections.Generic.List{System.String},System.Windows.Forms.DataGridView@)">
	<summary>
 Function to create the columns of a DataGriedView from a list
 </summary>
	<param name="lst_Column">List(Of String), List of our columns names</param>
	<param name="cTab">Datagridview, Our graphical Tab</param>
	<returns>Boolean, True if done</returns>
	<remarks></remarks>
</member><member name="M:Ludo.DTB.Functions.Quote(System.String,System.Int32)">
	<summary>
 Function to Quote in auto mode
 </summary>
	<param name="sStr">String, value we want quote</param>
	<param name="nTypeSGBD">[Optionnal] Integer, Type of the Dtb</param>
	<returns>String, Quoted String</returns>
	<remarks>This Function change caracters like ' into the string to avoid ERROR</remarks>
</member><member name="M:Ludo.DTB.Functions.ConvertDTBTypeToStr(System.Int32)">
	<summary>
 Function to Convert DTB_TYPE in DTB_TYPE_STR
 </summary>
	<param name="nType">Integer, Type</param>
	<returns>String, Type in string</returns>
	<remarks></remarks>
</member><member name="M:Ludo.DTB.Functions.ConvertStrToDTBType(System.String)">
	<summary>
 Function to Convert DTB_TYPE_STR In DTB_TYPE
 </summary>
	<param name="sType">String, our Type</param>
	<returns>Integer, the number Type</returns>
	<remarks></remarks>
</member><member name="M:Ludo.DTB.Functions.iniConnectionsToCOMBO(System.String,System.Windows.Forms.ComboBox@,System.String)">
	<summary>
 Function to convert a list of connection in a ini file into a COMBO
 </summary>
	<param name="sIni">String, file name of an Ini File</param>
	<param name="COMBO_List">ComboBox, combo we want fill with connection</param>
	<param name="sConnectionSuffixe">[Optional] String, suffixes of connection</param>
	<returns>Boolean, True if done</returns>
	<remarks></remarks>
</member><member name="M:Ludo.DTB.Functions.iniConnectionsGetN(System.String,System.Int32,System.String)">
	<summary>
 Function to obtain a connection from a ini file
 </summary>
	<param name="sIniFileName">String, ini file name</param>
	<param name="nChoice">[Optional]Integer, Connection we wish</param>
	<param name="sSuffixe">[Optional] String, connection suffixe in ini file</param>
	<returns>Ludo.DTB.Ludo_DTB_Connexion</returns>
	<remarks></remarks>
</member><member name="M:Ludo.DTB.Functions.StrToQueryLIKEInstructions(System.String,System.String,System.String,System.String,System.String)">
	<summary>
 Function to transform a Str in a str Series of : (field LIKE 'PREXXXPOST' OR field LIKE 'PREYYYPOST')
 </summary>
	<param name="sField">String, our field/Columns name for the query</param>
	<param name="sPrefixe">String, thing we insert before (like '%')</param>
	<param name="sTxt">String, list of thing separate by sSeparator</param>
	<param name="sPost">String, thing we add after (like '%')</param>
	<param name="sSeparator">[Optional] String, list separator in sTxt</param>
	<returns>String, our query part</returns>
	<remarks></remarks>
</member><member name="M:Ludo.DTB.Functions.LstStrToStrWithFormat(System.Collections.Generic.List{System.String},System.String,System.String,System.String,System.String,System.String)">
	<summary>
 Function to transform a lst of string into a string (X, Y, Z, ..., W)
 </summary>
	<param name="lst_s">List(Of String), our string element list !</param>
	<param name="sPreLst">[Optional] String, List beginner, "(" by default</param>
	<param name="sPostLst">[Optional] String, List Ender, ")" by default</param>
	<param name="sPreLstItem">[Optional] String, Item beginner</param>
	<param name="sPostLstItem">[Optional] String, Item Ender</param>
	<param name="sSeparator">[Optional] String, Item seprator</param>
	<returns>String, our formatted List</returns>
	<remarks></remarks>
</member><member name="M:Ludo.DTB.Functions.lstIntToQueryINInstructions(System.Collections.Generic.List{System.Int32})">
	<summary>
 Function to convert a List Of Integer into a str list In for Query
 </summary>
	<param name="lst_nValues">List( Of Integer), List d'entier</param>
	<returns>String</returns>
	<remarks></remarks>
</member><member name="M:Ludo.DTB.Functions.SQL_CE_CreateCompact(System.String,System.String,Ludo.DTB.Ludo_DTB_Schema@,System.String,System.Windows.Forms.ProgressBar@,System.Windows.Forms.Label@,System.Windows.Forms.ProgressBar@)">
	<summary>
 Function to create Sql CE
 </summary>
	<param name="sFilename">String, our filename for DTB, in absolute</param>
	<param name="sSQLDirectory">String, Directory</param>
	<param name="oSch">Ludo.DTB.Ludo_DTB_Schema, our DTB Scheam</param>
	<param name="sPassWord">String, our Password</param>
	<param name="PG_Modules">[OPTIONAL] ProgressBar, our progression bar for module</param>
	<param name="LAB_Modules">[OPTIONAL] Label, our label</param>
	<param name="PG_Table">[OPTIONAL] ProgressBar, our progression bar for each table from a module</param>
	<returns>Boolean, true</returns>
	<remarks></remarks>
</member><member name="F:Ludo.DTB.Ludo_DTB_Connexion.lst_oOpsSet">
	<summary>
 The list of all the aviable set
 </summary>
	<remarks></remarks>
</member><member name="F:Ludo.DTB.Ludo_DTB_Connexion.oSet">
	<summary>
 our set to manage the connection
 </summary>
	<remarks></remarks>
</member><member name="F:Ludo.DTB.Ludo_DTB_Connexion.oUniversalCo">
	<summary>
 Our universal connection dude !
 </summary>
	<remarks></remarks>
</member><member name="F:Ludo.DTB.Ludo_DTB_Connexion.nType">
	<summary>
 Connection Type
 </summary>
	<remarks></remarks>
</member><member name="F:Ludo.DTB.Ludo_DTB_Connexion.oConnection_SQL_SERVER">
	<summary>
 Connection SQL_SERVER
 </summary>
	<remarks></remarks>
</member><member name="F:Ludo.DTB.Ludo_DTB_Connexion.oConnection_SQL_SERVER_CE">
	<summary>
 Connection SQL_SERVER_CE
 </summary>
	<remarks></remarks>
</member><member name="F:Ludo.DTB.Ludo_DTB_Connexion.oConnection_OLE_DB">
	<summary>
 Connection OLE DB
 </summary>
	<remarks></remarks>
</member><member name="F:Ludo.DTB.Ludo_DTB_Connexion.bOpen">
	<summary>
 opened connection 
 </summary>
	<remarks></remarks>
</member><member name="F:Ludo.DTB.Ludo_DTB_Connexion.bNativeOpen">
	<summary>
 If we are native open !
 </summary>
	<remarks></remarks>
</member><member name="F:Ludo.DTB.Ludo_DTB_Connexion.bCEOpen">
	<summary>
 if we are Compact open
 </summary>
	<remarks></remarks>
</member><member name="F:Ludo.DTB.Ludo_DTB_Connexion.sName">
	<summary>
 Name of the Connexion
 </summary>
	<remarks></remarks>
</member><member name="M:Ludo.DTB.Ludo_DTB_Connexion.initConnectionAviableSet">
	<summary>
 Static Method init the connection
 </summary>
	<returns>boolean, true if never init</returns>
	<remarks></remarks>
</member><member name="M:Ludo.DTB.Ludo_DTB_Connexion.addConnectionSet(Ludo.DTB.Ludo_DTB_Ops_Set@)">
	<summary>
 Shared method to add a set
 </summary>
	<param name="oSet">Ludo.DTB.Ludo_DTB_Ops_Set, set of operation</param>
	<returns>Boolean, true if done</returns>
	<remarks></remarks>
</member><member name="M:Ludo.DTB.Ludo_DTB_Connexion.replaceConnectionSet(Ludo.DTB.Ludo_DTB_Ops_Set@)">
	<summary>
 Shared method to add or repalce a connection
 </summary>
	<param name="oSet">Ludo.DTB.Ludo_DTB_Ops_Set, our set</param>
	<returns>boolean, true if done</returns>
	<remarks>Don't affect already initialized connection</remarks>
</member><member name="M:Ludo.DTB.Ludo_DTB_Connexion.add_replaceConnectionSet(Ludo.DTB.Ludo_DTB_Ops_Set@)">
	<summary>
 Shared method to add or replace a set of dtb
 </summary>
	<param name="oSet">Ludo.DTB.Ludo_DTB_Ops_Set, our set</param>
	<returns>boolean, true if done</returns>
	<remarks>Don't affect already initialized connection</remarks>
</member><member name="M:Ludo.DTB.Ludo_DTB_Connexion.removeConnectionSet(Ludo.DTB.Ludo_DTB_Ops_Set@)">
	<summary>
 Shared method to remove a DTB Set
 </summary>
	<param name="oSet">Ludo.DTB.Ludo_DTB_Ops_Set, our set</param>
	<returns>boolean, true if done</returns>
	<remarks>Don't affect already initialized connection</remarks>
</member><member name="M:Ludo.DTB.Ludo_DTB_Connexion.Quotes(System.String,System.Int32)">
	<summary>
 Static Method to quote a text
 </summary>
	<param name="sStr">string, our text to quote</param>
	<param name="nType">integer, type of the DTB</param>
	<returns>String, the quoted text</returns>
	<remarks></remarks>
</member><member name="M:Ludo.DTB.Ludo_DTB_Connexion.getName">
	<summary>
 Method to get the Name
 </summary>
	<returns>String, the name of the Database</returns>
	<remarks></remarks>
</member><member name="M:Ludo.DTB.Ludo_DTB_Connexion.getDTBType">
	<summary>
 Method to get the Type of our connection
 </summary>
	<returns>Integer, Corresponding with Integer Const : DTB_TYPE_SQL_SERVER, ...</returns>
	<remarks></remarks>
</member><member name="M:Ludo.DTB.Ludo_DTB_Connexion.getDTBTypeSTR">
	<summary>
 Method to get the String Type of Our Connection
 </summary>
	<returns>String, Sql DTB Name</returns>
	<remarks></remarks>
</member><member name="M:Ludo.DTB.Ludo_DTB_Connexion.isNative">
	<summary>
 Method to Know if connection is native or not (sql server)
 </summary>
	<returns>Boolean</returns>
	<remarks></remarks>
</member><member name="M:Ludo.DTB.Ludo_DTB_Connexion.isCompact">
	<summary>
 Method to know if connection is  compact or not
 </summary>
	<returns>Boolean, True if it is!</returns>
	<remarks></remarks>
</member><member name="M:Ludo.DTB.Ludo_DTB_Connexion.isOpen">
	<summary>
 Method to know the connection is opened
 </summary>
	<returns>Boolean</returns>
	<remarks></remarks>
</member><member name="M:Ludo.DTB.Ludo_DTB_Connexion.createArgs(System.String,System.String,System.String,System.String)">
	<summary>
 Method to create the arguments for the SQL SERVER connection
 </summary>
	<param name="sSrvIpV4">String, Ipv V4</param>
	<param name="sUsr">String, our user</param>
	<param name="sPwd">String, our pass word</param>
	<param name="sDtb">String, our DTB name !</param>
	<returns>String, our parameters</returns>
	<remarks></remarks>
</member><member name="M:Ludo.DTB.Ludo_DTB_Connexion.createArgsCE(System.String,System.String,System.String,System.String)">
	<summary>
 Method to create the arguments for the SQL SERVER CE connection
 </summary>
	<param name="sSrvIpV4">String, Ipv V4</param>
	<param name="sUsr">String, our user</param>
	<param name="sPwd">String, our pass word</param>
	<param name="sDtb">String, our DTB name !</param>
	<returns>String, our parameters</returns>
	<remarks></remarks>
</member><member name="M:Ludo.DTB.Ludo_DTB_Connexion.createArgsOLEDB(System.String,System.String,System.String,System.String)">
	<summary>
 Method to create the arguments for the SQL SERVER connection
 </summary>
	<param name="sSrvIpV4">String, Ipv V4</param>
	<param name="sUsr">String, our user</param>
	<param name="sPwd">String, our pass word</param>
	<param name="sDtb">String, our DTB name !</param>
	<returns>String, our parameters</returns>
	<remarks></remarks>
</member><member name="M:Ludo.DTB.Ludo_DTB_Connexion.configureNative(System.String,System.String,System.String,System.String)">
	<summary>
 Method to create the arguments for the SQL SERVER connection
 </summary>
	<param name="sSrvIpV4">String, Ipv V4</param>
	<param name="sUsr">String, our user</param>
	<param name="sPwd">String, our pass word</param>
	<param name="sDtb">String, our DTB name !</param>
	<returns>Boolean, true if done</returns>
	<remarks></remarks>
</member><member name="M:Ludo.DTB.Ludo_DTB_Connexion.configureCE(System.String,System.String,System.String,System.String)">
	<summary>
 Method to create the arguments for the SQL SERVER CE connection
 </summary>
	<param name="sSrvIpV4">String, Ipv V4</param>
	<param name="sUsr">String, our user</param>
	<param name="sPwd">String, our pass word</param>
	<param name="sDtb">String, our DTB name !</param>
	<returns>Boolean, true if done</returns>
	<remarks></remarks>
</member><member name="M:Ludo.DTB.Ludo_DTB_Connexion.configureOleDb(System.String,System.String,System.String,System.String,System.Int32)">
	<summary>
 Method to create the arguments for the SQL SERVER connection
 </summary>
	<param name="sSrvIpV4">String, Ipv V4</param>
	<param name="sUsr">String, our user</param>
	<param name="sPwd">String, our pass word</param>
	<param name="sDtb">String, our DTB name !</param>
	<returns>Boolean, true if done</returns>
	<remarks></remarks>
</member><member name="M:Ludo.DTB.Ludo_DTB_Connexion.configure(System.String,System.String,System.String,System.String,System.String)">
	<summary>
 Method to configure a new connection
 </summary>
	<param name="sSrvIpV4">String, Ipv V4</param>
	<param name="sUsr">String, our user</param>
	<param name="sPwd">String, our pass word</param>
	<param name="sDtb">String, our DTB name !</param>
	<param name="sTyp">String, our DTB Type</param>
	<returns>Boolean, true if done</returns>
	<remarks></remarks>
</member><member name="M:Ludo.DTB.Ludo_DTB_Connexion.open">
	<summary>
 Method to Open The Connection
 </summary>
	<returns>Boolean, True if open, False if already open</returns>
	<remarks></remarks>
</member><member name="M:Ludo.DTB.Ludo_DTB_Connexion.close">
	<summary>
 Method to close the connection
 </summary>
	<returns>Boolean, True if close, false if already closed</returns>
	<remarks></remarks>
</member><member name="M:Ludo.DTB.Ludo_DTB_Connexion.executeNoDataReturn(System.String)">
	<summary>
 Method to execute a Function with only the affected Line Return
 if result lesser than 0, an error has occured (see DTB_ERROR_XXX)
 </summary>
	<param name="sQuery">String our query</param>
	<returns>Integer, Ludo.DTB.Consts</returns>
	<remarks></remarks>
</member><member name="M:Ludo.DTB.Ludo_DTB_Connexion.insert(System.String)">
	<summary>
 Method to execute an insert
 </summary>
	<param name="sQuery">String our query</param>
	<returns>Integer, number of modified objects</returns>
	<remarks></remarks>
</member><member name="M:Ludo.DTB.Ludo_DTB_Connexion.update(System.String)">
	<summary>
 Method to execute an Update
 </summary>
	<param name="sQuery">String our query</param>
	<returns>Integer, number of modified objects</returns>
	<remarks></remarks>
</member><member name="M:Ludo.DTB.Ludo_DTB_Connexion.delete(System.String)">
	<summary>
 Method to execute a delete
 </summary>
	<param name="sQuery">String our query</param>
	<returns>Integer, number of modified objects</returns>
	<remarks></remarks>
</member><member name="M:Ludo.DTB.Ludo_DTB_Connexion.ExecuteToDataGrid(System.String,System.Windows.Forms.DataGridView@,System.Windows.Forms.ProgressBar@)">
	<summary>
 Method to execute Query to generate a datagrid view
 </summary>
	<param name="sQuery">String, our query</param>
	<param name="cTab">Datagridview, our datagrid</param>
	<param name="PG_Progress_Bar">ProgressBar, if you want see the show</param>
	<returns>Integer, return 1 if good, sees error else</returns>
	<remarks></remarks>
</member><member name="M:Ludo.DTB.Ludo_DTB_Connexion.DataFromQueryNative(System.String,System.Windows.Forms.ProgressBar@)">
	<summary>
 Method to obtain a Ludo data from a query in the Native DTB
 </summary>
	<param name="sQuery">String, our query</param>
	<param name="PG_Progress_Bar">Progressbar, to shaow the progression</param>
	<returns>Ludo_Data, our data</returns>
	<remarks></remarks>
</member><member name="M:Ludo.DTB.Ludo_DTB_Connexion.DataFromQueryCompact(System.String,System.Windows.Forms.ProgressBar@)">
	<summary>
 Method to obtain a Ludo data from a query in the Compact DTB
 </summary>
	<param name="sQuery">String, our query</param>
	<param name="PG_Progress_Bar">Progressbar, to shaow the progression</param>
	<returns>Ludo_Data, our data</returns>
	<remarks></remarks>
</member><member name="M:Ludo.DTB.Ludo_DTB_Connexion.DataFromQueryOleDb(System.String,System.Windows.Forms.ProgressBar@)">
	<summary>
 Method to obtain a Ludo data from a query in the OLE DTB
 </summary>
	<param name="sQuery">String, our query</param>
	<param name="PG_Progress_Bar">Progressbar, to shaow the progression</param>
	<returns>Ludo_Data, our data</returns>
	<remarks></remarks>
</member><member name="M:Ludo.DTB.Ludo_DTB_Connexion.DataFromQuery(System.String,System.Windows.Forms.ProgressBar@)">
	<summary>
 Method to obtain a Ludo data from a query
 </summary>
	<param name="sQuery">String, our query</param>
	<param name="PG_Progress_Bar">Progressbar, to shaow the progression</param>
	<returns>Ludo_Data, our data</returns>
	<remarks></remarks>
</member><member name="M:Ludo.DTB.Ludo_DTB_Connexion.ToString">
	<summary>
 Method to get string
 </summary>
	<returns>String, Our name</returns>
	<remarks></remarks>
</member><member name="M:Ludo.DTB.Ludo_DTB_Connexion.#ctor">
	<summary>
 Default builder
 </summary>
	<remarks></remarks>
</member><member name="M:Ludo.DTB.Ludo_DTB_Connexion.#ctor(System.String,System.String,System.String,System.String,System.String)">
	<summary>
 Builder to use !!!
 </summary>
	<param name="sSrvIpV4">String, Ipv V4</param>
	<param name="sUsr">String, our user</param>
	<param name="sPwd">String, our pass word</param>
	<param name="sDtb">String, our DTB name !</param>
	<param name="sTyp">string, our type of DTB</param>
	<remarks></remarks>
</member><member name="T:Ludo.DTB.Ludo_DTB_Connexion">
	<summary>
 Class to connect to a dtb
 </summary>
	<remarks></remarks>
</member><member name="P:My.Resources.Resources.ResourceManager">
	<summary>
  Retourne l'instance ResourceManager mise en cache utilisée par cette classe.
</summary>
</member><member name="P:My.Resources.Resources.Culture">
	<summary>
  Remplace la propriété CurrentUICulture du thread actuel pour toutes
  les recherches de ressources à l'aide de cette classe de ressource fortement typée.
</summary>
</member><member name="T:My.Resources.Resources">
	<summary>
  Une classe de ressource fortement typée destinée, entre autres, à la consultation des chaînes localisées.
</summary>
</member><member name="M:LUDO_CTRL_SAI.getSystemWindowsFormsTextBox">
	<summary>
 Method to get the original Text object
 </summary>
	<returns>System.Windows.Forms.TextBox</returns>
	<remarks></remarks>
</member><member name="P:LUDO_CTRL_SAI.Text">
	<summary>
 Property to set the text
 </summary>
	<value>String, our value !</value>
	<returns>String, our text</returns>
	<remarks></remarks>
</member><member name="P:LUDO_CTRL_SAI.Font">
	<summary>
 Property to manage the font of the Textbox
 </summary>
	<value>Font, our new font</value>
	<returns>Font, our font</returns>
	<remarks></remarks>
</member><member name="P:LUDO_CTRL_SAI.Enabled">
	<summary>
 Property to managed the enableness
 </summary>
	<value>boolean, the value</value>
	<returns>Boolean, is enabled or not !!!</returns>
	<remarks></remarks>
</member><member name="P:LUDO_CTRL_SAI.ReadOnly">
	<summary>
 Property to manage the read only stuff
 </summary>
	<value>Boolean, our new state</value>
	<returns>Boolean, true if read only</returns>
	<remarks></remarks>
</member><member name="M:LUDO_CTRL_SAI.HANDLER_Click(System.Object,System.EventArgs)">
	<summary>
 Handler to manage the keyUp
 </summary>
	<param name="sender">Object, the sender of the event</param>
	<param name="e">System.Windows.Forms.KeyEventArgs, our event arg</param>
	<remarks></remarks>
</member><member name="M:LUDO_CTRL_SAI.HANDLER_KeyUp(System.Object,System.Windows.Forms.KeyEventArgs)">
	<summary>
 Handler to manage the keyUp
 </summary>
	<param name="sender">Object, the sender of the event</param>
	<param name="e">System.Windows.Forms.KeyEventArgs, our event arg</param>
	<remarks></remarks>
</member><member name="M:LUDO_CTRL_SAI.HANDLER_KeyDown(System.Object,System.Windows.Forms.KeyEventArgs)">
	<summary>
 Handler to manage the keyDown
 </summary>
	<param name="sender">Object, the sender of the event</param>
	<param name="e">System.Windows.Forms.KeyEventArgs, our event arg</param>
	<remarks></remarks>
</member><member name="M:LUDO_CTRL_SAI.HANDLER_KeyPress(System.Object,System.Windows.Forms.KeyPressEventArgs)">
	<summary>
 Handler to manage the keyPress
 </summary>
	<param name="sender">Object, the sender of the event</param>
	<param name="e">System.Windows.Forms.KeyEventArgs, our event arg</param>
	<remarks></remarks>
</member><member name="M:LUDO_CTRL_SAI.#ctor">
	<summary>
 Builder
 </summary>
	<remarks></remarks>
</member><member name="M:LUDO_CTRL_SAI.#ctor(System.String,System.String)">
	<summary>
 Builder with start value
 </summary>
	<param name="sLabelText">string, text of the label</param>
	<param name="sValue">string, text to begin</param>
	<remarks></remarks>
</member><member name="T:LUDO_CTRL_SAI">
	<summary>
 Layout to have a TextBox field with label
 </summary>
	<remarks></remarks>
</member><member name="F:DataGridViewDateTxtCell.bChangeFormat">
	<summary>
 Property to change the value if it's differant to an dd/mm/yyyy String
 </summary>
	<remarks></remarks>
</member><member name="T:DataGridViewDateTxtCell">
	<summary>
 Cell for our Progress bar
 </summary>
	<remarks></remarks>
</member><member name="F:DataGridViewDateCell.bChangeFormat">
	<summary>
 Property to change the value if it's differant to an dd/mm/yyyy String
 </summary>
	<remarks></remarks>
</member><member name="M:DataGridViewDateCell.GetFormattedValue(System.Object,System.Int32,System.Windows.Forms.DataGridViewCellStyle@,System.ComponentModel.TypeConverter,System.ComponentModel.TypeConverter,System.Windows.Forms.DataGridViewDataErrorContexts)">
	<summary>
 Method required to make the Progress Cell consistent with the default Image Cell. 
 </summary>
	<param name="value"></param>
	<param name="rowIndex"></param>
	<param name="cellStyle"></param>
	<param name="valueTypeConverter"></param>
	<param name="formattedValueTypeConverter"></param>
	<param name="context"></param>
	<returns></returns>
	<remarks>The default Image Cell assumes an Image as a value, although the value of the Progress Cell is an Integer.</remarks>
</member><member name="M:DataGridViewDateCell.Paint(System.Drawing.Graphics,System.Drawing.Rectangle,System.Drawing.Rectangle,System.Int32,System.Windows.Forms.DataGridViewElementStates,System.Object,System.Object,System.String,System.Windows.Forms.DataGridViewCellStyle,System.Windows.Forms.DataGridViewAdvancedBorderStyle,System.Windows.Forms.DataGridViewPaintParts)">
	<summary>
 Paint Method
 </summary>
	<param name="g"></param>
	<param name="clipBounds"></param>
	<param name="cellBounds"></param>
	<param name="rowIndex"></param>
	<param name="cellState"></param>
	<param name="value"></param>
	<param name="formattedValue"></param>
	<param name="errorText"></param>
	<param name="cellStyle"></param>
	<param name="advancedBorderStyle"></param>
	<param name="paintParts"></param>
	<remarks></remarks>
</member><member name="T:DataGridViewDateCell">
	<summary>
 Cell for our Date bar
 </summary>
	<remarks></remarks>
</member><member name="E:LAY_LUDO_DTB_Column_editor.eDelete">
	<summary>
 Our event to delete the Column
 </summary>
	<remarks></remarks>
</member><member name="F:LAY_LUDO_DTB_Column_editor.oColumn">
	<summary>
 Our default column object to modelize a column object
 </summary>
	<remarks></remarks>
</member><member name="F:LAY_LUDO_DTB_Column_editor.lst_sKeyType">
	<summary>
 Our list of possible key type
 </summary>
	<remarks></remarks>
</member><member name="F:LAY_LUDO_DTB_Column_editor.lst_sValueType">
	<summary>
 Our list of possibles value type
 </summary>
	<remarks></remarks>
</member><member name="M:LAY_LUDO_DTB_Column_editor.fillKeytype">
	<summary>
 Method to fill our list of Key Type
 </summary>
	<returns>Boolean, True if done</returns>
	<remarks></remarks>
</member><member name="M:LAY_LUDO_DTB_Column_editor.fillValuetype">
	<summary>
 Method to fill the list of aviable type of value
 </summary>
	<returns>Boolean, true if done</returns>
	<remarks></remarks>
</member><member name="M:LAY_LUDO_DTB_Column_editor.init(Ludo.DTB.Ludo_DTB_Column@)">
	<summary>
 Method to initialize the Layout
 </summary>
	<param name="oCol">Ludo.DTB.Ludo_DTB_Row, our Column</param>
	<returns>Boolean, true if done</returns>
	<remarks></remarks>
</member><member name="M:LAY_LUDO_DTB_Column_editor.setColumn(Ludo.DTB.Ludo_DTB_Column@)">
	<summary>
 Method to set our column
 </summary>
	<param name="oCol">Ludo.DTB.Ludo_DTB_Row, our Column</param>
	<returns>Boolean, true if done</returns>
	<remarks></remarks>
</member><member name="M:LAY_LUDO_DTB_Column_editor.getLudo_DTB_Column">
	<summary>
 Method to get the column element
 </summary>
	<returns>Ludo.DTB.Ludo_DTB_Row, our column element to proceed</returns>
	<remarks></remarks>
</member><member name="M:LAY_LUDO_DTB_Column_editor.viewToObj(Ludo.DTB.Ludo_DTB_Column)">
	<summary>
 Method to set the field element from the view to the Ludo.DTB.Ludo_DTB_Column
 </summary>
	<param name="oCol">Ludo.DTB.Ludo_DTB_Row, our Column</param>
	<returns>Boolean, True if done</returns>
	<remarks></remarks>
</member><member name="M:LAY_LUDO_DTB_Column_editor.objToView(Ludo.DTB.Ludo_DTB_Column)">
	<summary>
 Method to fill our view field with our column obj
 </summary>
	<param name="oCol">Ludo.DTB.Ludo_DTB_Row, our Column</param>
	<returns>Boolean, true if done</returns>
	<remarks></remarks>
</member><member name="M:LAY_LUDO_DTB_Column_editor.raiseeDeleteEvent">
	<summary>
 Method to raise the delete event
 </summary>
	<returns>Boolean, True if done</returns>
	<remarks></remarks>
</member><member name="M:LAY_LUDO_DTB_Column_editor.checkValidity">
	<summary>
 Method to check the constraint of a column in a table
 </summary>
	<returns>Boolean, true if ok</returns>
	<remarks></remarks>
</member><member name="M:LAY_LUDO_DTB_Column_editor.saveColum">
	<summary>
 Method to save the column
 </summary>
	<returns>Boolean, true if done</returns>
	<remarks></remarks>
</member><member name="M:LAY_LUDO_DTB_Column_editor.BTN_Delete_Click(System.Object,System.EventArgs)">
	<summary>
 Handler to manage the delete event
 </summary>
	<param name="sender">Object, the sender of the event</param>
	<param name="e">EventArg, the argument</param>
	<remarks>This Handler calls the public overridable method raiseeDeleteEvent()</remarks>
</member><member name="M:LAY_LUDO_DTB_Column_editor.OPT_Check_Click(System.Object,System.EventArgs)">
	<summary>
 Handler to manage manual check
 </summary>
	<param name="sender">Object, the sender of the event</param>
	<param name="e">EventArg, the argument</param>
	<remarks>This Handler calls the public overridable method checkValidity()</remarks>
</member><member name="M:LAY_LUDO_DTB_Column_editor.OPT_Clone_Click(System.Object,System.EventArgs)">
	<summary>
 Handler to manage the clonage of this column
 </summary>
	<param name="sender">Object, the sender of the event</param>
	<param name="e">EventArg, the argument</param>
	<remarks></remarks>
</member><member name="M:LAY_LUDO_DTB_Column_editor.OPT_Delete_Click(System.Object,System.EventArgs)">
	<summary>
 Handler to manage the delete from the ContextMenu
 </summary>
	<param name="sender">Object, the sender of the event</param>
	<param name="e">EventArg, the argument</param>
	<remarks>This Handler calls the public overridable method raiseeDeleteEvent()</remarks>
</member><member name="M:LAY_LUDO_DTB_Column_editor.#ctor">
	<summary>
 Default builder
 </summary>
	<remarks></remarks>
</member><member name="M:LAY_LUDO_DTB_Column_editor.#ctor(Ludo.DTB.Ludo_DTB_Column@)">
	<summary>
 Builder with parameters
 </summary>
	<param name="oCol">Ludo.DTB.Ludo_DTB_Row, our Column</param>
	<remarks></remarks>
</member><member name="T:LAY_LUDO_DTB_Column_editor">
	<summary>
 Layout to create or modify a Column schema
 </summary>
	<remarks></remarks>
</member><member name="M:LUDO_CTRL_COMBO.getSystemWindowsFormsComboBox">
	<summary>
 Method to get the original Combo box object
 </summary>
	<returns>System.Windows.Forms.ComboBox</returns>
	<remarks></remarks>
</member><member name="P:LUDO_CTRL_COMBO.Text">
	<summary>
 Property to set the text
 </summary>
	<value>String, our value !</value>
	<returns>String, our text</returns>
	<remarks></remarks>
</member><member name="P:LUDO_CTRL_COMBO.Font">
	<summary>
 Property to manage the font of the Textbox
 </summary>
	<value>Font, our new font</value>
	<returns>Font, our font</returns>
	<remarks></remarks>
</member><member name="P:LUDO_CTRL_COMBO.Enabled">
	<summary>
 Property to managed the enableness
 </summary>
	<value>boolean, the value</value>
	<returns>Boolean, is enabled or not !!!</returns>
	<remarks></remarks>
</member><member name="P:LUDO_CTRL_COMBO.SelectedIndex">
	<summary>
 Property to select an index
 </summary>
	<value>Integer, the new index</value>
	<returns>Integer, our index</returns>
	<remarks></remarks>
</member><member name="P:LUDO_CTRL_COMBO.SelectedItem">
	<summary>
 Property to select the item 
 </summary>
	<value>Object, our new selected item</value>
	<returns>Object, our selected object</returns>
	<remarks></remarks>
</member><member name="P:LUDO_CTRL_COMBO.SelectedValue">
	<summary>
 Property to manage the selected value
 </summary>
	<value>Object, our new selected value</value>
	<returns>Object, our selected value</returns>
	<remarks></remarks>
</member><member name="P:LUDO_CTRL_COMBO.selectedText">
	<summary>
 Property to manage  the selected text
 </summary>
	<value>String, our new selected text</value>
	<returns>String, our selected tex</returns>
	<remarks></remarks>
</member><member name="P:LUDO_CTRL_COMBO.DataSource">
	<summary>
 Property to manage the data source
 </summary>
	<value>Object, our new data source</value>
	<returns>Object, our data source</returns>
	<remarks></remarks>
</member><member name="P:LUDO_CTRL_COMBO.Items">
	<summary>
 Property to manage the Items
 </summary>
	<returns>System.Windows.Forms.ComboBox.ObjectCollection, the items</returns>
	<remarks></remarks>
</member><member name="M:LUDO_CTRL_COMBO.HANDLER_Click(System.Object,System.EventArgs)">
	<summary>
 Handler to manage the keyUp
 </summary>
	<param name="sender">Object, the sender of the event</param>
	<param name="e">System.Windows.Forms.KeyEventArgs, our event arg</param>
	<remarks></remarks>
</member><member name="M:LUDO_CTRL_COMBO.HANDLER_KeyUp(System.Object,System.Windows.Forms.KeyEventArgs)">
	<summary>
 Handler to manage the keyUp
 </summary>
	<param name="sender">Object, the sender of the event</param>
	<param name="e">System.Windows.Forms.KeyEventArgs, our event arg</param>
	<remarks></remarks>
</member><member name="M:LUDO_CTRL_COMBO.HANDLER_KeyDown(System.Object,System.Windows.Forms.KeyEventArgs)">
	<summary>
 Handler to manage the keyDown
 </summary>
	<param name="sender">Object, the sender of the event</param>
	<param name="e">System.Windows.Forms.KeyEventArgs, our event arg</param>
	<remarks></remarks>
</member><member name="M:LUDO_CTRL_COMBO.HANDLER_KeyPress(System.Object,System.Windows.Forms.KeyPressEventArgs)">
	<summary>
 Handler to manage the keyPress
 </summary>
	<param name="sender">Object, the sender of the event</param>
	<param name="e">System.Windows.Forms.KeyEventArgs, our event arg</param>
	<remarks></remarks>
</member><member name="M:LUDO_CTRL_COMBO.#ctor">
	<summary>
 Builder
 </summary>
	<remarks></remarks>
</member><member name="T:LUDO_CTRL_COMBO">
	<summary>
 Layout to have a Combo field with label
 </summary>
	<remarks></remarks>
</member><member name="F:WIN_LUDO_DTB_CreateCompactDTB.bModeCreation">
	<summary>
 Member to define the mode of the windows
 </summary>
	<remarks></remarks>
</member><member name="F:WIN_LUDO_DTB_CreateCompactDTB.oConnexion">
	<summary>
 Our return connexion
 </summary>
	<remarks></remarks>
</member><member name="M:WIN_LUDO_DTB_CreateCompactDTB.setbModeCreation(System.Boolean)">
	<summary>
 Method to set the mode to use the funct_ion
 </summary>
	<param name="bCreation">Boolean, True to have creation mode, false to have attach Mode</param>
	<returns>Boolean, True if job done !!!</returns>
	<remarks></remarks>
</member><member name="M:WIN_LUDO_DTB_CreateCompactDTB.getbModeCreation">
	<summary>
 Method to get the mode of the window
 </summary>
	<returns>Boolean, return the value</returns>
	<remarks></remarks>
</member><member name="M:WIN_LUDO_DTB_CreateCompactDTB.creationCE">
	<summary>
 Method to create the compact Database !
 </summary>
	<returns>Boolean, return True if Done !!!</returns>
	<remarks></remarks>
</member><member name="M:WIN_LUDO_DTB_CreateCompactDTB.attachCE">
	<summary>
 Method to attach the compact base
 </summary>
	<returns>Boolean, True if done !!!</returns>
	<remarks></remarks>
</member><member name="M:WIN_LUDO_DTB_CreateCompactDTB.getConnexion">
	<summary>
 Method to get the connection choosen or created
 </summary>
	<returns>Ludo.DTB.Ludo_DTB_Connexion, not null if connect</returns>
	<remarks></remarks>
</member><member name="M:WIN_LUDO_DTB_CreateCompactDTB.security">
	<summary>
 Method to manage the security
 </summary>
	<returns>Boolean, return True if everything is ok !!!</returns>
	<remarks></remarks>
</member><member name="M:WIN_LUDO_DTB_CreateCompactDTB.action">
	<summary>
 Method to create or attach
 </summary>
	<returns>Boolean, Return True if action donne</returns>
	<remarks></remarks>
</member><member name="M:WIN_LUDO_DTB_CreateCompactDTB.SAI_File_Enter(System.Object,System.Windows.Forms.KeyEventArgs)">
	<summary>
 Handler to activate action form the SAI File
 </summary>
	<param name="sender">Object, sender of the event</param>
	<param name="e">System.Windows.Forms.KeyEventArgs, argument</param>
	<remarks></remarks>
</member><member name="M:WIN_LUDO_DTB_CreateCompactDTB.BTN_File_Click(System.Object,System.EventArgs)">
	<summary>
 Handler to change the file path
 </summary>
	<param name="sender">Object, sender of the event</param>
	<param name="e">EventArgs, argument</param>
	<remarks></remarks>
</member><member name="M:WIN_LUDO_DTB_CreateCompactDTB.SAI_Password_Enter(System.Object,System.Windows.Forms.KeyEventArgs)">
	<summary>
 Handler to activate action form the SAI PWD
 </summary>
	<param name="sender">Object, sender of the event</param>
	<param name="e">System.Windows.Forms.KeyEventArgs, argument</param>
	<remarks></remarks>
</member><member name="M:WIN_LUDO_DTB_CreateCompactDTB.BTN_Create_Click(System.Object,System.EventArgs)">
	<summary>
 Handler to Activate action
 </summary>
	<param name="sender">Object, sender of the event</param>
	<param name="e">EventArgs, argument</param>
	<remarks></remarks>
</member><member name="M:WIN_LUDO_DTB_CreateCompactDTB.#ctor">
	<summary>
 Never used builders
 </summary>
	<remarks></remarks>
</member><member name="M:WIN_LUDO_DTB_CreateCompactDTB.#ctor(System.Boolean)">
	<summary>
 Builder with Parameters !!!
 </summary>
	<param name="bCreation">[OPTIONNAL]Boolean, True if creation mode coosen</param>
	<remarks></remarks>
</member><member name="T:WIN_LUDO_DTB_CreateCompactDTB">
	<summary>
 Windows to create or attach a Compact DTB
 </summary>
	<remarks></remarks>
</member>
</members>
</doc>